{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","screwdriver-ui/tests/acceptance/create-page-test.js","screwdriver-ui/tests/acceptance/dashboards-test.js","screwdriver-ui/tests/acceptance/metrics-test.js","screwdriver-ui/tests/acceptance/pipeline-builds-test.js","screwdriver-ui/tests/acceptance/pipeline-childPipelines-test.js","screwdriver-ui/tests/acceptance/pipeline-options-test.js","screwdriver-ui/tests/acceptance/pipeline-pr-chain-test.js","screwdriver-ui/tests/acceptance/search-test.js","screwdriver-ui/tests/acceptance/secrets-test.js","screwdriver-ui/tests/acceptance/tokens-test.js","screwdriver-ui/tests/components/ember-ace.js","screwdriver-ui/tests/helpers/ember-simple-auth.js","screwdriver-ui/tests/helpers/inject-scm.js","screwdriver-ui/tests/helpers/inject-session.js","screwdriver-ui/tests/helpers/responsive.js","screwdriver-ui/tests/integration/components/app-header/component-test.js","screwdriver-ui/tests/integration/components/artifact-tree/component-test.js","screwdriver-ui/tests/integration/components/bread-crumbs/component-test.js","screwdriver-ui/tests/integration/components/build-banner/component-test.js","screwdriver-ui/tests/integration/components/build-log/component-test.js","screwdriver-ui/tests/integration/components/build-step-collection/component-test.js","screwdriver-ui/tests/integration/components/build-step-item/component-test.js","screwdriver-ui/tests/integration/components/chart-c3/component-test.js","screwdriver-ui/tests/integration/components/collection-dropdown/component-test.js","screwdriver-ui/tests/integration/components/collection-modal/component-test.js","screwdriver-ui/tests/integration/components/collection-view/component-test.js","screwdriver-ui/tests/integration/components/collections-flyout/component-test.js","screwdriver-ui/tests/integration/components/command-format/componenet-test.js","screwdriver-ui/tests/integration/components/command-header/component-test.js","screwdriver-ui/tests/integration/components/command-versions/component-test.js","screwdriver-ui/tests/integration/components/error-view/component-test.js","screwdriver-ui/tests/integration/components/home-hero/component-test.js","screwdriver-ui/tests/integration/components/info-message/component-test.js","screwdriver-ui/tests/integration/components/job-toggle-modal/component-test.js","screwdriver-ui/tests/integration/components/loading-view/component-test.js","screwdriver-ui/tests/integration/components/login-button/component-test.js","screwdriver-ui/tests/integration/components/nav-banner/component-test.js","screwdriver-ui/tests/integration/components/pipeline-create-form/component-test.js","screwdriver-ui/tests/integration/components/pipeline-event-row/component-test.js","screwdriver-ui/tests/integration/components/pipeline-events-list/component-test.js","screwdriver-ui/tests/integration/components/pipeline-graph-nav/component-test.js","screwdriver-ui/tests/integration/components/pipeline-header/component-test.js","screwdriver-ui/tests/integration/components/pipeline-list/component-test.js","screwdriver-ui/tests/integration/components/pipeline-nav/component-test.js","screwdriver-ui/tests/integration/components/pipeline-options/component-test.js","screwdriver-ui/tests/integration/components/pipeline-pr-list/component-test.js","screwdriver-ui/tests/integration/components/pipeline-pr-view/component-test.js","screwdriver-ui/tests/integration/components/pipeline-rootdir/component-test.js","screwdriver-ui/tests/integration/components/pipeline-secret-settings/component-test.js","screwdriver-ui/tests/integration/components/pipeline-start/component-test.js","screwdriver-ui/tests/integration/components/pipeline-workflow/component-test.js","screwdriver-ui/tests/integration/components/search-list/component-test.js","screwdriver-ui/tests/integration/components/secret-view/component-test.js","screwdriver-ui/tests/integration/components/tc-collection-linker/component-test.js","screwdriver-ui/tests/integration/components/tc-collection-list/component-test.js","screwdriver-ui/tests/integration/components/template-header/component-test.js","screwdriver-ui/tests/integration/components/template-versions/component-test.js","screwdriver-ui/tests/integration/components/token-list/component-test.js","screwdriver-ui/tests/integration/components/token-view/component-test.js","screwdriver-ui/tests/integration/components/user-link/component-test.js","screwdriver-ui/tests/integration/components/validator-input/component-test.js","screwdriver-ui/tests/integration/components/validator-job/component-test.js","screwdriver-ui/tests/integration/components/validator-pipeline/component-test.js","screwdriver-ui/tests/integration/components/validator-results/component-test.js","screwdriver-ui/tests/integration/components/workflow-graph-d3/component-test.js","screwdriver-ui/tests/integration/components/workflow-tooltip/component-test.js","screwdriver-ui/tests/integration/helpers/get-step-data-test.js","screwdriver-ui/tests/integration/helpers/x-duration-test.js","screwdriver-ui/tests/lint/app.lint-test.js","screwdriver-ui/tests/lint/templates.template.lint-test.js","screwdriver-ui/tests/lint/tests.lint-test.js","screwdriver-ui/tests/mock/builds.js","screwdriver-ui/tests/mock/events.js","screwdriver-ui/tests/mock/jobs.js","screwdriver-ui/tests/mock/metrics.js","screwdriver-ui/tests/mock/pipeline.js","screwdriver-ui/tests/mock/workflow-graph.js","screwdriver-ui/tests/test-helper.js","screwdriver-ui/tests/unit/404/route-test.js","screwdriver-ui/tests/unit/application/adapter-test.js","screwdriver-ui/tests/unit/application/controller-test.js","screwdriver-ui/tests/unit/application/route-test.js","screwdriver-ui/tests/unit/banner/service-test.js","screwdriver-ui/tests/unit/build-artifact/service-test.js","screwdriver-ui/tests/unit/build-logs/service-test.js","screwdriver-ui/tests/unit/build/model-test.js","screwdriver-ui/tests/unit/build/serializer-test.js","screwdriver-ui/tests/unit/builds/route-test.js","screwdriver-ui/tests/unit/cache/service-test.js","screwdriver-ui/tests/unit/collection/model-test.js","screwdriver-ui/tests/unit/collection/serializer-test.js","screwdriver-ui/tests/unit/command/service-test.js","screwdriver-ui/tests/unit/commands/controller-test.js","screwdriver-ui/tests/unit/commands/detail/controller-test.js","screwdriver-ui/tests/unit/commands/detail/router-test.js","screwdriver-ui/tests/unit/commands/index/router-test.js","screwdriver-ui/tests/unit/commands/router-test.js","screwdriver-ui/tests/unit/coverage/service-test.js","screwdriver-ui/tests/unit/create/controller-test.js","screwdriver-ui/tests/unit/create/route-test.js","screwdriver-ui/tests/unit/dashboard/index/route-test.js","screwdriver-ui/tests/unit/dashboard/show/controller-test.js","screwdriver-ui/tests/unit/dashboard/show/route-test.js","screwdriver-ui/tests/unit/event-stop/service-test.js","screwdriver-ui/tests/unit/event/model-test.js","screwdriver-ui/tests/unit/helpers/ansi-colorize-test.js","screwdriver-ui/tests/unit/helpers/get-last-build-test.js","screwdriver-ui/tests/unit/helpers/index-of-test.js","screwdriver-ui/tests/unit/home/route-test.js","screwdriver-ui/tests/unit/instance-initializers/supplementary-config-test.js","screwdriver-ui/tests/unit/job/model-test.js","screwdriver-ui/tests/unit/job/serializer-test.js","screwdriver-ui/tests/unit/login/controller-test.js","screwdriver-ui/tests/unit/login/route-test.js","screwdriver-ui/tests/unit/metric/model-test.js","screwdriver-ui/tests/unit/mixins/model-reloader-test.js","screwdriver-ui/tests/unit/pipeline-startall/service-test.js","screwdriver-ui/tests/unit/pipeline-triggers/service-test.js","screwdriver-ui/tests/unit/pipeline/build/controller-test.js","screwdriver-ui/tests/unit/pipeline/build/route-test.js","screwdriver-ui/tests/unit/pipeline/build/step/route-test.js","screwdriver-ui/tests/unit/pipeline/events/controller-test.js","screwdriver-ui/tests/unit/pipeline/events/route-test.js","screwdriver-ui/tests/unit/pipeline/index/route-test.js","screwdriver-ui/tests/unit/pipeline/metrics/controller-test.js","screwdriver-ui/tests/unit/pipeline/metrics/route-test.js","screwdriver-ui/tests/unit/pipeline/model-test.js","screwdriver-ui/tests/unit/pipeline/options/controller-test.js","screwdriver-ui/tests/unit/pipeline/options/route-test.js","screwdriver-ui/tests/unit/pipeline/pulls/route-test.js","screwdriver-ui/tests/unit/pipeline/route-test.js","screwdriver-ui/tests/unit/pipeline/secrets/controller-test.js","screwdriver-ui/tests/unit/pipeline/secrets/route-test.js","screwdriver-ui/tests/unit/pipeline/serializer-test.js","screwdriver-ui/tests/unit/pr-events/service-test.js","screwdriver-ui/tests/unit/search/controller-test.js","screwdriver-ui/tests/unit/search/route-test.js","screwdriver-ui/tests/unit/secret/model-test.js","screwdriver-ui/tests/unit/secret/serializer-test.js","screwdriver-ui/tests/unit/store/service-test.js","screwdriver-ui/tests/unit/sync/service-test.js","screwdriver-ui/tests/unit/template/service-test.js","screwdriver-ui/tests/unit/templates/detail/controller-test.js","screwdriver-ui/tests/unit/templates/detail/route-test.js","screwdriver-ui/tests/unit/templates/index/route-test.js","screwdriver-ui/tests/unit/templates/route-test.js","screwdriver-ui/tests/unit/token/model-test.js","screwdriver-ui/tests/unit/token/serializer-test.js","screwdriver-ui/tests/unit/utils/build-test.js","screwdriver-ui/tests/unit/utils/git-test.js","screwdriver-ui/tests/unit/utils/graph-tools-test.js","screwdriver-ui/tests/unit/utils/template-test.js","screwdriver-ui/tests/unit/utils/time-range-test.js","screwdriver-ui/tests/unit/validator/controller-test.js","screwdriver-ui/tests/unit/validator/route-test.js","screwdriver-ui/tests/unit/validator/service-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"screwdriver-ui/tests/acceptance/create-page-test\", [\"@ember/test-helpers\", \"qunit\", \"ember-qunit\", \"ember-simple-auth/test-support\", \"pretender\"], function (_testHelpers, _qunit, _emberQunit, _testSupport, _pretender) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Acceptance | create', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n      server.get('http://localhost:8080/v4/collections', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([])]);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('/create a pipeline: not logged in will redirect', async function (assert) {\n      await (0, _testHelpers.visit)('/create');\n      assert.equal((0, _testHelpers.currentURL)(), '/login');\n    });\n    (0, _qunit.test)('/create a pipeline: SUCCESS', async function (assert) {\n      server.post('http://localhost:8080/v4/pipelines', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        id: '1'\n      })]);\n      server.get('http://localhost:8080/v4/pipelines/1', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        id: '1'\n      })]);\n      server.get('http://localhost:8080/v4/pipelines/1/events', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([])]);\n      server.get('http://localhost:8080/v4/builds', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([])]);\n      server.get('http://localhost:8080/v4/pipelines/1/jobs', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([])]);\n      server.get('http://localhost:8080/v4/pipelines/1/triggers', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([])]);\n      await (0, _testSupport.authenticateSession)({\n        token: 'faketoken'\n      });\n      await (0, _testHelpers.visit)('/create');\n      assert.equal((0, _testHelpers.currentURL)(), '/create');\n      await (0, _testHelpers.fillIn)('.text-input', 'git@github.com:foo/bar.git');\n      await (0, _testHelpers.triggerEvent)('.text-input', 'keyup');\n      await (0, _testHelpers.click)('button.blue-button');\n      assert.equal((0, _testHelpers.currentURL)(), '/pipelines/1/events');\n    });\n    (0, _qunit.test)('/create a pipeline with rootDir: SUCCESS', async function (assert) {\n      server.post('http://localhost:8080/v4/pipelines', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        id: '1'\n      })]);\n      server.get('http://localhost:8080/v4/pipelines/1', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        id: '1'\n      })]);\n      server.get('http://localhost:8080/v4/pipelines/1/events', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([])]);\n      server.get('http://localhost:8080/v4/builds', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([])]);\n      server.get('http://localhost:8080/v4/pipelines/1/jobs', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([])]);\n      server.get('http://localhost:8080/v4/pipelines/1/triggers', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([])]);\n      await (0, _testSupport.authenticateSession)({\n        token: 'faketoken'\n      });\n      await (0, _testHelpers.visit)('/create');\n      assert.equal((0, _testHelpers.currentURL)(), '/create');\n      await (0, _testHelpers.fillIn)('.scm-url', 'git@github.com:foo/bar.git');\n      await (0, _testHelpers.triggerEvent)('.scm-url', 'keyup');\n      await (0, _testHelpers.click)('.checkbox-input');\n      await (0, _testHelpers.fillIn)('.root-dir', 'lib');\n      await (0, _testHelpers.click)('button.blue-button');\n      assert.equal((0, _testHelpers.currentURL)(), '/pipelines/1/events');\n    });\n    (0, _qunit.test)('/create a pipeline: FAILURE', async function (assert) {\n      server.post('http://localhost:8080/v4/pipelines', () => [409, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        statusCode: 409,\n        error: 'Conflict',\n        message: 'something conflicting'\n      })]);\n      await (0, _testSupport.authenticateSession)({\n        token: 'faketoken'\n      });\n      await (0, _testHelpers.visit)('/create');\n      assert.equal((0, _testHelpers.currentURL)(), '/create');\n      await (0, _testHelpers.fillIn)('.text-input', 'git@github.com:foo/bar.git');\n      await (0, _testHelpers.triggerEvent)('.text-input', 'keyup');\n      await (0, _testHelpers.click)('button.blue-button');\n      assert.equal((0, _testHelpers.currentURL)(), '/create');\n      assert.dom('.alert > span').hasText('something conflicting');\n    });\n  });\n});","define(\"screwdriver-ui/tests/acceptance/dashboards-test\", [\"@ember/test-helpers\", \"qunit\", \"ember-qunit\", \"ember-simple-auth/test-support\", \"pretender\"], function (_testHelpers, _qunit, _emberQunit, _testSupport, _pretender) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Acceptance | dashboards', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n      server.get('http://localhost:8080/v4/collections', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([])]);\n      server.get('http://localhost:8080/v4/collections/1', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([{\n        id: 1,\n        name: 'collection1',\n        description: 'description1',\n        pipelines: [{\n          id: 12742,\n          scmUri: 'github.com:12345678:master',\n          createTime: '2017-01-05T00:55:46.775Z',\n          admins: {\n            username: true\n          },\n          workflow: ['main', 'publish'],\n          scmRepo: {\n            name: 'screwdriver-cd/screwdriver',\n            branch: 'master',\n            url: 'https://github.com/screwdriver-cd/screwdriver/tree/master'\n          },\n          scmContext: 'github:github.com',\n          annotations: {},\n          lastEventId: 12,\n          lastBuilds: [{\n            id: 123,\n            status: 'SUCCESS'\n          }, {\n            id: 124,\n            status: 'FAILURE'\n          }]\n        }, {\n          id: 12743,\n          scmUri: 'github.com:87654321:master',\n          createTime: '2017-01-05T00:55:46.775Z',\n          admins: {\n            username: true\n          },\n          workflow: ['main', 'publish'],\n          scmRepo: {\n            name: 'screwdriver-cd/ui',\n            branch: 'master',\n            url: 'https://github.com/screwdriver-cd/ui/tree/master'\n          },\n          scmContext: 'github:github.com',\n          annotations: {},\n          prs: {\n            open: 2,\n            failing: 1\n          }\n        }]\n      }])]);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('visiting / when not logged in', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.equal((0, _testHelpers.currentURL)(), '/login');\n    });\n    (0, _qunit.test)('visiting / when logged in and no collections', async function (assert) {\n      await (0, _testSupport.authenticateSession)({\n        token: 'fakeToken'\n      });\n      await (0, _testHelpers.visit)('/');\n      assert.equal((0, _testHelpers.currentURL)(), '/');\n    });\n    (0, _qunit.test)('visiting / when logged in and have collections', async function (assert) {\n      server.get('http://localhost:8080/v4/collections', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([{\n        id: 2,\n        name: 'collection2',\n        description: 'description2',\n        pipelineIds: [4, 5, 6]\n      }, {\n        id: 1,\n        name: 'collection1',\n        description: 'description1',\n        pipelineIds: [1, 2, 3]\n      }])]);\n      await (0, _testSupport.authenticateSession)({\n        token: 'fakeToken'\n      });\n      await (0, _testHelpers.visit)('/');\n      assert.equal((0, _testHelpers.currentURL)(), '/dashboards/1');\n      assert.dom('.header__name').hasText('collection1');\n      assert.dom('.header__description').hasText('description1');\n      assert.dom('table').exists({\n        count: 1\n      });\n      assert.dom('th.app-id').hasText('Name');\n      assert.dom('th.branch').hasText('Branch');\n      assert.dom('th.account').hasText('Account');\n      assert.dom('tr').exists({\n        count: 4\n      });\n      assert.dom('td').exists({\n        count: 14\n      });\n    });\n    (0, _qunit.test)('visiting /dashboards when not logged in', async function (assert) {\n      await (0, _testHelpers.visit)('/dashboards');\n      assert.equal((0, _testHelpers.currentURL)(), '/login');\n    });\n    (0, _qunit.test)('visiting /dashboards when logged in and no collections', async function (assert) {\n      await (0, _testSupport.authenticateSession)({\n        token: 'fakeToken'\n      });\n      await (0, _testHelpers.visit)('/dashboards');\n      assert.equal((0, _testHelpers.currentURL)(), '/');\n    });\n    (0, _qunit.test)('visiting /dashboards/1', async function (assert) {\n      await (0, _testSupport.authenticateSession)({\n        token: 'fakeToken'\n      });\n      await (0, _testHelpers.visit)('/dashboards/1');\n      assert.equal((0, _testHelpers.currentURL)(), '/dashboards/1');\n      assert.dom('.header__name').hasText('collection1');\n      assert.dom('.header__description').hasText('description1');\n      assert.dom('table').exists({\n        count: 1\n      });\n      assert.dom('th.app-id').hasText('Name');\n      assert.dom('th.branch').hasText('Branch');\n      assert.dom('th.account').hasText('Account');\n      assert.dom('tr').exists({\n        count: 4\n      });\n      assert.dom('td').exists({\n        count: 14\n      });\n    });\n    (0, _qunit.test)('creating a collection', async function (assert) {\n      assert.expect(7);\n      const expectedRequestBody = {\n        name: 'collection3',\n        description: 'description3'\n      };\n      server.post('http://localhost:8080/v4/collections', request => {\n        assert.deepEqual(JSON.parse(request.requestBody), expectedRequestBody);\n        return [201, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify({\n          id: 3,\n          name: 'collection3',\n          description: 'description3'\n        })];\n      }); // GET request made in the search route for pipelines\n\n      server.get('http://localhost:8080/v4/pipelines', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([{\n        id: 12742,\n        scmUri: 'github.com:12345678:master',\n        createTime: '2017-01-05T00:55:46.775Z',\n        admins: {\n          username: true\n        },\n        workflow: ['main', 'publish'],\n        scmRepo: {\n          name: 'screwdriver-cd/screwdriver',\n          branch: 'master',\n          url: 'https://github.com/screwdriver-cd/screwdriver/tree/master'\n        },\n        scmContext: 'github:github.com',\n        annotations: {}\n      }, {\n        id: 12743,\n        scmUri: 'github.com:87654321:master',\n        createTime: '2017-01-05T00:55:46.775Z',\n        admins: {\n          username: true\n        },\n        workflow: ['main', 'publish'],\n        scmRepo: {\n          name: 'screwdriver-cd/ui',\n          branch: 'master',\n          url: 'https://github.com/screwdriver-cd/ui/tree/master'\n        },\n        scmContext: 'github:github.com',\n        annotations: {}\n      }])]);\n      await (0, _testSupport.authenticateSession)({\n        token: 'fakeToken'\n      });\n      await (0, _testHelpers.visit)('/'); // Logged in but no collections, url should be `/`\n\n      assert.equal((0, _testHelpers.currentURL)(), '/');\n      await (0, _testHelpers.visit)('/search');\n      assert.dom('.flyout').exists({\n        count: 1\n      });\n      assert.notOk((0, _testHelpers.findAll)('.modal').length);\n      assert.notOk((0, _testHelpers.findAll)('.collection-wrapper row').length);\n      await (0, _testHelpers.click)('.new');\n      assert.dom('.modal').exists({\n        count: 1\n      });\n      await (0, _testHelpers.fillIn)('.name input', 'collection3');\n      await (0, _testHelpers.triggerEvent)('.name input', 'keyup');\n      await (0, _testHelpers.fillIn)('.description textarea', 'description3');\n      await (0, _testHelpers.triggerEvent)('.description textarea', 'keyup');\n      await (0, _testHelpers.click)('.collection-form__create'); // The modal should disappear\n\n      assert.notOk((0, _testHelpers.findAll)('.modal').length);\n    });\n  });\n});","define(\"screwdriver-ui/tests/acceptance/metrics-test\", [\"@ember/test-helpers\", \"qunit\", \"ember-qunit\", \"ember-simple-auth/test-support\", \"pretender\", \"screwdriver-ui/tests/mock/pipeline\", \"screwdriver-ui/tests/mock/metrics\", \"screwdriver-ui/tests/mock/jobs\", \"screwdriver-ui/tests/mock/workflow-graph\"], function (_testHelpers, _qunit, _emberQunit, _testSupport, _pretender, _pipeline, _metrics, _jobs, _workflowGraph) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Acceptance | metrics', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    hooks.beforeEach(function () {\n      const graph = (0, _workflowGraph.default)();\n      const metrics = (0, _metrics.default)();\n      const jobs = (0, _jobs.default)();\n      const pipeline = (0, _pipeline.default)(graph);\n      server = new _pretender.default();\n      server.get('http://localhost:8080/v4/pipelines/4', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify(pipeline)]);\n      server.get('http://localhost:8080/v4/pipelines/4/jobs', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify(jobs)]);\n      server.get('http://localhost:8080/v4/pipelines/4/metrics', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify(metrics)]);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('visiting /pipelines/4/metrics', async function (assert) {\n      await (0, _testSupport.authenticateSession)({\n        token: 'fakeToken'\n      });\n      await (0, _testHelpers.visit)('/pipelines/4/metrics');\n      assert.dom('.chart-c3').exists({\n        count: 2\n      });\n      assert.dom('.range-selection button').exists({\n        count: 7\n      });\n      assert.dom('.custom-date-selection input').exists({\n        count: 1\n      });\n      assert.dom('.filters-selection input').exists({\n        count: 1\n      });\n      assert.dom('.chart-pipeline-info .measure').exists({\n        count: 5\n      });\n      assert.dom('.chart-c3 svg').exists({\n        count: 2\n      });\n      assert.dom('.chart-c3 .c3-event-rects').exists({\n        count: 2\n      });\n      assert.dom('.chart-cta').exists({\n        count: 1\n      });\n      assert.dom('.chart-cta select').exists({\n        count: 1\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/acceptance/pipeline-builds-test\", [\"@ember/test-helpers\", \"qunit\", \"ember-qunit\", \"ember-simple-auth/test-support\", \"pretender\", \"screwdriver-ui/tests/mock/pipeline\", \"screwdriver-ui/tests/mock/events\", \"screwdriver-ui/tests/mock/builds\", \"screwdriver-ui/tests/mock/workflow-graph\", \"screwdriver-ui/tests/mock/jobs\"], function (_testHelpers, _qunit, _emberQunit, _testSupport, _pretender, _pipeline, _events, _builds, _workflowGraph, _jobs) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Acceptance | pipeline build', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    hooks.beforeEach(function () {\n      const graph = (0, _workflowGraph.default)();\n      const jobs = (0, _jobs.default)();\n      const pipeline = (0, _pipeline.default)(graph);\n      const events = (0, _events.default)(graph);\n      server = new _pretender.default();\n      server.get('http://localhost:8080/v4/pipelines/4', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify(pipeline)]);\n      server.get('http://localhost:8080/v4/pipelines/4/jobs', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify(jobs)]);\n      server.get('http://localhost:8080/v4/pipelines/4/events', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify(events)]);\n      server.get('http://localhost:8080/v4/pipelines/4/triggers', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([])]);\n      server.get('http://localhost:8080/v4/events/:eventId/builds', request => {\n        const eventId = parseInt(request.params.eventId, 10);\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify((0, _builds.default)(eventId))];\n      });\n      server.get('http://localhost:8080/v4/jobs/:jobId/builds', request => {\n        const jobId = parseInt(request.params.jobId, 10);\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify((0, _builds.default)(jobId))];\n      });\n      server.get('http://localhost:8080/v4/collections', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([])]);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('visiting /pipelines/4 when not logged in', async function (assert) {\n      await (0, _testHelpers.visit)('/pipelines/4');\n      assert.equal((0, _testHelpers.currentURL)(), '/login');\n    });\n    (0, _qunit.test)('visiting /pipelines/4 when logged in', async function (assert) {\n      await (0, _testSupport.authenticateSession)({\n        token: 'fakeToken'\n      });\n      await (0, _testHelpers.visit)('/pipelines/4');\n      assert.equal((0, _testHelpers.currentURL)(), '/pipelines/4/events');\n      assert.dom('a h1').hasText('foo/bar', 'incorrect pipeline name');\n      assert.dom('.pipelineWorkflow svg').exists({\n        count: 1\n      }, 'not enough workflow');\n      assert.dom('button.start-button').exists({\n        count: 1\n      }, 'should have a start button');\n      assert.dom('ul.nav-pills').exists({\n        count: 1\n      }, 'should show tabs');\n      assert.dom('.column-tabs-view .nav-link').hasText('Events');\n      assert.dom('.column-tabs-view .nav-link.active').hasText('Events');\n      assert.dom('.column-tabs-view .nav-link:not(.active)').hasText('Pull Requests');\n      assert.dom('.separator').exists({\n        count: 1\n      });\n      assert.dom('.partial-view').exists({\n        count: 2\n      });\n      await (0, _testHelpers.visit)('/pipelines/4/pulls');\n      assert.equal((0, _testHelpers.currentURL)(), '/pipelines/4/pulls');\n      assert.dom('.column-tabs-view .nav-link.active').hasText('Pull Requests');\n    });\n  });\n});","define(\"screwdriver-ui/tests/acceptance/pipeline-childPipelines-test\", [\"@ember/test-helpers\", \"qunit\", \"ember-qunit\", \"ember-simple-auth/test-support\", \"pretender\"], function (_testHelpers, _qunit, _emberQunit, _testSupport, _pretender) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Acceptance | child pipeline', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n      server.get('http://localhost:8080/v4/pipelines/1', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        id: '1',\n        scmUrl: 'git@github.com:foo/bar.git#master',\n        createTime: '2016-09-15T23:12:23.760Z',\n        admins: {\n          batman: true\n        },\n        workflow: ['main', 'publish'],\n        childPipelines: {\n          scmUrls: ['git@github.com:child/one.git#master', 'git@github.com:child/two.git#master']\n        }\n      })]);\n      server.get('http://localhost:8080/v4/pipelines', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([{\n        id: '2',\n        scmUrl: 'git@github.com:child/one.git#master',\n        scmRepo: {\n          name: 'child/one',\n          branch: 'master',\n          url: 'https://github.com/child/one'\n        }\n      }, {\n        id: '3',\n        scmUrl: 'git@github.com:child/two.git#master',\n        scmRepo: {\n          name: 'child/two',\n          branch: 'master',\n          url: 'https://github.com/child/two'\n        }\n      }])]);\n      server.get('http://localhost:8080/v4/collections', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([])]);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('visiting /pipelines/:id/child-pipelines', async function (assert) {\n      await (0, _testSupport.authenticateSession)({\n        token: 'faketoken'\n      });\n      await (0, _testHelpers.visit)('/pipelines/1/child-pipelines');\n      assert.equal((0, _testHelpers.currentURL)(), '/pipelines/1/child-pipelines');\n      assert.dom('.appId:nth-child(1)').hasText('child/one');\n      assert.dom('.appId:nth-child(2)').hasText('child/two');\n    });\n  });\n});","define(\"screwdriver-ui/tests/acceptance/pipeline-options-test\", [\"@ember/test-helpers\", \"qunit\", \"ember-qunit\", \"ember-simple-auth/test-support\", \"pretender\"], function (_testHelpers, _qunit, _emberQunit, _testSupport, _pretender) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Acceptance | pipeline/options', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n      server.get('http://localhost:8080/v4/pipelines/1', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        id: '1',\n        scmUrl: 'git@github.com:foo/bar.git#master',\n        scmUri: 'github.com:84604643:master',\n        scmRepo: {\n          branch: 'master',\n          name: 'foo/bar',\n          url: 'https://github.com/foo/bar/tree/master'\n        },\n        createTime: '2016-09-15T23:12:23.760Z',\n        admins: {\n          batman: true\n        },\n        workflow: ['main', 'publish']\n      })]);\n      server.get('http://localhost:8080/v4/pipelines/1/jobs', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([{\n        id: 1234,\n        name: 'main',\n        state: 'ENABLED'\n      }, {\n        id: 1235,\n        name: 'publish',\n        state: 'ENABLED'\n      }])]);\n      server.get('http://localhost:8080/v4/collections', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([])]);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('visiting /pipelines/:id/options', async function (assert) {\n      await (0, _testSupport.authenticateSession)({\n        token: 'faketoken'\n      });\n      await (0, _testHelpers.visit)('/pipelines/1/options');\n      assert.equal((0, _testHelpers.currentURL)(), '/pipelines/1/options');\n      assert.dom('section.pipeline li').exists({\n        count: 1\n      });\n      assert.dom('section.jobs li').exists({\n        count: 3\n      });\n      assert.dom('section.danger li').exists({\n        count: 1\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/acceptance/pipeline-pr-chain-test\", [\"@ember/test-helpers\", \"qunit\", \"ember-qunit\", \"ember-simple-auth/test-support\", \"pretender\", \"screwdriver-ui/tests/mock/pipeline\", \"screwdriver-ui/tests/mock/events\", \"screwdriver-ui/tests/mock/builds\", \"screwdriver-ui/tests/mock/workflow-graph\", \"screwdriver-ui/tests/mock/jobs\"], function (_testHelpers, _qunit, _emberQunit, _testSupport, _pretender, _pipeline, _events, _builds, _workflowGraph, _jobs) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Acceptance | pipeline pr-chain', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    hooks.beforeEach(function () {\n      const graph = (0, _workflowGraph.default)();\n      const jobs = (0, _jobs.default)();\n      const pipeline = (0, _pipeline.default)(graph);\n      const events = (0, _events.default)(graph);\n      pipeline.prChain = true;\n      server = new _pretender.default();\n      server.get('http://localhost:8080/v4/pipelines/4', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify(pipeline)]);\n      server.get('http://localhost:8080/v4/pipelines/4/jobs', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify(jobs)]);\n      server.get('http://localhost:8080/v4/pipelines/4/events', request => {\n        const prNum = parseInt(request.queryParams.prNum, 10);\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify([].concat(events.find(e => e.prNum === prNum)))];\n      });\n      server.get('http://localhost:8080/v4/events/:eventId/builds', request => {\n        const eventId = parseInt(request.params.eventId, 10);\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify((0, _builds.default)(eventId))];\n      });\n      server.get('http://localhost:8080/v4/jobs/:jobId/builds', request => {\n        const jobId = parseInt(request.params.jobId, 10);\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify((0, _builds.default)(jobId))];\n      });\n      server.get('http://localhost:8080/v4/collections', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([])]);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('visiting /pipelines/4/pulls when the pipeline is enabled for prChain', async function (assert) {\n      await (0, _testSupport.authenticateSession)({\n        token: 'fakeToken'\n      });\n      await (0, _testHelpers.visit)('/pipelines/4/pulls');\n      assert.dom('a h1').hasText('foo/bar', 'incorrect pipeline name');\n      assert.dom('.pipelineWorkflow svg').exists({\n        count: 1\n      }, 'not enough workflow');\n      assert.dom('ul.nav-pills').exists({\n        count: 1\n      }, 'should show tabs');\n      assert.dom('.column-tabs-view .nav-link').hasText('Events');\n      assert.dom('.column-tabs-view .nav-link.active').hasText('Pull Requests');\n      assert.dom('.column-tabs-view .view .detail .commit').hasText('PR-42');\n      assert.dom('.separator').exists({\n        count: 1\n      });\n      assert.dom('.partial-view').exists({\n        count: 2\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/acceptance/search-test\", [\"@ember/test-helpers\", \"qunit\", \"ember-qunit\", \"ember-simple-auth/test-support\", \"pretender\"], function (_testHelpers, _qunit, _emberQunit, _testSupport, _pretender) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Acceptance | search', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n      server.get('http://localhost:8080/v4/pipelines', request => {\n        if (!request.queryParams.search) {\n          return [200, {\n            'Content-Type': 'application/json'\n          }, JSON.stringify([{\n            id: '1',\n            scmUrl: 'git@github.com:foo/bar.git#master',\n            scmRepo: {\n              name: 'foo/bar',\n              url: 'git@github.com:foo/bar.git#master',\n              branch: 'master'\n            },\n            scmContext: 'github:github.com',\n            createTime: '2016-09-15T23:12:23.760Z',\n            admins: {\n              batman: true\n            },\n            workflow: ['main', 'publish']\n          }, {\n            id: '2',\n            scmUrl: 'git@github.com:foo/bar2.git#banana',\n            scmRepo: {\n              name: 'foo/bar2',\n              url: 'git@github.com:foo/bar2.git#master',\n              branch: 'master'\n            },\n            scmContext: 'github:github.com',\n            createTime: '2016-09-15T23:12:23.760Z',\n            admins: {\n              batman: true\n            },\n            workflow: ['main', 'publish']\n          }, {\n            id: '3',\n            scmUrl: 'git@github.com:foo/bar3.git#cucumber',\n            scmRepo: {\n              name: 'foo/bar3',\n              url: 'git@github.com:foo/bar3.git#master',\n              branch: 'master'\n            },\n            scmContext: 'github:github.com',\n            createTime: '2016-09-15T23:12:23.760Z',\n            admins: {\n              batman: true\n            },\n            workflow: ['main', 'publish']\n          }])];\n        }\n\n        if (request.queryParams.search === 'banana') {\n          return [200, {\n            'Content-Type': 'application/json'\n          }, JSON.stringify([{\n            id: '1',\n            scmUrl: 'git@github.com:banana/bar.git#master',\n            scmRepo: {\n              name: 'foo/bar',\n              url: 'git@github.com:foo/bar.git#master',\n              branch: 'master'\n            },\n            scmContext: 'github:github.com',\n            createTime: '2016-09-15T23:12:23.760Z',\n            admins: {\n              batman: true\n            },\n            workflow: ['main', 'publish']\n          }, {\n            id: '2',\n            scmUrl: 'git@github.com:banana/bar2.git#banana',\n            scmRepo: {\n              name: 'foo/bar2',\n              url: 'git@github.com:foo/bar2.git#master',\n              branch: 'master'\n            },\n            scmContext: 'github:github.com',\n            createTime: '2016-09-15T23:12:23.760Z',\n            admins: {\n              batman: true\n            },\n            workflow: ['main', 'publish']\n          }])];\n        }\n\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify([])];\n      });\n      server.get('http://localhost:8080/v4/collections', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([{\n        id: '1',\n        name: 'collection1',\n        description: 'description1',\n        pipelineIds: [1, 2, 3]\n      }])]);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('visiting /search when not logged in', async function (assert) {\n      await (0, _testHelpers.visit)('/search');\n      assert.equal((0, _testHelpers.currentURL)(), '/login');\n    });\n    (0, _qunit.test)('visiting /search when logged in', async function (assert) {\n      await (0, _testSupport.authenticateSession)({\n        token: 'fakeToken'\n      });\n      await (0, _testHelpers.visit)('/search');\n      assert.equal((0, _testHelpers.currentURL)(), '/search');\n      assert.dom('tr').exists({\n        count: 4\n      });\n      assert.dom('.showMore').hasText('Show more results...');\n      assert.dom('.num-results').hasText('Showing 3 result(s)');\n      await (0, _testHelpers.click)('.showMore');\n      assert.dom('tr').exists({\n        count: 7\n      });\n      assert.dom('.showMore').hasText('Show more results...');\n      assert.dom('.num-results').hasText('Showing 6 result(s)');\n    });\n    (0, _qunit.test)('visiting /search?query=banana when logged in', async function (assert) {\n      await (0, _testSupport.authenticateSession)({\n        token: 'fakeToken'\n      });\n      await (0, _testHelpers.visit)('/search?query=banana');\n      assert.equal((0, _testHelpers.currentURL)(), '/search?query=banana');\n      assert.dom('tr').exists({\n        count: 3\n      });\n      assert.dom('.showMore').doesNotExist();\n      assert.dom('.num-results').hasText('Showing 2 result(s)');\n    });\n    (0, _qunit.test)('visiting /search?query=doesnotexist when logged in', async function (assert) {\n      await (0, _testSupport.authenticateSession)({\n        token: 'fakeToken'\n      });\n      await (0, _testHelpers.visit)('/search?query=doesnotexist');\n      assert.equal((0, _testHelpers.currentURL)(), '/search?query=doesnotexist');\n      assert.dom('tr').exists({\n        count: 1\n      });\n      assert.dom('.showMore').doesNotExist();\n      assert.dom('.num-results').hasText('No results');\n    });\n  });\n});","define(\"screwdriver-ui/tests/acceptance/secrets-test\", [\"@ember/test-helpers\", \"qunit\", \"ember-qunit\", \"ember-simple-auth/test-support\", \"pretender\"], function (_testHelpers, _qunit, _emberQunit, _testSupport, _pretender) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Acceptance | secrets', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n      server.get('http://localhost:8080/v4/pipelines/1', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        id: '1',\n        scmUrl: 'git@github.com:foo/bar.git#master',\n        createTime: '2016-09-15T23:12:23.760Z',\n        admins: {\n          batman: true\n        },\n        workflow: ['main', 'publish']\n      })]);\n      server.get('http://localhost:8080/v4/pipelines/1/secrets', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([{\n        id: 1234,\n        name: 'BATMAN',\n        value: null,\n        allowInPR: false\n      }, {\n        id: 1235,\n        name: 'ROBIN',\n        value: null,\n        allowInPR: false\n      }])]);\n      server.get('http://localhost:8080/v4/pipelines/1/tokens', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([{\n        id: 2345,\n        name: 'foo',\n        description: 'foofoo'\n      }, {\n        id: 2346,\n        name: 'bar',\n        description: 'barbar'\n      }])]);\n      server.get('http://localhost:8080/v4/collections', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([])]);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('visiting /pipelines/:id/secrets', async function (assert) {\n      await (0, _testSupport.authenticateSession)({\n        token: 'faketoken'\n      });\n      await (0, _testHelpers.visit)('/pipelines/1/secrets');\n      assert.equal((0, _testHelpers.currentURL)(), '/pipelines/1/secrets');\n      assert.dom('.secrets tbody tr').exists({\n        count: 2\n      });\n      assert.dom('.token-list tbody tr').exists({\n        count: 2\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/acceptance/tokens-test\", [\"@ember/test-helpers\", \"qunit\", \"ember-qunit\", \"ember-simple-auth/test-support\", \"pretender\"], function (_testHelpers, _qunit, _emberQunit, _testSupport, _pretender) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Acceptance | tokens', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n      server.get('http://localhost:8080/v4/tokens', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([{\n        id: '1',\n        name: 'foo',\n        description: 'bar',\n        lastUsed: '2016-09-15T23:12:23.760Z'\n      }, {\n        id: '2',\n        name: 'baz',\n        lastUsed: ''\n      }])]);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('visiting /user-settings', async function (assert) {\n      await (0, _testSupport.authenticateSession)({\n        token: 'faketoken'\n      });\n      await (0, _testHelpers.visit)('/user-settings');\n      assert.dom('.token-list tbody tr').exists({\n        count: 2\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/components/ember-ace\", [\"exports\", \"ember-ace/test-support/components/ember-ace\"], function (_exports, _emberAce) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _emberAce.default;\n    }\n  });\n});","define(\"screwdriver-ui/tests/helpers/ember-simple-auth\", [\"exports\", \"ember-simple-auth/authenticators/test\"], function (_exports, _test) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.authenticateSession = authenticateSession;\n  _exports.currentSession = currentSession;\n  _exports.invalidateSession = invalidateSession;\n  const TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    const authenticator = container.lookup(TEST_CONTAINER_KEY);\n\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    const {\n      __container__: container\n    } = app;\n    const session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return app.testHelpers.wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    const session = app.__container__.lookup('service:session');\n\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n\n    return app.testHelpers.wait();\n  }\n});","define(\"screwdriver-ui/tests/helpers/inject-scm\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = injectScmServiceStub;\n  const scms = [{\n    context: 'github:github.com',\n    displayName: 'github.com',\n    iconType: 'github',\n    isSignedIn: true\n  }, {\n    context: 'bitbucket:bitbucket.org',\n    displayName: 'bitbucket.org',\n    iconType: 'bitbucket',\n    isSignedIn: false\n  }];\n  /**\n   * Inject scm service to an Ember Object\n   * @param {Object}    self      - Ember object generated by ember-qunit moduleFor()\n   */\n\n  function injectScmServiceStub(self) {\n    const scmServiceStub = Ember.Service.extend({\n      createScms() {\n        return Ember.RSVP.resolve(scms);\n      },\n\n      getScms() {\n        return scms;\n      },\n\n      getScm(scmContext) {\n        return this.getScms().find(scm => scm.context === scmContext);\n      }\n\n    });\n    self.owner.register('service:scm', scmServiceStub);\n  }\n});","define(\"screwdriver-ui/tests/helpers/inject-session\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = injectSessionStub;\n\n  /**\n   * Inject session service to an Ember Object\n   * @param {Object} self - Ember object generated by ember-qunit moduleFor()\n   */\n  function injectSessionStub(self) {\n    const sessionStub = Ember.Service.extend({\n      isAuthenticated() {\n        return true;\n      }\n\n    });\n    self.owner.register('service:session', sessionStub);\n  }\n});","define(\"screwdriver-ui/tests/helpers/responsive\", [\"exports\", \"ember-responsive/media\"], function (_exports, _media) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.setBreakpointForIntegrationTest = setBreakpointForIntegrationTest;\n  _exports.default = void 0;\n\n  _media.default.reopen({\n    // Change this if you want a different default breakpoint in tests.\n    _defaultBreakpoint: 'desktop',\n    _breakpointArr: Ember.computed('breakpoints', function () {\n      return Object.keys(this.get('breakpoints')) || Ember.A([]);\n    }),\n\n    _forceSetBreakpoint(breakpoint) {\n      let found = false;\n      const props = {};\n      this.get('_breakpointArr').forEach(function (bp) {\n        const val = bp === breakpoint;\n\n        if (val) {\n          found = true;\n        }\n\n        props[\"is\".concat(Ember.String.classify(bp))] = val;\n      });\n\n      if (found) {\n        this.setProperties(props);\n      } else {\n        throw new Error(\"You tried to set the breakpoint to \".concat(breakpoint, \", which is not in your app/breakpoint.js file.\"));\n      }\n    },\n\n    match() {},\n\n    // do not set up listeners in test\n    init() {\n      this._super(...arguments);\n\n      this._forceSetBreakpoint(this.get('_defaultBreakpoint'));\n    }\n\n  });\n\n  var _default = Ember.Test.registerAsyncHelper('setBreakpoint', function (app, breakpoint) {\n    // this should use getOwner once that's supported\n    const mediaService = app.__deprecatedInstance__.lookup('service:media');\n\n    mediaService._forceSetBreakpoint(breakpoint);\n  });\n\n  _exports.default = _default;\n\n  function setBreakpointForIntegrationTest(container, breakpoint) {\n    const mediaService = Ember.getOwner(container).lookup('service:media');\n\n    mediaService._forceSetBreakpoint(breakpoint);\n\n    container.set('media', mediaService);\n    return mediaService;\n  }\n  /* eslint-enable */\n\n});","define(\"screwdriver-ui/tests/integration/components/app-header/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"screwdriver-ui/tests/helpers/inject-scm\"], function (_qunit, _emberQunit, _testHelpers, _injectScm) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | app header', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks); // this test should pass when search bar feature flag is turned off\n\n    (0, _qunit.test)('it renders when search flag is off', async function (assert) {\n      this.set('sessionMock', {\n        isAuthenticated: false\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"w3ZrbcpJ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"app-header\\\",null,[[\\\"session\\\"],[[25,[\\\"sessionMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.logo').hasAttribute('title', 'Screwdriver Home');\n      assert.dom('.icon.create').exists({\n        count: 1\n      });\n      await (0, _testHelpers.click)('.icon.docs-outline');\n      assert.dom('.icon.docs').exists({\n        count: 1\n      });\n      assert.dom('.icon.validator').exists({\n        count: 1\n      });\n      assert.dom('.icon.templates').exists({\n        count: 1\n      });\n      assert.dom('.icon.commands').exists({\n        count: 1\n      });\n      await (0, _testHelpers.click)('.icon.comm-outline');\n      assert.dom('.icon.blog').exists({\n        count: 1\n      });\n      assert.dom('.icon.community').exists({\n        count: 1\n      });\n      assert.dom('.icon.github').exists({\n        count: 1\n      });\n      assert.dom('.icon.profile-outline').exists({\n        count: 1\n      });\n      assert.dom('.icon.profile-outline').hasAttribute('title', 'Sign in to Screwdriver');\n      assert.dom('.search-input').doesNotExist();\n    });\n    (0, _qunit.test)('it shows user github username', async function (assert) {\n      assert.expect(2);\n      this.set('sessionMock', {\n        isAuthenticated: true,\n        data: {\n          authenticated: {\n            username: 'foofoo'\n          }\n        }\n      });\n      this.set('invalidateSession', () => {\n        assert.ok(true);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"LUWvJPAu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"app-header\\\",null,[[\\\"session\\\",\\\"onInvalidate\\\"],[[25,[\\\"sessionMock\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"invalidateSession\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.profile-outline > .icontitle').hasText('foofoo');\n      await (0, _testHelpers.click)('.icon.profile-outline');\n      await (0, _testHelpers.click)('.logout');\n    });\n    (0, _qunit.test)('it calls the logout method on logout', async function (assert) {\n      assert.expect(2);\n      this.set('sessionMock', {\n        isAuthenticated: true\n      });\n      this.set('invalidateSession', () => {\n        assert.ok(true);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"LUWvJPAu\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"app-header\\\",null,[[\\\"session\\\",\\\"onInvalidate\\\"],[[25,[\\\"sessionMock\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"invalidateSession\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('.icon.profile-outline');\n      assert.dom('.logout').hasAttribute('title', 'Sign out of Screwdriver');\n      await (0, _testHelpers.click)('.logout');\n    });\n    (0, _qunit.test)('it shows scm list and which scm is signed in', async function (assert) {\n      assert.expect(3);\n      (0, _injectScm.default)(this);\n      this.set('sessionMock', {\n        isAuthenticated: true\n      });\n      this.set('scmMock', this.owner.lookup('service:scm').getScms());\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"TJinrgDH\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"app-header\\\",null,[[\\\"session\\\",\\\"scmContexts\\\"],[[25,[\\\"sessionMock\\\"]],[25,[\\\"scmMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('.icon.profile-outline');\n      assert.dom('span.title').hasText('ACCOUNTS');\n      assert.dom('a.active').hasText('github.com active');\n      assert.dom('a.active > .fa-github').exists({\n        count: 1\n      });\n    });\n    (0, _qunit.test)('it shows the search bar', async function (assert) {\n      this.set('sessionMock', {\n        isAuthenticated: false\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"kcKr5oAK\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"app-header\\\",null,[[\\\"session\\\",\\\"showSearch\\\"],[[25,[\\\"sessionMock\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.search-input').exists({\n        count: 1\n      });\n    });\n    (0, _qunit.test)('it navigates to search page upon clicking the search button', async function (assert) {\n      this.set('search', () => {\n        assert.ok(true);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"3TJoiSwG\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"app-header\\\",null,[[\\\"showSearch\\\",\\\"searchPipelines\\\"],[true,[29,\\\"action\\\",[[24,0,[]],[25,[\\\"search\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.search-input').hasNoValue();\n      await (0, _testHelpers.click)('.search-button');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/artifact-tree/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  const parsedManifest = [{\n    text: 'coverage',\n    type: 'directory',\n    children: [{\n      text: 'coverage.json',\n      type: 'file',\n      a_attr: {\n        href: 'http://foo.com/coverage.json'\n      }\n    }]\n  }, {\n    text: 'test.txt',\n    type: 'file',\n    a_attr: {\n      href: 'http://foo.com/test.txt'\n    }\n  }];\n  const artifactService = Ember.Service.extend({\n    fetchManifest() {\n      return Ember.RSVP.resolve(parsedManifest);\n    }\n\n  });\n  (0, _qunit.module)('Integration | Component | artifact tree', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.owner.register('service:build-artifact', artifactService);\n    });\n    (0, _qunit.test)('it renders only title when build is running', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Vhng4u/a\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[1,[29,\\\"artifact-tree\\\",null,[[\\\"buildStatus\\\"],[\\\"RUNNING\\\"]]],false],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.artifact-tree h4').hasText('Artifacts');\n      assert.dom('.jstree-node').doesNotExist();\n    });\n    (0, _qunit.test)('it renders with artifacts if build finished', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"JxjxfyJF\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[1,[29,\\\"artifact-tree\\\",null,[[\\\"buildStatus\\\"],[\\\"SUCCESS\\\"]]],false],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      return (0, _testHelpers.settled)().then(async () => {\n        // Check if it has two nodes and one of them is a leaf/file\n        assert.dom('.jstree-leaf').exists({\n          count: 1\n        });\n        assert.dom('.jstree-node').exists({\n          count: 2\n        }); // Check if the href is correctly set and then click the link\n\n        assert.equal((0, _testHelpers.find)('.jstree-leaf a').href, parsedManifest[1].a_attr.href);\n        await (0, _testHelpers.click)('.jstree-leaf a');\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/bread-crumbs/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  const TEST_TEMPLATES = [{\n    name: 'Templates',\n    params: ['templates']\n  }, {\n    name: 'Test-Namespace',\n    params: ['templates.namespace', 'Test-Namespace']\n  }, {\n    name: 'Test-Name',\n    params: ['templates.detail', 'Test-Namespace', 'Test-Name']\n  }];\n  (0, _qunit.module)('Integration | Component | bread crumbs', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('mocks', TEST_TEMPLATES);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"B39Fpgzj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"bread-crumbs\\\",null,[[\\\"crumbs\\\"],[[25,[\\\"mocks\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('div a').exists({\n        count: 2\n      });\n      assert.dom('div a:first-of-type').hasText('Templates');\n      assert.dom('div a:last-of-type').hasText('Test-Namespace');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/build-banner/component-test\", [\"moment\", \"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-sinon-qunit/test-support/test\"], function (_moment, _qunit, _emberQunit, _testHelpers, _test) {\n  \"use strict\";\n\n  const coverageService = Ember.Service.extend({\n    getCoverageInfo() {\n      return Ember.RSVP.resolve({\n        coverage: '98%',\n        coverageUrl: 'http://example.com/coverage/123',\n        tests: '7/10',\n        testsUrl: 'http://example.com/coverage/123'\n      });\n    }\n\n  });\n  const buildStepsMock = [{\n    name: 'sd-setup-screwdriver-scm-bookend'\n  }];\n  const eventMock = Ember.Object.create({\n    id: 'abcd',\n    causeMessage: 'Merged by batman',\n    commit: {\n      message: 'Merge pull request #2 from batcave/batmobile',\n      author: {\n        username: 'batman',\n        name: 'Bruce W',\n        avatar: 'http://example.com/u/batman/avatar',\n        url: 'http://example.com/u/batman'\n      },\n      url: 'http://example.com/batcave/batmobile/commit/abcdef1029384'\n    },\n    truncatedMessage: 'Merge it',\n    createTime: '2016-11-04T20:09:41.238Z',\n    creator: {\n      username: 'batman',\n      name: 'Bruce W',\n      avatar: 'http://example.com/u/batman/avatar',\n      url: 'http://example.com/u/batman'\n    },\n    pr: {\n      url: 'https://github.com/screwdriver-cd/ui/pull/292'\n    },\n    pipelineId: '12345',\n    sha: 'abcdef1029384',\n    truncatedSha: 'abcdef1',\n    type: 'pipelineId',\n    workflow: ['main', 'publish'],\n    builds: ['build1', 'build2']\n  });\n  const buildMock = Ember.Object.create({\n    eventId: 'abcd',\n    id: '2'\n  });\n  const buildMetaMock = {\n    tests: {\n      coverage: '100',\n      results: '10/10'\n    }\n  };\n  (0, _qunit.module)('Integration | Component | build banner', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.owner.register('service:coverage', coverageService);\n    });\n    (0, _test.default)('it renders', async function (assert) {\n      assert.expect(11);\n      this.set('reloadCb', () => {\n        assert.ok(true);\n      });\n      this.set('changeB', () => {\n        assert.ok(true);\n      });\n      this.set('prEvents', new Ember.RSVP.Promise(resolves => resolves([])));\n      this.set('buildStepsMock', buildStepsMock);\n      this.set('eventMock', eventMock);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"/ReAL2Ur\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-banner\\\",null,[[\\\"buildContainer\\\",\\\"duration\\\",\\\"blockDuration\\\",\\\"imagePullDuration\\\",\\\"buildDuration\\\",\\\"buildStatus\\\",\\\"buildCreate\\\",\\\"buildStart\\\",\\\"buildSteps\\\",\\\"jobName\\\",\\\"isAuthenticated\\\",\\\"event\\\",\\\"prEvents\\\",\\\"reloadBuild\\\",\\\"changeBuild\\\"],[\\\"node:6\\\",\\\"11 seconds\\\",\\\"4 seconds\\\",\\\"5 seconds\\\",\\\"2 seconds\\\",\\\"RUNNING\\\",\\\"2016-11-04T20:08:41.238Z\\\",\\\"2016-11-04T20:09:41.238Z\\\",[25,[\\\"buildStepsMock\\\"]],\\\"PR-671\\\",false,[25,[\\\"eventMock\\\"]],[25,[\\\"prEvents\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"reloadCb\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"changeB\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      const expectedTime = (0, _moment.default)('2016-11-04T20:08:41.238Z').format('YYYY-MM-DD HH:mm:ss');\n      assert.dom('li.job-name .banner-value').hasText('PR-671');\n      assert.dom('.commit a').hasAttribute('href', 'http://example.com/batcave/batmobile/commit/abcdef1029384');\n      assert.dom('.commit a').hasText('#abcdef1');\n      assert.dom('.duration .banner-value').hasAttribute('title', 'Total duration: 11 seconds, Blocked time: 4 seconds, Image pull time: 5 seconds, Build time: 2 seconds');\n      assert.dom('.duration > a').hasText('See build metrics');\n      assert.dom('.created .banner-value').hasText(expectedTime);\n      assert.dom('.user .banner-value').hasText('Bruce W');\n      assert.dom('.docker-container .banner-value').hasText('node:6');\n      assert.dom('button').doesNotExist();\n    });\n    (0, _test.default)('it renders pr link if pr url info is available', async function (assert) {\n      assert.expect(12);\n      this.set('reloadCb', () => {\n        assert.ok(true);\n      });\n      this.set('buildStepsMock', buildStepsMock);\n      this.set('eventMock', eventMock);\n      this.set('prEvents', new Ember.RSVP.Promise(resolves => resolves([])));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ciJ3amty\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-banner\\\",null,[[\\\"buildContainer\\\",\\\"duration\\\",\\\"blockDuration\\\",\\\"imagePullDuration\\\",\\\"buildDuration\\\",\\\"buildStatus\\\",\\\"buildCreate\\\",\\\"buildStart\\\",\\\"buildSteps\\\",\\\"jobName\\\",\\\"isAuthenticated\\\",\\\"event\\\",\\\"prEvents\\\",\\\"reloadBuild\\\"],[\\\"node:6\\\",\\\"5 seconds\\\",\\\"0 seconds\\\",\\\"0 seconds\\\",\\\"0 seconds\\\",\\\"RUNNING\\\",\\\"2016-11-04T20:08:41.238Z\\\",\\\"2016-11-04T20:09:41.238Z\\\",[25,[\\\"buildStepsMock\\\"]],\\\"PR-671\\\",false,[25,[\\\"eventMock\\\"]],[25,[\\\"prEvents\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"reloadCb\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      const expectedTime = (0, _moment.default)('2016-11-04T20:08:41.238Z').format('YYYY-MM-DD HH:mm:ss');\n      assert.dom('.pr .pr-url-holder a').hasAttribute('href', 'https://github.com/screwdriver-cd/ui/pull/292');\n      assert.dom('.pr .pr-url-holder a').hasText('PR#292');\n      assert.dom('li.job-name .banner-value').hasText('PR-671');\n      assert.dom('.commit a').hasAttribute('href', 'http://example.com/batcave/batmobile/commit/abcdef1029384');\n      assert.dom('.commit a').hasText('#abcdef1');\n      assert.dom('.duration .banner-value').hasAttribute('title', 'Total duration: 5 seconds, Blocked time: 0 seconds, Image pull time: 0 seconds, Build time: 0 seconds');\n      assert.dom('.created .banner-value').hasText(expectedTime);\n      assert.dom('.user .banner-value').hasText('Bruce W');\n      assert.dom('.docker-container .banner-value').hasText('node:6');\n      assert.dom('button').doesNotExist();\n    });\n    (0, _test.default)('it renders prCommit dropdown if event type is pr', async function (assert) {\n      assert.expect(16);\n      this.set('reloadCb', () => {\n        assert.ok(true);\n      });\n      this.set('buildStepsMock', buildStepsMock);\n      this.set('eventMock', eventMock);\n      this.set('prEvents', new Ember.RSVP.Promise(resolves => resolves([{\n        build: buildMock,\n        event: eventMock\n      }])));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ciJ3amty\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-banner\\\",null,[[\\\"buildContainer\\\",\\\"duration\\\",\\\"blockDuration\\\",\\\"imagePullDuration\\\",\\\"buildDuration\\\",\\\"buildStatus\\\",\\\"buildCreate\\\",\\\"buildStart\\\",\\\"buildSteps\\\",\\\"jobName\\\",\\\"isAuthenticated\\\",\\\"event\\\",\\\"prEvents\\\",\\\"reloadBuild\\\"],[\\\"node:6\\\",\\\"5 seconds\\\",\\\"0 seconds\\\",\\\"0 seconds\\\",\\\"0 seconds\\\",\\\"RUNNING\\\",\\\"2016-11-04T20:08:41.238Z\\\",\\\"2016-11-04T20:09:41.238Z\\\",[25,[\\\"buildStepsMock\\\"]],\\\"PR-671\\\",false,[25,[\\\"eventMock\\\"]],[25,[\\\"prEvents\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"reloadCb\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      const expectedTime = (0, _moment.default)('2016-11-04T20:08:41.238Z').format('YYYY-MM-DD HH:mm:ss');\n      assert.dom('.pr .pr-url-holder a').hasAttribute('href', 'https://github.com/screwdriver-cd/ui/pull/292');\n      assert.dom('.pr .pr-url-holder a').hasText('PR#292');\n      assert.dom('li.job-name .banner-value').hasText('PR-671');\n      assert.dom('.commit a').hasAttribute('href', 'http://example.com/batcave/batmobile/commit/abcdef1029384');\n      assert.dom('.commit .commit-sha').hasText('#abcdef1');\n      await (0, _testHelpers.click)('.commit .dropdown-toggle');\n      assert.dom('.commit .pr-item a').hasText('1. abcdef1');\n      assert.dom('.duration .banner-value').hasAttribute('title', 'Total duration: 5 seconds, Blocked time: 0 seconds, Image pull time: 0 seconds, Build time: 0 seconds');\n      assert.dom('.created .banner-value').hasText(expectedTime);\n      assert.dom('.user .banner-value').hasText('Bruce W');\n      assert.dom('.docker-container .banner-value').hasText('node:6');\n      assert.dom('button').doesNotExist();\n    });\n    (0, _test.default)('it renders a restart button for completed jobs when authenticated', async function (assert) {\n      assert.expect(3);\n      const reloadBuildSpy = this.spy();\n      this.set('buildStepsMock', buildStepsMock);\n      this.set('reloadCb', reloadBuildSpy);\n      this.set('externalStart', () => {\n        assert.ok(true);\n      });\n      this.set('eventMock', eventMock);\n      this.set('prEvents', new Ember.RSVP.Promise(resolves => resolves([])));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"yn48yO2W\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-banner\\\",null,[[\\\"buildContainer\\\",\\\"duration\\\",\\\"buildStatus\\\",\\\"buildStart\\\",\\\"buildSteps\\\",\\\"jobName\\\",\\\"isAuthenticated\\\",\\\"event\\\",\\\"prEvents\\\",\\\"onStart\\\",\\\"reloadBuild\\\"],[\\\"node:6\\\",\\\"5 seconds\\\",\\\"ABORTED\\\",\\\"2016-11-04T20:09:41.238Z\\\",[25,[\\\"buildStepsMock\\\"]],\\\"PR-671\\\",true,[25,[\\\"eventMock\\\"]],[25,[\\\"prEvents\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"externalStart\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"reloadCb\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('button').hasText('Restart');\n      assert.notOk(reloadBuildSpy.called);\n      await (0, _testHelpers.click)('button');\n    });\n    (0, _test.default)('it renders a stop button for running job when authenticated', async function (assert) {\n      assert.expect(4);\n      this.set('willRender', () => {\n        assert.ok(true);\n      });\n      this.set('externalStop', () => {\n        assert.ok(true);\n      });\n      this.set('buildStepsMock', buildStepsMock);\n      this.set('eventMock', eventMock);\n      this.set('prEvents', new Ember.RSVP.Promise(resolves => resolves([])));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"2Rfiqr8w\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-banner\\\",null,[[\\\"buildContainer\\\",\\\"duration\\\",\\\"buildStatus\\\",\\\"buildStart\\\",\\\"buildSteps\\\",\\\"jobName\\\",\\\"isAuthenticated\\\",\\\"event\\\",\\\"prEvents\\\",\\\"onStop\\\",\\\"reloadBuild\\\"],[\\\"node:6\\\",\\\"5 seconds\\\",\\\"RUNNING\\\",\\\"2016-11-04T20:09:41.238Z\\\",[25,[\\\"buildStepsMock\\\"]],\\\"main\\\",true,[25,[\\\"eventMock\\\"]],[25,[\\\"prEvents\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"externalStop\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"willRender\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('button').hasText('Stop');\n      await (0, _testHelpers.click)('button');\n    });\n    (0, _test.default)('it renders a stop button for blocked job when authenticated', async function (assert) {\n      assert.expect(4);\n      this.set('willRender', () => {\n        assert.ok(true);\n      });\n      this.set('externalStop', () => {\n        assert.ok(true);\n      });\n      this.set('buildStepsMock', buildStepsMock);\n      this.set('eventMock', eventMock);\n      this.set('prEvents', new Ember.RSVP.Promise(resolves => resolves([])));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"zHqmMXwm\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-banner\\\",null,[[\\\"buildContainer\\\",\\\"duration\\\",\\\"buildStatus\\\",\\\"buildStart\\\",\\\"buildSteps\\\",\\\"jobName\\\",\\\"isAuthenticated\\\",\\\"event\\\",\\\"prEvents\\\",\\\"onStop\\\",\\\"reloadBuild\\\"],[\\\"node:6\\\",\\\"5 seconds\\\",\\\"BLOCKED\\\",\\\"2016-11-04T20:09:41.238Z\\\",[25,[\\\"buildStepsMock\\\"]],\\\"main\\\",true,[25,[\\\"eventMock\\\"]],[25,[\\\"prEvents\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"externalStop\\\"]]],null],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"willRender\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('button').hasText('Stop');\n      await (0, _testHelpers.click)('button');\n    });\n    (0, _test.default)('it renders coverage info if coverage step finished', async function (assert) {\n      const coverageStepsMock = [{\n        name: 'sd-setup-screwdriver-scm-bookend',\n        startTime: '2016-11-04T20:09:41.238Z'\n      }, {\n        name: 'sd-teardown-screwdriver-coverage-bookend',\n        endTime: '2016-11-04T21:09:41.238Z'\n      }];\n      assert.expect(4);\n      this.set('eventMock', eventMock);\n      this.set('buildStepsMock', coverageStepsMock);\n      this.set('prEvents', new Ember.RSVP.Promise(resolves => resolves([])));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"xuCcYy0z\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-banner\\\",null,[[\\\"buildContainer\\\",\\\"duration\\\",\\\"buildId\\\",\\\"buildStatus\\\",\\\"buildStart\\\",\\\"buildSteps\\\",\\\"jobId\\\",\\\"jobName\\\",\\\"isAuthenticated\\\",\\\"event\\\",\\\"prEvents\\\"],[\\\"node:6\\\",\\\"5 seconds\\\",123,\\\"SUCCESS\\\",\\\"2016-11-04T20:09:41.238Z\\\",[25,[\\\"buildStepsMock\\\"]],1,\\\"main\\\",true,[25,[\\\"eventMock\\\"]],[25,[\\\"prEvents\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      return (0, _testHelpers.settled)().then(() => {\n        assert.dom('.coverage .banner-value').hasText('98%');\n        assert.dom('.tests .banner-value').hasText('7/10');\n        assert.dom('.coverage a').hasAttribute('href', 'http://example.com/coverage/123');\n        assert.dom('.tests a').hasAttribute('href', 'http://example.com/coverage/123');\n      });\n    });\n    (0, _test.default)('it renders default coverage info if coverage step has not finished', async function (assert) {\n      const coverageStepsMock = [{\n        name: 'sd-setup-screwdriver-scm-bookend'\n      }, {\n        name: 'sd-teardown-screwdriver-coverage-bookend'\n      }];\n      assert.expect(7);\n      this.set('reloadCb', () => {\n        assert.ok(true);\n      });\n      this.set('eventMock', eventMock);\n      this.set('buildStepsMock', coverageStepsMock);\n      this.set('prEvents', new Ember.RSVP.Promise(resolves => resolves([])));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"CDg7xESV\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-banner\\\",null,[[\\\"buildContainer\\\",\\\"duration\\\",\\\"buildId\\\",\\\"buildStatus\\\",\\\"buildStart\\\",\\\"buildSteps\\\",\\\"jobId\\\",\\\"jobName\\\",\\\"isAuthenticated\\\",\\\"event\\\",\\\"reloadBuild\\\",\\\"prEvents\\\"],[\\\"node:6\\\",\\\"5 seconds\\\",123,\\\"RUNNING\\\",\\\"2016-11-04T20:09:41.238Z\\\",[25,[\\\"buildStepsMock\\\"]],1,\\\"main\\\",true,[25,[\\\"eventMock\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"reloadCb\\\"]]],null],[25,[\\\"prEvents\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      return (0, _testHelpers.settled)().then(() => {\n        assert.dom('button').hasText('Stop');\n        assert.dom('.coverage .banner-value').hasText('N/A');\n        assert.dom('.tests .banner-value').hasText('N/A');\n        assert.dom('.coverage a').hasAttribute('title', 'Coverage report not generated');\n        assert.dom('.tests a').hasAttribute('title', 'Tests report not generated');\n      });\n    });\n    (0, _test.default)('it overrides coverage info if it is set in build meta', async function (assert) {\n      const coverageStepsMock = [{\n        name: 'sd-setup-screwdriver-scm-bookend',\n        startTime: '2016-11-04T20:09:41.238Z'\n      }, {\n        name: 'sd-teardown-screwdriver-coverage-bookend',\n        endTime: '2016-11-04T21:09:41.238Z'\n      }];\n      assert.expect(2);\n      this.set('eventMock', eventMock);\n      this.set('buildStepsMock', coverageStepsMock);\n      this.set('buildMetaMock', buildMetaMock);\n      this.set('prEvents', new Ember.RSVP.Promise(resolves => resolves([])));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"INRozGKg\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-banner\\\",null,[[\\\"buildContainer\\\",\\\"duration\\\",\\\"buildId\\\",\\\"buildStatus\\\",\\\"buildStart\\\",\\\"buildSteps\\\",\\\"buildMeta\\\",\\\"jobId\\\",\\\"jobName\\\",\\\"isAuthenticated\\\",\\\"event\\\",\\\"prEvents\\\"],[\\\"node:6\\\",\\\"5 seconds\\\",123,\\\"SUCCESS\\\",\\\"2016-11-04T20:09:41.238Z\\\",[25,[\\\"buildStepsMock\\\"]],[25,[\\\"buildMetaMock\\\"]],1,\\\"main\\\",true,[25,[\\\"eventMock\\\"]],[25,[\\\"prEvents\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      return (0, _testHelpers.settled)().then(() => {\n        assert.dom('.coverage .banner-value').hasText('100%');\n        assert.dom('.tests .banner-value').hasText('10/10');\n      });\n    });\n    (0, _test.default)('it does not override coverage info if build meta format is not correct', async function (assert) {\n      const coverageStepsMock = [{\n        name: 'sd-setup-screwdriver-scm-bookend',\n        startTime: '2016-11-04T20:09:41.238Z'\n      }, {\n        name: 'sd-teardown-screwdriver-coverage-bookend',\n        endTime: '2016-11-04T21:09:41.238Z'\n      }];\n      buildMetaMock.tests = {\n        coverage: 'nonsense',\n        resulst: 'nonsense'\n      };\n      assert.expect(2);\n      this.set('eventMock', eventMock);\n      this.set('buildStepsMock', coverageStepsMock);\n      this.set('buildMetaMock', buildMetaMock);\n      this.set('prEvents', new Ember.RSVP.Promise(resolves => resolves([])));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"INRozGKg\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-banner\\\",null,[[\\\"buildContainer\\\",\\\"duration\\\",\\\"buildId\\\",\\\"buildStatus\\\",\\\"buildStart\\\",\\\"buildSteps\\\",\\\"buildMeta\\\",\\\"jobId\\\",\\\"jobName\\\",\\\"isAuthenticated\\\",\\\"event\\\",\\\"prEvents\\\"],[\\\"node:6\\\",\\\"5 seconds\\\",123,\\\"SUCCESS\\\",\\\"2016-11-04T20:09:41.238Z\\\",[25,[\\\"buildStepsMock\\\"]],[25,[\\\"buildMetaMock\\\"]],1,\\\"main\\\",true,[25,[\\\"eventMock\\\"]],[25,[\\\"prEvents\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      return (0, _testHelpers.settled)().then(() => {\n        assert.dom('.coverage .banner-value').hasText('98%');\n        assert.dom('.tests .banner-value').hasText('7/10');\n      });\n    });\n    (0, _test.default)('it does not render coverage info if there is no coverage step', async function (assert) {\n      assert.expect(1);\n      this.set('eventMock', eventMock);\n      this.set('buildStepsMock', buildStepsMock);\n      this.set('prEvents', new Ember.RSVP.Promise(resolves => resolves([])));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"xuCcYy0z\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-banner\\\",null,[[\\\"buildContainer\\\",\\\"duration\\\",\\\"buildId\\\",\\\"buildStatus\\\",\\\"buildStart\\\",\\\"buildSteps\\\",\\\"jobId\\\",\\\"jobName\\\",\\\"isAuthenticated\\\",\\\"event\\\",\\\"prEvents\\\"],[\\\"node:6\\\",\\\"5 seconds\\\",123,\\\"SUCCESS\\\",\\\"2016-11-04T20:09:41.238Z\\\",[25,[\\\"buildStepsMock\\\"]],1,\\\"main\\\",true,[25,[\\\"eventMock\\\"]],[25,[\\\"prEvents\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      return (0, _testHelpers.settled)().then(() => {\n        assert.dom('li').doesNotHaveClass('coverage');\n      });\n    });\n    (0, _test.default)('it should show the stop button for a running UNSTABLE build', async function (assert) {\n      const coverageStepsMock = [{\n        name: 'sd-setup-screwdriver-scm-bookend'\n      }, {\n        name: 'sd-teardown-screwdriver-coverage-bookend'\n      }];\n      assert.expect(3);\n      this.set('reloadCb', () => {\n        assert.ok(true);\n      });\n      this.set('eventMock', eventMock);\n      this.set('buildStepsMock', coverageStepsMock);\n      this.set('prEvents', new Ember.RSVP.Promise(resolves => resolves([])));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"pSV1IVdM\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-banner\\\",null,[[\\\"buildContainer\\\",\\\"duration\\\",\\\"buildId\\\",\\\"buildStatus\\\",\\\"buildStart\\\",\\\"buildSteps\\\",\\\"jobId\\\",\\\"jobName\\\",\\\"isAuthenticated\\\",\\\"event\\\",\\\"reloadBuild\\\",\\\"prEvents\\\"],[\\\"node:6\\\",\\\"5 seconds\\\",123,\\\"UNSTABLE\\\",\\\"2016-11-04T20:09:41.238Z\\\",[25,[\\\"buildStepsMock\\\"]],1,\\\"main\\\",true,[25,[\\\"eventMock\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"reloadCb\\\"]]],null],[25,[\\\"prEvents\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      return (0, _testHelpers.settled)().then(() => {\n        assert.dom('button').hasText('Stop');\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/build-log/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"moment\", \"sinon\"], function (_qunit, _emberQunit, _testHelpers, _moment, _sinon) {\n  \"use strict\";\n\n  const startTime = 1478912844724;\n\n  const doneStub = _sinon.default.stub();\n\n  const logsStub = _sinon.default.stub();\n\n  const blobUrl = 'blob:https://localhost/34dba0dc-2706-4cae-a74f-99349a578e60';\n  const sampleLogs = Array(100).fill().map((_, i) => ({\n    m: \"\".concat(startTime + i),\n    n: i + 1,\n    t: startTime + i\n  }));\n  const logService = Ember.Service.extend({\n    fetchLogs() {\n      return Ember.RSVP.resolve({\n        lines: this.getCache('logs'),\n        done: this.getCache('done')\n      });\n    },\n\n    resetCache() {},\n\n    getCache() {\n      const lastArg = arguments[arguments.length - 1];\n\n      if (lastArg === 'logs') {\n        return logsStub();\n      }\n\n      if (lastArg === 'done') {\n        return doneStub();\n      }\n\n      return 100;\n    },\n\n    buildLogBlobUrl() {\n      return blobUrl;\n    },\n\n    revokeLogBlobUrls() {}\n\n  });\n  (0, _qunit.module)('Integration | Component | build log', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.owner.register('service:build-logs', logService);\n      doneStub.onCall(0).returns(true);\n      doneStub.onCall(1).returns(false);\n      logsStub.onCall(0).returns(sampleLogs);\n      logsStub.onCall(1).returns(sampleLogs);\n      logsStub.returns(sampleLogs.concat(sampleLogs));\n    });\n    hooks.afterEach(function () {\n      doneStub.reset();\n      logsStub.reset();\n    });\n    (0, _qunit.test)('it displays some help when no step is selected', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"iIgU3c5G\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-log\\\",null,[[\\\"stepName\\\",\\\"buildId\\\",\\\"stepStartTime\\\",\\\"buildStartTime\\\"],[null,1,null,\\\"1478912844724\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.logs').includesText('Click a step to see logs'); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"+jiWRG6g\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"build-log\\\",null,[[\\\"stepName\\\",\\\"buildId\\\",\\\"stepStartTime\\\",\\\"buildStartTime\\\"],[null,1,null,\\\"1478912844724\\\"]],{\\\"statements\\\":[[0,\\\"    template block text\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom(this.element).includesText('template block text');\n      assert.dom(this.element).includesText('Click a step to see logs');\n    });\n    (0, _qunit.test)('it starts loading when step chosen', async function (assert) {\n      this.set('step', null);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"9iSQT8z5\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-log\\\",null,[[\\\"stepName\\\",\\\"buildId\\\",\\\"stepStartTime\\\",\\\"buildStartTime\\\"],[[25,[\\\"step\\\"]],1,null,\\\"1478912844724\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.logs').hasText('Click a step to see logs');\n      this.set('step', 'banana');\n      return (0, _testHelpers.settled)().then(() => {\n        assert.dom('.line:first-child').hasText(\"\".concat((0, _moment.default)(startTime).format('HH:mm:ss'), \" \").concat(startTime));\n        assert.dom('.line:last-child').hasText(\"\".concat((0, _moment.default)(startTime + 99).format('HH:mm:ss'), \" \").concat(startTime + 99));\n      });\n    });\n    (0, _qunit.test)('it generate logs for init step', async function (assert) {\n      this.set('stats', {\n        queueEnterTime: '2019-01-14T20:10:41.238Z',\n        imagePullStartTime: '2019-01-14T20:11:41.238Z',\n        hostname: 'node12.foo.bar.com'\n      });\n      this.set('step', 'sd-setup-init');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"GGvYBGZQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-log\\\",null,[[\\\"stepName\\\",\\\"buildId\\\",\\\"buildStartTime\\\",\\\"stepStartTime\\\",\\\"stepEndTime\\\",\\\"buildStats\\\"],[[25,[\\\"step\\\"]],1,\\\"2019-01-14T20:12:41.238Z\\\",\\\"2019-01-14T20:09:41.238Z\\\",\\\"2019-01-14T20:12:41.238Z\\\",[25,[\\\"stats\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      return (0, _testHelpers.settled)().then(() => {\n        assert.dom('.line:first-child').includesText('Build created');\n        assert.dom('.line:nth-child(2)').includesText('Build enqueued');\n        assert.dom('.line:nth-child(3)').includesText('Build scheduled on node12.foo.bar.com');\n        assert.dom('.line:last-child').includesText('Image pull completed');\n      });\n    });\n    (0, _qunit.test)('it generate logs for init step when build is blocked', async function (assert) {\n      this.set('stats', {\n        queueEnterTime: '2019-01-14T20:10:41.238Z',\n        blockedStartTime: '2019-01-14T20:10:42.238Z',\n        imagePullStartTime: '2019-01-14T20:11:41.238Z',\n        hostname: 'node12.foo.bar.com'\n      });\n      this.set('step', 'sd-setup-init');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"GGvYBGZQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-log\\\",null,[[\\\"stepName\\\",\\\"buildId\\\",\\\"buildStartTime\\\",\\\"stepStartTime\\\",\\\"stepEndTime\\\",\\\"buildStats\\\"],[[25,[\\\"step\\\"]],1,\\\"2019-01-14T20:12:41.238Z\\\",\\\"2019-01-14T20:09:41.238Z\\\",\\\"2019-01-14T20:12:41.238Z\\\",[25,[\\\"stats\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      return (0, _testHelpers.settled)().then(() => {\n        assert.dom('.line:first-child').includesText('Build created');\n        assert.dom('.line:nth-child(2)').includesText('Build enqueued');\n        assert.dom('.line:nth-child(3)').includesText('Build blocked, putting back into queue');\n        assert.dom('.line:nth-child(4)').includesText('Build scheduled on node12.foo.bar.com');\n        assert.dom('.line:last-child').includesText('Image pull completed');\n      });\n    });\n    (0, _qunit.test)('it generate logs for COLLAPSED build', async function (assert) {\n      this.set('stats', {\n        queueEnterTime: '2019-01-14T20:10:41.238Z'\n      });\n      this.set('step', 'sd-setup-init');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"0RfCMJT/\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-log\\\",null,[[\\\"stepName\\\",\\\"buildId\\\",\\\"buildStartTime\\\",\\\"stepStartTime\\\",\\\"stepEndTime\\\",\\\"buildStats\\\",\\\"buildStatus\\\"],[[25,[\\\"step\\\"]],1,\\\"2019-01-14T20:12:41.238Z\\\",\\\"2019-01-14T20:09:41.238Z\\\",\\\"2019-01-14T20:12:41.238Z\\\",[25,[\\\"stats\\\"]],\\\"COLLAPSED\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      return (0, _testHelpers.settled)().then(() => {\n        assert.dom('.line:first-child').includesText('Build created');\n        assert.dom('.line:last-child').includesText('Build collapsed and removed from the queue.');\n      });\n    });\n    (0, _qunit.test)('it generate logs for FROZEN build', async function (assert) {\n      this.set('step', 'sd-setup-init');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"B8JqfsCU\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-log\\\",null,[[\\\"stepName\\\",\\\"buildId\\\",\\\"buildStartTime\\\",\\\"stepStartTime\\\",\\\"stepEndTime\\\",\\\"buildStats\\\",\\\"buildStatus\\\"],[[25,[\\\"step\\\"]],1,\\\"2019-01-14T20:12:41.238Z\\\",\\\"2019-01-14T20:09:41.238Z\\\",\\\"2019-01-14T20:12:41.238Z\\\",[25,[\\\"stats\\\"]],\\\"FROZEN\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      return (0, _testHelpers.settled)().then(() => {\n        assert.dom('.line:first-child').includesText('Build created');\n        assert.dom('.line:last-child').includesText('Build frozen and removed from the queue.');\n      });\n    });\n    (0, _qunit.test)('it generate logs for failed init step', async function (assert) {\n      this.set('stats', {\n        queueEnterTime: '2019-01-14T20:10:41.238Z',\n        imagePullStartTime: '2019-01-14T20:11:41.238Z',\n        hostname: 'node12.foo.bar.com'\n      });\n      this.set('step', 'sd-setup-init');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"UTmbK/h+\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-log\\\",null,[[\\\"stepName\\\",\\\"buildId\\\",\\\"stepStartTime\\\",\\\"stepEndTime\\\",\\\"buildStartTime\\\",\\\"buildStats\\\"],[[25,[\\\"step\\\"]],1,\\\"2019-01-14T20:09:41.238Z\\\",\\\"2019-01-14T20:12:41.238Z\\\",\\\"\\\",[25,[\\\"stats\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      return (0, _testHelpers.settled)().then(() => {\n        assert.dom('.line:first-child').includesText('Build created');\n        assert.dom('.line:nth-child(2)').includesText('Build enqueued');\n        assert.dom('.line:nth-child(3)').includesText('Build scheduled on node12.foo.bar.com');\n        assert.dom('.line:last-child').includesText('Build init failed');\n      });\n    });\n    (0, _qunit.test)('it generate logs for init step with empty build stats', async function (assert) {\n      this.set('stats', {});\n      this.set('step', 'sd-setup-init');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"GGvYBGZQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-log\\\",null,[[\\\"stepName\\\",\\\"buildId\\\",\\\"buildStartTime\\\",\\\"stepStartTime\\\",\\\"stepEndTime\\\",\\\"buildStats\\\"],[[25,[\\\"step\\\"]],1,\\\"2019-01-14T20:12:41.238Z\\\",\\\"2019-01-14T20:09:41.238Z\\\",\\\"2019-01-14T20:12:41.238Z\\\",[25,[\\\"stats\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      return (0, _testHelpers.settled)().then(() => {\n        assert.dom('.line:first-child').includesText('Build created');\n        assert.dom('.line:last-child').includesText('Build init done');\n      });\n    });\n    (0, _qunit.test)('it starts fetching more log for a chosen completed step', async function (assert) {\n      doneStub.onCall(0).returns(false);\n      doneStub.onCall(1).returns(false);\n      doneStub.onCall(2).returns(true);\n      doneStub.onCall(3).returns(true);\n      this.set('step', null);\n      this.set('scrollStill', _sinon.default.stub());\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"3gvmp+md\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-log\\\",null,[[\\\"stepName\\\",\\\"totalLine\\\",\\\"buildId\\\",\\\"stepStartTime\\\",\\\"buildStartTime\\\"],[[25,[\\\"step\\\"]],1000,1,null,\\\"1478912844724\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.logs').hasText('Click a step to see logs');\n      this.set('step', 'banana');\n      const container = (0, _testHelpers.find)('.wrap');\n      const lastScrollTop = container.scrollTop;\n      container.scrollTop = 0;\n      return (0, _testHelpers.settled)().then(() => {\n        _sinon.default.assert.called(doneStub);\n\n        _sinon.default.assert.called(logsStub);\n\n        assert.ok(container.scrollTop > lastScrollTop);\n      });\n    });\n    (0, _qunit.test)('it generates object url for the log when clicking download button', async function (assert) {\n      this.set('step', 'banana');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"3gvmp+md\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-log\\\",null,[[\\\"stepName\\\",\\\"totalLine\\\",\\\"buildId\\\",\\\"stepStartTime\\\",\\\"buildStartTime\\\"],[[25,[\\\"step\\\"]],1000,1,null,\\\"1478912844724\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom((0, _testHelpers.find)('#downloadLink').previousElementSibling).hasText('Download');\n      await (0, _testHelpers.click)((0, _testHelpers.find)('#downloadLink').previousElementSibling);\n      assert.dom('#downloadLink').hasAttribute('href', blobUrl);\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/build-step-collection/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  const logService = Ember.Service.extend({\n    fetchLogs() {\n      return Ember.RSVP.resolve({\n        lines: [],\n        done: true\n      });\n    },\n\n    resetCache() {},\n\n    getCache() {\n      return [];\n    }\n\n  });\n  const artifactService = Ember.Service.extend({\n    fetchManifest() {\n      return Ember.RSVP.resolve();\n    }\n\n  });\n  (0, _qunit.module)('Integration | Component | build step collection', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.owner.register('service:build-logs', logService);\n      this.owner.register('service:build-artifact', artifactService);\n    });\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('stepList', []);\n      this.set('buildSteps', []);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"t1S1HR9O\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-step-collection\\\",null,[[\\\"stepList\\\",\\\"buildStatus\\\",\\\"buildId\\\",\\\"buildSteps\\\",\\\"buildStart\\\"],[[25,[\\\"stepList\\\"]],\\\"SUCCESS\\\",1,[25,[\\\"buildSteps\\\"]],null]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h3').hasText('Steps');\n      assert.dom('.step-list a:nth-of-type(1)').hasText('Setup');\n      assert.dom('.step-list a:nth-of-type(2)').hasText('Teardown');\n      assert.dom('.setup-spinner').doesNotExist();\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"T6C9/08M\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"build-step-collection\\\",null,[[\\\"stepList\\\",\\\"buildStatus\\\",\\\"buildId\\\",\\\"buildSteps\\\",\\\"buildStart\\\"],[[25,[\\\"stepList\\\"]],\\\"SUCCESS\\\",1,[25,[\\\"buildSteps\\\"]],null]],{\\\"statements\\\":[[0,\\\"      \\\"],[7,\\\"div\\\"],[11,\\\"class\\\",\\\"hello\\\"],[9],[0,\\\"hello\\\"],[10],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.hello').hasText('hello');\n    });\n    (0, _qunit.test)('it has a list of steps and can preselect and expand a step', async function (assert) {\n      const stepList = ['sd-setup-step1', 'sd-setup-step2', 'sd-setup-step3', 'user-step1', 'user-step2', 'user-step3', 'user-step4', 'sd-teardown-step1', 'sd-teardown-step2'];\n      this.set('stepList', stepList);\n      this.set('buildSteps', stepList.map(name => ({\n        name,\n        startTime: new Date(),\n        endTime: new Date(),\n        code: 0\n      })));\n      this.set('preselectedStepName', 'user-step2');\n      this.set('changeBuildStep', () => {});\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"qE2DOjR6\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-step-collection\\\",null,[[\\\"preselectedStepName\\\",\\\"stepList\\\",\\\"buildStatus\\\",\\\"buildId\\\",\\\"buildSteps\\\",\\\"buildStart\\\",\\\"changeBuildStep\\\"],[[25,[\\\"preselectedStepName\\\"]],[25,[\\\"stepList\\\"]],\\\"SUCCESS\\\",1,[25,[\\\"buildSteps\\\"]],null,[29,\\\"action\\\",[[24,0,[]],[25,[\\\"changeBuildStep\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h3').hasText('Steps');\n      assert.dom('.step-list ul.setup li').exists({\n        count: 3\n      });\n      assert.dom('.step-list div.user-steps li').exists({\n        count: 4\n      });\n      assert.dom('.step-list ul.teardown li').exists({\n        count: 2\n      });\n      assert.dom('.step-list div.user-steps li:nth-child(2)').hasClass('active');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/build-step-item/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | build step item', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders and calls click handler', async function (assert) {\n      assert.expect(4);\n      this.set('mockClick', name => assert.equal(name, 'monkey'));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"7hCFcH0t\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-step-item\\\",null,[[\\\"selectedStep\\\",\\\"stepName\\\",\\\"stepStart\\\",\\\"stepEnd\\\",\\\"stepCode\\\",\\\"onClick\\\"],[\\\"banana\\\",\\\"monkey\\\",\\\"2016-08-26T20:50:51.531Z\\\",\\\"2016-08-26T20:50:52.531Z\\\",0,[29,\\\"action\\\",[[24,0,[]],[25,[\\\"mockClick\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.name').hasText('monkey');\n      assert.dom('i.fa').hasClass('fa-check', 'success icon');\n      assert.dom('.duration').hasText('1 second');\n      await (0, _testHelpers.click)('.name');\n    });\n    (0, _qunit.test)('it renders an X when failed', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"OfakqddA\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-step-item\\\",null,[[\\\"selectedStep\\\",\\\"stepName\\\",\\\"stepStart\\\",\\\"stepEnd\\\",\\\"stepCode\\\"],[\\\"banana\\\",\\\"monkey\\\",\\\"2016-08-26T20:50:51.531Z\\\",\\\"2016-08-26T20:50:52.531Z\\\",128]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('i.fa').hasClass('fa-times', 'fail icon');\n    });\n    (0, _qunit.test)('it renders an O when not run', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"tfIv75Fo\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-step-item\\\",null,[[\\\"selectedStep\\\",\\\"stepName\\\"],[\\\"banana\\\",\\\"monkey\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('i.fa').hasClass('fa-circle-o', 'empty icon');\n    });\n    (0, _qunit.test)('it renders an spinner when running', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"cYVPvsPC\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"build-step-item\\\",null,[[\\\"selectedStep\\\",\\\"stepName\\\",\\\"stepStart\\\"],[\\\"banana\\\",\\\"monkey\\\",\\\"2016-08-26T20:50:51.531Z\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('i.fa').hasClass('fa-spinner', 'spin icon');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/chart-c3/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | chart c3', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('data', {\n        columns: []\n      });\n      this.set('oninit', () => {\n        assert.ok(this);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"4d/MapbO\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[1,[29,\\\"chart-c3\\\",null,[[\\\"name\\\",\\\"data\\\",\\\"oninit\\\"],[\\\"test-chart\\\",[25,[\\\"data\\\"]],[25,[\\\"oninit\\\"]]]]],false],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('svg').exists({\n        count: 1\n      });\n      assert.dom('.c3-circle').doesNotExist();\n      assert.dom('.c3-event-rect').exists({\n        count: 1\n      });\n      this.set('data', {\n        columns: [['data', 1]]\n      });\n      assert.dom('.c3-circle').exists({\n        count: 1\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/collection-dropdown/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"screwdriver-ui/tests/helpers/inject-session\", \"screwdriver-ui/tests/helpers/inject-scm\"], function (_qunit, _emberQunit, _testHelpers, _injectSession, _injectScm) {\n  \"use strict\";\n\n  const mockCollection = {\n    id: 1,\n    name: 'Test',\n    description: 'Test description',\n    get: name => name\n  };\n  (0, _qunit.module)('Integration | Component | collection add button', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('collections', [Ember.Object.create(mockCollection)]);\n      this.set('pipeline', {\n        id: 1\n      });\n      this.set('onAddToCollection', true);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"hY7kLVda\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"collection-dropdown\\\",null,[[\\\"collections\\\",\\\"pipeline\\\",\\\"onAddToCollection\\\"],[[25,[\\\"collections\\\"]],[25,[\\\"pipeline\\\"]],[25,[\\\"onAddToCollection\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      })); // the button should be there\n\n      assert.dom('.dropdown-toggle').exists({\n        count: 1\n      });\n      await (0, _testHelpers.click)('.dropdown-toggle'); // there should be two list items ('Test' and 'CREATE')\n\n      assert.dom('.dropdown-menu > li').exists({\n        count: 2\n      }); // Validate that list items exist\n\n      assert.dom('.dropdown-menu > li:nth-child(1)').hasText('Test');\n      assert.dom('.dropdown-menu > li:nth-child(2)').hasText('CREATE');\n    });\n    (0, _qunit.test)('it adds a pipeline to a collection', async function (assert) {\n      assert.expect(2);\n      (0, _injectSession.default)(this);\n      (0, _injectScm.default)(this);\n      const pipelines = [Ember.Object.create({\n        id: 2,\n        appId: 'batman/tumbler',\n        branch: 'waynecorp',\n        scmContext: 'bitbucket:bitbucket.org'\n      }), Ember.Object.create({\n        id: 1,\n        appId: 'foo/bar',\n        branch: 'master',\n        scmContext: 'github:github.com'\n      })];\n      const collections = [Ember.Object.create({\n        id: 1,\n        name: 'collection1',\n        description: 'description1',\n        pipelineIds: [2, 3]\n      }), Ember.Object.create({\n        id: 2,\n        name: 'collection2',\n        description: 'description2',\n        pipelineIds: []\n      })];\n\n      const addToCollectionMock = (pipelineId, collectionId) => {\n        assert.strictEqual(pipelineId, 2);\n        assert.strictEqual(collectionId, 1);\n        return Ember.RSVP.resolve({\n          id: 1,\n          name: 'collection1',\n          description: 'description1',\n          pipelineIds: [1, 2, 3]\n        });\n      };\n\n      this.set('pipelineList', pipelines);\n      this.set('collections', collections);\n      this.set('addToCollection', addToCollectionMock);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"QsaLxzHR\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[1,[29,\\\"search-list\\\",null,[[\\\"pipelines\\\",\\\"collections\\\",\\\"addToCollection\\\"],[[25,[\\\"pipelineList\\\"]],[25,[\\\"collections\\\"]],[25,[\\\"addToCollection\\\"]]]]],false],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)((0, _testHelpers.findAll)('.dropdown-toggle')[0]);\n      await (0, _testHelpers.click)('td.add .dropdown-menu span');\n    });\n    (0, _qunit.test)('it fails to add a pipeline to a collection', async function (assert) {\n      assert.expect(1);\n      (0, _injectSession.default)(this);\n      (0, _injectScm.default)(this);\n      const pipelines = [Ember.Object.create({\n        id: 1,\n        appId: 'foo/bar',\n        branch: 'master',\n        scmContext: 'github:github.com'\n      })];\n      const collections = [Ember.Object.create({\n        id: 1,\n        name: 'collection1',\n        description: 'description1',\n        pipelineIds: [2, 3]\n      })];\n\n      const addToCollectionMock = () => {\n        assert.ok(true);\n        return Ember.RSVP.reject();\n      };\n\n      this.set('pipelineList', pipelines);\n      this.set('collections', collections);\n      this.set('addToCollection', addToCollectionMock);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"QsaLxzHR\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[1,[29,\\\"search-list\\\",null,[[\\\"pipelines\\\",\\\"collections\\\",\\\"addToCollection\\\"],[[25,[\\\"pipelineList\\\"]],[25,[\\\"collections\\\"]],[25,[\\\"addToCollection\\\"]]]]],false],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)((0, _testHelpers.findAll)('.dropdown-toggle')[0]);\n      await (0, _testHelpers.click)('td.add .dropdown-menu span');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/collection-modal/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"screwdriver-ui/tests/helpers/inject-session\"], function (_qunit, _emberQunit, _testHelpers, _injectSession) {\n  \"use strict\";\n\n  const mockCollection = {\n    id: 1,\n    name: 'Test',\n    description: 'Test description',\n    get: name => name\n  };\n  const collectionModel = {\n    save() {\n      return new Ember.RSVP.Promise(resolve => resolve(mockCollection));\n    },\n\n    destroyRecord() {}\n\n  };\n  (0, _qunit.module)('Integration | Component | collections modal', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.owner.unregister('service:store');\n    });\n    (0, _qunit.test)('it renders', async function (assert) {\n      assert.expect(5);\n      this.set('showModal', true);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"VsVFrneV\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"collection-modal\\\",null,[[\\\"showModal\\\"],[[25,[\\\"showModal\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.modal-title').hasText('Create New Collection');\n      assert.dom('.name .control-label').hasText('Collection Name');\n      assert.dom('.description .control-label').hasText('Description');\n      assert.dom('.collection-form__cancel').hasText('Cancel');\n      assert.dom('.collection-form__create').hasText('Save');\n    });\n    (0, _qunit.test)('it cancels creation of a collection', async function (assert) {\n      assert.expect(2);\n      this.set('showModal', true);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"VsVFrneV\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"collection-modal\\\",null,[[\\\"showModal\\\"],[[25,[\\\"showModal\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.modal-dialog').exists({\n        count: 1\n      });\n      await (0, _testHelpers.click)('.collection-form__cancel');\n      assert.dom('.modal-dialog').doesNotExist();\n    });\n    (0, _qunit.test)('it creates a collection', async function (assert) {\n      assert.expect(4);\n      (0, _injectSession.default)(this);\n      const storeStub = Ember.Service.extend({\n        createRecord(model, data) {\n          assert.strictEqual(model, 'collection');\n          assert.deepEqual(data, {\n            name: 'Test',\n            description: 'Test description'\n          });\n          return collectionModel;\n        },\n\n        findAll() {\n          return new Ember.RSVP.Promise(resolve => resolve([mockCollection]));\n        }\n\n      });\n\n      const stubAddFunction = function () {\n        assert.ok(true);\n      };\n\n      this.set('showModal', true);\n      this.set('name', 'Test');\n      this.set('description', 'Test description');\n      this.set('addToCollection', stubAddFunction);\n      this.owner.register('service:store', storeStub);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ruAo2TVZ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"collection-modal\\\",null,[[\\\"showModal\\\",\\\"name\\\",\\\"description\\\"],[[25,[\\\"showModal\\\"]],[25,[\\\"name\\\"]],[25,[\\\"description\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.modal-dialog').exists({\n        count: 1\n      });\n      await (0, _testHelpers.click)('.collection-form__create');\n      assert.notOk(this.get('showModal'));\n    });\n    (0, _qunit.test)('it cancels creation of a collection', async function (assert) {\n      assert.expect(3);\n      (0, _injectSession.default)(this);\n      const model = {\n        save() {\n          return new Ember.RSVP.Promise((resolve, reject) => reject({\n            errors: [{\n              detail: 'This is an error message'\n            }]\n          }));\n        },\n\n        destroyRecord() {}\n\n      };\n      const storeStub = Ember.Service.extend({\n        createRecord() {\n          return model;\n        }\n\n      });\n      this.set('collections', []);\n      this.set('showModal', true);\n      this.set('errorMessage', null);\n      this.set('name', null);\n      this.set('description', null);\n      this.owner.register('service:store', storeStub);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"zq1V1Flb\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"collection-modal\\\",null,[[\\\"collections\\\",\\\"showModal\\\",\\\"name\\\",\\\"description\\\",\\\"errorMessage\\\"],[[25,[\\\"collections\\\"]],[25,[\\\"showModal\\\"]],[25,[\\\"name\\\"]],[25,[\\\"description\\\"]],[25,[\\\"errorMessage\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      this.set('name', 'Test');\n      this.set('description', 'Test description');\n      assert.ok(this.get('showModal'));\n      await (0, _testHelpers.click)('.collection-form__create'); // Modal should remain open because of error\n\n      assert.ok(this.get('showModal'));\n      assert.dom('.alert-warning > span').hasText('This is an error message');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/collection-view/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"screwdriver-ui/tests/helpers/inject-session\", \"screwdriver-ui/tests/helpers/inject-scm\"], function (_qunit, _emberQunit, _testHelpers, _injectSession, _injectScm) {\n  \"use strict\";\n\n  let testCollection;\n  (0, _qunit.module)('Integration | Component | collection view', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      testCollection = Ember.Object.create({\n        id: 1,\n        name: 'Test',\n        description: 'Test Collection',\n        pipelines: [{\n          id: 1,\n          scmUri: 'github.com:12345678:master',\n          createTime: '2017-01-05T00:55:46.775Z',\n          admins: {\n            username: true\n          },\n          workflow: ['main'],\n          scmRepo: {\n            name: 'screwdriver-cd/screwdriver',\n            branch: 'master',\n            url: 'https://github.com/screwdriver-cd/screwdriver/tree/master'\n          },\n          scmContext: 'github:github.com',\n          annotations: {},\n          lastEventId: 12,\n          lastBuilds: [{\n            id: 123,\n            status: 'SUCCESS',\n            // Most recent build\n            createTime: '2017-09-05T04:02:20.890Z'\n          }]\n        }, {\n          id: 2,\n          scmUri: 'github.com:87654321:master',\n          createTime: '2017-01-05T00:55:46.775Z',\n          admins: {\n            username: true\n          },\n          workflow: ['main', 'publish'],\n          scmRepo: {\n            name: 'screwdriver-cd/ui',\n            branch: 'master',\n            url: 'https://github.com/screwdriver-cd/ui/tree/master'\n          },\n          scmContext: 'github:github.com',\n          annotations: {},\n          prs: {\n            open: 2,\n            failing: 1\n          }\n        }, {\n          id: 3,\n          scmUri: 'github.com:54321876:master',\n          createTime: '2017-01-05T00:55:46.775Z',\n          admins: {\n            username: true\n          },\n          workflow: ['main'],\n          scmRepo: {\n            name: 'screwdriver-cd/models',\n            branch: 'master',\n            url: 'https://github.com/screwdriver-cd/models/tree/master'\n          },\n          scmContext: 'bitbucket:bitbucket.org',\n          annotations: {},\n          lastEventId: 23,\n          lastBuilds: [{\n            id: 125,\n            status: 'FAILURE',\n            // 2nd most recent build\n            createTime: '2017-09-05T04:01:41.789Z'\n          }]\n        }, {\n          id: 4,\n          scmUri: 'github.com:54321879:master:lib',\n          createTime: '2017-01-05T00:55:46.775Z',\n          admins: {\n            username: true\n          },\n          workflow: ['main'],\n          scmRepo: {\n            name: 'screwdriver-cd/zzz',\n            branch: 'master',\n            url: 'https://github.com/screwdriver-cd/zzz/tree/master',\n            rootDir: 'lib'\n          },\n          scmContext: 'bitbucket:bitbucket.org',\n          annotations: {},\n          lastEventId: 23,\n          lastBuilds: [{\n            id: 125,\n            status: 'UNSTABLE',\n            createTime: '2017-09-05T04:01:41.789Z'\n          }]\n        }]\n      });\n    });\n    (0, _qunit.test)('it renders', async function (assert) {\n      (0, _injectScm.default)(this);\n      this.set('mockCollection', testCollection);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"UJaNfKaj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"collection-view\\\",null,[[\\\"collection\\\"],[[25,[\\\"mockCollection\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.header__name').hasText('Test');\n      assert.dom('.header__description').hasText('Test Collection');\n      assert.dom('table').exists({\n        count: 1\n      });\n      assert.dom('th.app-id').hasText('Name');\n      assert.dom('th.branch').hasText('Branch');\n      assert.dom('th.account').hasText('Account');\n      assert.dom('th.health').hasText('Last Build');\n      assert.dom('th.prs').hasText('Pull Requests');\n      assert.dom('tr').exists({\n        count: 6\n      });\n      assert.dom('.fa-pencil').exists({\n        count: 2\n      }); // The pipelines are sorted in alphabetical order by default by the component\n\n      const appIdEls = (0, _testHelpers.findAll)('td.app-id');\n      assert.dom(appIdEls[0]).hasText('screwdriver-cd/models');\n      assert.dom(appIdEls[1]).hasText('screwdriver-cd/screwdriver');\n      assert.dom(appIdEls[2]).hasText('screwdriver-cd/ui');\n      assert.dom(appIdEls[3]).hasText('screwdriver-cd/zzz'); // The pipelines are sorted in alphabetical order by default by the component\n\n      const branchEls = (0, _testHelpers.findAll)('td.branch');\n      assert.dom(branchEls[0]).hasText('master');\n      assert.dom(branchEls[1]).hasText('master');\n      assert.dom(branchEls[2]).hasText('master');\n      assert.dom(branchEls[3]).hasText('master#lib'); // The models pipeline has scm display names\n\n      const accountEls = (0, _testHelpers.findAll)('td.account');\n      assert.dom(accountEls[0]).hasText('bitbucket.org');\n      assert.dom(accountEls[1]).hasText('github.com');\n      assert.dom(accountEls[2]).hasText('github.com');\n      assert.dom(accountEls[3]).hasText('bitbucket.org'); // The pipeline health\n\n      const healthEls = (0, _testHelpers.findAll)('td.health i');\n      assert.dom(healthEls[0]).hasClass('build-failure');\n      assert.dom(healthEls[1]).hasClass('build-success');\n      assert.dom(healthEls[3]).hasClass('build-unstable');\n      const openEls = (0, _testHelpers.findAll)('td.prs--open');\n      const failingEls = (0, _testHelpers.findAll)('td.prs--failing'); // The models pipeline should not have any info for prs open and failing\n\n      assert.dom(openEls[0]).hasText('');\n      assert.dom(failingEls[0]).hasText(''); // The screwdriver pipeline should not have any info for prs open and failing\n\n      assert.dom(openEls[1]).hasText('');\n      assert.dom(failingEls[1]).hasText(''); // The ui pipeline should have 2 prs open and 1 failing\n\n      assert.dom(openEls[2]).hasText('2');\n      assert.dom(failingEls[2]).hasText('1');\n    });\n    (0, _qunit.test)('it removes a pipeline from a collection', async function (assert) {\n      assert.expect(2);\n      (0, _injectSession.default)(this);\n\n      const pipelineRemoveMock = (pipelineId, collectionId) => {\n        // Make sure the models pipeline is the one being removed\n        assert.strictEqual(pipelineId, 3);\n        assert.strictEqual(collectionId, 1);\n        return Ember.RSVP.resolve({\n          id: 1,\n          name: 'collection1',\n          description: 'description1',\n          pipelineIds: [1],\n          pipelines: [{\n            id: 1,\n            scmUri: 'github.com:12345678:master',\n            createTime: '2017-01-05T00:55:46.775Z',\n            admins: {\n              username: true\n            },\n            workflow: ['main', 'publish'],\n            scmRepo: {\n              name: 'screwdriver-cd/screwdriver',\n              branch: 'master',\n              url: 'https://github.com/screwdriver-cd/screwdriver/tree/master'\n            },\n            scmContext: 'github:github.com',\n            annotations: {}\n          }]\n        });\n      };\n\n      this.set('mockCollection', testCollection);\n      this.set('onPipelineRemoveMock', pipelineRemoveMock);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"JMVBDm33\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[1,[29,\\\"collection-view\\\",null,[[\\\"collection\\\",\\\"onPipelineRemove\\\"],[[25,[\\\"mockCollection\\\"]],[25,[\\\"onPipelineRemoveMock\\\"]]]]],false],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      })); // Delete the models pipeline\n\n      await (0, _testHelpers.click)('.collection-pipeline__remove');\n    });\n    (0, _qunit.test)('it fails to remove a pipeline', async function (assert) {\n      assert.expect(1);\n      (0, _injectSession.default)(this);\n\n      const pipelineRemoveMock = () => Ember.RSVP.reject({\n        errors: [{\n          detail: 'User does not have permission'\n        }]\n      });\n\n      this.set('mockCollection', testCollection);\n      this.set('onPipelineRemoveMock', pipelineRemoveMock);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"JMVBDm33\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[1,[29,\\\"collection-view\\\",null,[[\\\"collection\\\",\\\"onPipelineRemove\\\"],[[25,[\\\"mockCollection\\\"]],[25,[\\\"onPipelineRemoveMock\\\"]]]]],false],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('.collection-pipeline__remove');\n      assert.dom('.alert-warning > span').hasText('User does not have permission');\n    });\n    (0, _qunit.test)('it does not show remove button if user is not logged in', async function (assert) {\n      assert.expect(1);\n      this.set('mockCollection', testCollection);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"UJaNfKaj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"collection-view\\\",null,[[\\\"collection\\\"],[[25,[\\\"mockCollection\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.collection-pipeline__remove').doesNotExist();\n    });\n    (0, _qunit.test)('it sorts by last build', async function (assert) {\n      this.set('mockCollection', testCollection);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"UJaNfKaj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"collection-view\\\",null,[[\\\"collection\\\"],[[25,[\\\"mockCollection\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      let appIdEls = (0, _testHelpers.findAll)('td.app-id'); // Initially it is sorted by name\n\n      assert.dom(appIdEls[0]).hasText('screwdriver-cd/models');\n      assert.dom(appIdEls[1]).hasText('screwdriver-cd/screwdriver');\n      await (0, _testHelpers.click)('.header__sort-pipelines .dropdown-toggle');\n      await (0, _testHelpers.click)((0, _testHelpers.findAll)('.header__sort-pipelines ul li a')[1]);\n      appIdEls = (0, _testHelpers.findAll)('td.app-id'); // Now it should be sorted by most recent last build\n\n      assert.dom(appIdEls[0]).hasText('screwdriver-cd/screwdriver');\n      assert.dom(appIdEls[1]).hasText('screwdriver-cd/models');\n    });\n    (0, _qunit.test)('description is editable', async function (assert) {\n      this.set('mockCollection', testCollection);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"UJaNfKaj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"collection-view\\\",null,[[\\\"collection\\\"],[[25,[\\\"mockCollection\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      const editEls = (0, _testHelpers.findAll)('.fa-pencil');\n      await (0, _testHelpers.click)(editEls[1]);\n      await (0, _testHelpers.click)(editEls[0]);\n      assert.dom('textarea').exists({\n        count: 1\n      });\n      assert.dom('input').exists({\n        count: 1\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/collections-flyout/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"sinon\", \"screwdriver-ui/tests/helpers/inject-session\"], function (_qunit, _emberQunit, _testHelpers, _sinon, _injectSession) {\n  \"use strict\";\n\n  const mockCollection = {\n    id: 1,\n    name: 'Test',\n    description: 'Test description',\n    get: name => name\n  };\n  (0, _qunit.module)('Integration | Component | collections flyout', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      assert.expect(6);\n      (0, _injectSession.default)(this);\n      this.set('collections', [Ember.Object.create({\n        id: 1,\n        name: 'collection1',\n        description: 'description1',\n        pipelineIds: [1, 2, 3]\n      }), Ember.Object.create({\n        id: 2,\n        name: 'collection2',\n        description: 'description2',\n        pipelineIds: [4, 5, 6]\n      }), Ember.Object.create({\n        id: 3,\n        name: 'collection3',\n        description: 'description3',\n        pipelineIds: [7, 8, 9]\n      })]);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"fSTMfz5E\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"collections-flyout\\\",null,[[\\\"collections\\\"],[[25,[\\\"collections\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.header__text').hasText('Collections');\n      assert.dom('.header__text a i').hasClass('fa-plus-circle');\n      assert.dom('.collection-wrapper a').hasText('collection1');\n      const wrapperEls = (0, _testHelpers.findAll)('.collection-wrapper a');\n      assert.dom(wrapperEls[0]).hasText('collection1');\n      assert.dom(wrapperEls[1]).hasText('collection2');\n      assert.dom(wrapperEls[2]).hasText('collection3');\n    });\n    (0, _qunit.test)('it renders with no collections', async function (assert) {\n      assert.expect(2);\n      this.set('collections', []);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"fSTMfz5E\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"collections-flyout\\\",null,[[\\\"collections\\\"],[[25,[\\\"collections\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.no-collections-text').exists({\n        count: 1\n      });\n      assert.dom('.no-collections-text').hasText('No collections to display.');\n    });\n    (0, _qunit.test)('it opens collection create modal', async function (assert) {\n      assert.expect(9);\n      (0, _injectSession.default)(this);\n      this.set('collections', []);\n      this.set('showModal', false);\n      this.set('setModal', () => {\n        this.set('showModal', true);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"i//PGG0s\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"collections-flyout\\\",null,[[\\\"collections\\\",\\\"showModal\\\",\\\"setModal\\\"],[[25,[\\\"collections\\\"]],[25,[\\\"showModal\\\"]],[25,[\\\"setModal\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.get('showModal'), false); // Make sure there are no modals\n\n      assert.dom('.modal').doesNotExist();\n      await (0, _testHelpers.click)('.new');\n      assert.equal(this.get('showModal'), true); // Make sure there is only 1 modal\n\n      assert.dom('.modal').exists({\n        count: 1\n      });\n      assert.dom('.modal-title').hasText('Create New Collection');\n      assert.dom('.name input').exists({\n        count: 1\n      });\n      assert.dom('.description textarea').exists({\n        count: 1\n      });\n      assert.dom('.collection-form__cancel').hasText('Cancel');\n      assert.dom('.collection-form__create').hasText('Save');\n    });\n    (0, _qunit.test)('it renders an active collection', async function (assert) {\n      assert.expect(4);\n      this.set('collections', [Ember.Object.create(mockCollection)]);\n      this.set('selectedCollectionId', 1);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"JZXK/ZiQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"collections-flyout\\\",null,[[\\\"collections\\\",\\\"selectedCollectionId\\\"],[[25,[\\\"collections\\\"]],[25,[\\\"selectedCollectionId\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.header__text').hasText('Collections');\n      assert.dom('.header__text a i').doesNotExist();\n      assert.dom('.collection-wrapper a').hasText('Test');\n      assert.dom('.collection-wrapper.row--active').exists({\n        count: 1\n      });\n    });\n    (0, _qunit.test)('it fails to create a collection', async function (assert) {\n      assert.expect(3);\n      (0, _injectSession.default)(this);\n      const model = {\n        save() {\n          return new Ember.RSVP.Promise((resolve, reject) => reject({\n            errors: [{\n              detail: 'This is an error message'\n            }]\n          }));\n        },\n\n        destroyRecord() {}\n\n      };\n      const storeStub = Ember.Service.extend({\n        createRecord() {\n          return model;\n        }\n\n      });\n      this.set('collections', []);\n      this.set('showModal', false);\n      this.set('errorMessage', null);\n      this.set('name', null);\n      this.set('description', null);\n      this.owner.unregister('service:store');\n      this.owner.register('service:store', storeStub);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"HWcd/kVf\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"collections-flyout\\\",null,[[\\\"collections\\\",\\\"showModal\\\",\\\"name\\\",\\\"description\\\"],[[25,[\\\"collections\\\"]],[25,[\\\"showModal\\\"]],[25,[\\\"name\\\"]],[25,[\\\"description\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('.new');\n      this.set('name', 'Test');\n      this.set('description', 'Test description');\n      assert.ok(this.get('showModal'));\n      await (0, _testHelpers.click)('.collection-form__create'); // Modal should remain open because of error\n\n      assert.ok(this.get('showModal'));\n      assert.dom('.alert-warning > span').hasText('This is an error message');\n    });\n    (0, _qunit.test)('it deletes a collection', async function (assert) {\n      assert.expect(9);\n      (0, _injectSession.default)(this);\n      const collectionModelMock = {\n        destroyRecord() {\n          // Dummy assert to make sure this function gets called\n          assert.ok(true);\n          return new Ember.RSVP.Promise(resolve => resolve());\n        }\n\n      };\n      const storeStub = Ember.Service.extend({\n        peekRecord() {\n          assert.ok(true, 'peekRecord called');\n          return collectionModelMock;\n        },\n\n        findAll() {\n          return new Ember.RSVP.Promise(resolve => resolve([mockCollection]));\n        }\n\n      });\n      this.set('collections', [Ember.Object.create({\n        id: 1,\n        name: 'collection1',\n        description: 'description1',\n        pipelineIds: [1, 2, 3]\n      }), Ember.Object.create({\n        id: 2,\n        name: 'collection2',\n        description: 'description2',\n        pipelineIds: [4, 5, 6]\n      }), Ember.Object.create({\n        id: 3,\n        name: 'collection3',\n        description: 'description3',\n        pipelineIds: [7, 8, 9]\n      })]);\n\n      let onDeleteSpy = _sinon.default.spy();\n\n      this.set('showModal', false);\n      this.set('name', null);\n      this.set('description', null);\n      this.set('onDeleteCollection', onDeleteSpy);\n      this.owner.unregister('service:store');\n      this.owner.register('service:store', storeStub);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"n31ERvNM\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"collections-flyout\\\",null,[[\\\"collections\\\",\\\"showModal\\\",\\\"name\\\",\\\"description\\\",\\\"onDeleteCollection\\\"],[[25,[\\\"collections\\\"]],[25,[\\\"showModal\\\"]],[25,[\\\"name\\\"]],[25,[\\\"description\\\"]],[25,[\\\"onDeleteCollection\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.header__edit').exists({\n        count: 1\n      }); // Make sure delete buttons aren't shown\n\n      assert.dom('.wrapper__delete').doesNotExist();\n      await (0, _testHelpers.click)('.header__edit'); // Delete buttons should be visible\n\n      assert.dom('.collection-wrapper__delete').exists({\n        count: 3\n      });\n      assert.dom('.modal').doesNotExist();\n      await (0, _testHelpers.click)('.collection-wrapper__delete');\n      assert.dom('.modal').exists({\n        count: 1\n      });\n      assert.dom('.modal-title').hasText('Please confirm');\n      await (0, _testHelpers.click)('.modal-footer > .btn-primary');\n      assert.ok(onDeleteSpy.called);\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/command-format/componenet-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  const DOCKER_COMMAND = {\n    id: 2,\n    namespace: 'foo',\n    name: 'bar',\n    version: '1.0.0',\n    description: 'A test example',\n    maintainer: 'test@example.com',\n    format: 'docker',\n    docker: {\n      image: 'test',\n      command: 'example'\n    },\n    pipelineId: 100\n  };\n  const HABITAT_COMMAND = {\n    id: 3,\n    namespace: 'banana',\n    name: 'strawberry',\n    version: '1.0.0',\n    description: 'A fruity example',\n    maintainer: 'fruity@example.com',\n    format: 'habitat',\n    habitat: {\n      mode: 'remote',\n      package: 'fruit',\n      command: 'bananaberry'\n    },\n    pipelineId: 201\n  };\n  const BINARY_COMMAND = {\n    id: 4,\n    namespace: 'dog',\n    name: 'cat',\n    version: '1.0.0',\n    description: 'An animal example',\n    maintainer: 'animal@example.com',\n    format: 'binary',\n    binary: {\n      file: './animals.sh'\n    },\n    pipelineId: 303\n  };\n  (0, _qunit.module)('Integration | Component | command format', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders docker', async function (assert) {\n      this.set('mock', DOCKER_COMMAND);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"voJRNpDM\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"command-format\\\",null,[[\\\"command\\\"],[[25,[\\\"mock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h4').hasText('Format: docker');\n      assert.dom('.image .label').hasText('Image:');\n      assert.dom('.image .value').hasText('test');\n      assert.dom('.docker-command .label').hasText('Command:');\n      assert.dom('.docker-command .value').hasText('example');\n    });\n    (0, _qunit.test)('it renders habitat', async function (assert) {\n      this.set('mock', HABITAT_COMMAND);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"voJRNpDM\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"command-format\\\",null,[[\\\"command\\\"],[[25,[\\\"mock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h4').hasText('Format: habitat');\n      assert.dom('.mode .label').hasText('Mode:');\n      assert.dom('.mode .value').hasText('remote');\n      assert.dom('.package .label').hasText('Package:');\n      assert.dom('.package .value').hasText('fruit');\n      assert.dom('.habitat-command .label').hasText('Command:');\n      assert.dom('.habitat-command .value').hasText('bananaberry');\n    });\n    (0, _qunit.test)('it renders binary', async function (assert) {\n      this.set('mock', BINARY_COMMAND);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"voJRNpDM\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"command-format\\\",null,[[\\\"command\\\"],[[25,[\\\"mock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h4').hasText('Format: binary');\n      assert.dom('.file .label').hasText('File:');\n      assert.dom('.file .value').hasText('./animals.sh');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/command-header/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  const COMMAND = {\n    id: 2,\n    namespace: 'foo',\n    name: 'bar',\n    version: '1.0.0',\n    description: 'A test example',\n    maintainer: 'test@example.com',\n    format: 'docker',\n    docker: '{\"image\":\"test\",\"command\":\"example\"}',\n    pipelineId: 100\n  };\n  const mockPipeline = {\n    id: 1,\n    scmRepo: {\n      url: 'github.com/screwdriver-cd'\n    },\n\n    get(key) {\n      return this[key];\n    }\n\n  };\n  (0, _qunit.module)('Integration | Component | command header', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      const storeStub = Ember.Service.extend({\n        findRecord() {\n          return new Ember.RSVP.Promise(resolve => resolve(mockPipeline));\n        }\n\n      });\n      this.owner.register('service:store', storeStub);\n      this.set('mock', COMMAND);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"sdn+u2L/\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"command-header\\\",null,[[\\\"command\\\"],[[25,[\\\"mock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h1').hasText('foo/bar');\n      assert.dom('h2').hasText('1.0.0');\n      assert.dom('p').hasText('A test example');\n      assert.dom('ul li:first-child').hasText('Released by: test@example.com');\n      assert.dom('ul li:first-child a').hasAttribute('href', 'mailto:test@example.com');\n      assert.dom('h4').hasText('Usage:');\n      assert.dom('pre').hasText('sd-cmd exec foo/bar@1.0.0');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/command-versions/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  const COMMANDS = [{\n    version: '3.0.0',\n    tag: 'latest stable'\n  }, {\n    version: '2.0.0',\n    tag: 'meeseeks'\n  }, {\n    version: '1.0.0'\n  }];\n  (0, _qunit.module)('Integration | Component | command versions', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.actions = {};\n\n      this.send = (actionName, ...args) => this.actions[actionName].apply(this, args);\n    });\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('mock', COMMANDS);\n\n      this.actions.mockAction = function () {};\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Nuv0XO6S\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"command-versions\\\",null,[[\\\"commands\\\",\\\"changeVersion\\\"],[[25,[\\\"mock\\\"]],[29,\\\"action\\\",[[24,0,[]],\\\"mockAction\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h4').hasText('Versions:');\n      assert.dom('ul li:first-child').hasText('3.0.0 - latest stable');\n      assert.dom('ul li:nth-child(2)').hasText('2.0.0 - meeseeks');\n      assert.dom('ul li:last-child').hasText('1.0.0');\n    });\n    (0, _qunit.test)('it handles clicks on versions', async function (assert) {\n      assert.expect(5);\n      this.set('mock', COMMANDS);\n\n      this.actions.mockAction = function (ver) {\n        assert.equal(ver, '1.0.0');\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Nuv0XO6S\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"command-versions\\\",null,[[\\\"commands\\\",\\\"changeVersion\\\"],[[25,[\\\"mock\\\"]],[29,\\\"action\\\",[[24,0,[]],\\\"mockAction\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h4').hasText('Versions:');\n      assert.dom('ul li:first-child').hasText('3.0.0 - latest stable');\n      assert.dom('ul li:nth-child(2)').hasText('2.0.0 - meeseeks');\n      assert.dom('ul li:last-child').hasText('1.0.0');\n      await (0, _testHelpers.click)('ul li:last-child span');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/error-view/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | error view', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('sc', 400);\n      this.set('sm', 'they are dead, dave');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"/ZpLIk/X\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"error-view\\\",null,[[\\\"errorMessage\\\",\\\"statusCode\\\",\\\"statusMessage\\\"],[\\\"bananas\\\",[25,[\\\"sc\\\"]],[25,[\\\"sm\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h1').hasText('400');\n      assert.dom('h2').hasText('they are dead, dave');\n      assert.dom('h4').hasText('bananas');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/home-hero/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | home hero', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"cXryNBs3\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"home-hero\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h1').hasText('Introducing Screwdriver');\n      assert.dom('h2').hasText('Getting started, by the numbers...');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/info-message/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | info message', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"FJOIuNWG\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"info-message\\\",null,[[\\\"message\\\"],[\\\"batman\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.alert > span').hasText('batman');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/job-toggle-modal/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"screwdriver-ui/tests/helpers/inject-session\"], function (_qunit, _emberQunit, _testHelpers, _injectSession) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | job toggle modal', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      assert.expect(4);\n      this.set('showToggleModal', true);\n      this.set('name', 'main');\n      this.set('stateChange', 'Disable');\n      this.set('updateMessageMock', message => {\n        assert.equal(message, 'testing');\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"QDuRJyfp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"job-toggle-modal\\\",null,[[\\\"showToggleModal\\\",\\\"updateMessage\\\",\\\"name\\\",\\\"stateChange\\\"],[[25,[\\\"showToggleModal\\\"]],[25,[\\\"updateMessageMock\\\"]],[25,[\\\"name\\\"]],[25,[\\\"stateChange\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.modal-title').hasText('Disable the \"main\" job?');\n      assert.dom('.message .control-label').hasText('Reason');\n      assert.dom('.toggle-form__cancel').hasText('Cancel');\n      assert.dom('.toggle-form__create').hasText('Confirm');\n    });\n    (0, _qunit.test)('it cancels job state update', async function (assert) {\n      assert.expect(2);\n      this.set('showToggleModal', true);\n      this.set('name', 'main');\n      this.set('stateChange', 'Disable');\n      this.set('updateMessageMock', message => {\n        assert.equal(message, 'testing');\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"QDuRJyfp\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"job-toggle-modal\\\",null,[[\\\"showToggleModal\\\",\\\"updateMessage\\\",\\\"name\\\",\\\"stateChange\\\"],[[25,[\\\"showToggleModal\\\"]],[25,[\\\"updateMessageMock\\\"]],[25,[\\\"name\\\"]],[25,[\\\"stateChange\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.modal-dialog').exists({\n        count: 1\n      });\n      await (0, _testHelpers.click)('.toggle-form__cancel');\n      assert.dom('.modal-dialog').doesNotExist();\n    });\n    (0, _qunit.test)('it updates a job state', async function (assert) {\n      (0, _injectSession.default)(this);\n      assert.expect(3);\n\n      const stubUpdateFunction = function (message) {\n        assert.equal(message, 'testing');\n      };\n\n      this.set('showToggleModal', true);\n      this.set('message', 'testing');\n      this.set('updateMessageMock', stubUpdateFunction);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"3K1qYxPm\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"job-toggle-modal\\\",null,[[\\\"showToggleModal\\\",\\\"updateMessage\\\",\\\"name\\\",\\\"message\\\",\\\"stateChange\\\"],[[25,[\\\"showToggleModal\\\"]],[25,[\\\"updateMessageMock\\\"]],[25,[\\\"name\\\"]],[25,[\\\"message\\\"]],[25,[\\\"stateChange\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.modal-dialog').exists({\n        count: 1\n      });\n      await (0, _testHelpers.click)('.toggle-form__create');\n      assert.notOk(this.get('showToggleModal'));\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/loading-view/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | loading view', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"hXKAW7bf\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"loading-view\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h2').hasText('Loading...');\n      assert.ok((0, _testHelpers.find)('p').textContent.trim());\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/login-button/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"screwdriver-ui/tests/helpers/inject-scm\"], function (_qunit, _emberQunit, _testHelpers, _injectScm) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | login button', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      assert.expect(2);\n      this.set('externalAction', () => {\n        assert.ok(true);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"22kFMylU\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"login-button\\\",null,[[\\\"authenticate\\\"],[[29,\\\"action\\\",[[24,0,[]],[25,[\\\"externalAction\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h2').hasText('Sign in to Screwdriver');\n      await (0, _testHelpers.click)('a');\n    });\n    (0, _qunit.test)('it renders multiple buttons', async function (assert) {\n      assert.expect(5);\n      (0, _injectScm.default)(this);\n      const contexts = this.owner.lookup('service:scm').getScms();\n      this.set('externalAction', context => {\n        assert.ok(context);\n      });\n      this.set('model', contexts);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"9nk61Lk4\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"login-button\\\",null,[[\\\"authenticate\\\",\\\"scmContexts\\\"],[[29,\\\"action\\\",[[24,0,[]],[25,[\\\"externalAction\\\"]]],null],[25,[\\\"model\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('a').exists({\n        count: 2\n      });\n      const a = (0, _testHelpers.findAll)('a');\n      contexts.forEach(async (context, i) => {\n        assert.dom(a[i]).hasText(\"Sign in with \".concat(context.displayName));\n        await (0, _testHelpers.click)(a[i]);\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/nav-banner/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | nav banner', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders banners', async function (assert) {\n      const bannerStub = Ember.Service.extend({\n        fetchBanners: () => Ember.RSVP.resolve([Ember.Object.create({\n          id: 1,\n          isActive: true,\n          message: 'shutdown imminent'\n        })])\n      });\n      this.owner.register('service:banner', bannerStub);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"YvvFwLi5\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"nav-banner\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.banner').hasText('× shutdown imminent');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/pipeline-create-form/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | pipeline create form', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"U5UT0X9v\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-create-form\\\",null,[[\\\"errorMessage\\\",\\\"isSaving\\\"],[\\\"\\\",false]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h1').hasText('Create Pipeline');\n      assert.dom('.button-label').hasText('Create Pipeline');\n    });\n    (0, _qunit.test)('it handles the entire ui flow', async function (assert) {\n      assert.expect(3);\n      const scm = 'git@github.com:foo/bar.git';\n      const root = 'lib';\n      this.set('createPipeline', ({\n        scmUrl,\n        rootDir\n      }) => {\n        assert.equal(scmUrl, scm);\n        assert.equal(rootDir, root);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"4sVCkIsZ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-create-form\\\",null,[[\\\"errorMessage\\\",\\\"isSaving\\\",\\\"onCreatePipeline\\\"],[\\\"\\\",false,[29,\\\"action\\\",[[24,0,[]],[25,[\\\"createPipeline\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.fillIn)('.scm-url', scm);\n      await (0, _testHelpers.click)('.checkbox-input');\n      await (0, _testHelpers.fillIn)('.root-dir', root);\n      await (0, _testHelpers.triggerKeyEvent)('.scm-url', 'keyup', 'SPACE');\n      await (0, _testHelpers.triggerKeyEvent)('.root-dir', 'keyup', 'SPACE');\n      assert.dom('i.fa').hasClass('fa-check');\n      await (0, _testHelpers.click)('button.blue-button');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/pipeline-event-row/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  const event = {\n    id: 3,\n    startFrom: '~commit',\n    status: 'SUCCESS',\n    type: 'pipeline',\n    causeMessage: 'test',\n    commit: {\n      url: '#',\n      message: 'this was a test'\n    },\n    creator: {\n      url: '#',\n      name: 'batman'\n    },\n    createTimeWords: 'now',\n    durationText: '1 sec',\n    truncatedMessage: 'this was a test',\n    truncatedSha: 'abc123',\n    workflowGraph: {\n      nodes: [{\n        name: '~pr'\n      }, {\n        name: '~commit'\n      }, {\n        id: 1,\n        name: 'main'\n      }, {\n        id: 2,\n        name: 'A'\n      }, {\n        id: 3,\n        name: 'B'\n      }],\n      edges: [{\n        src: '~pr',\n        dest: 'main'\n      }, {\n        src: '~commit',\n        dest: 'main'\n      }, {\n        src: 'main',\n        dest: 'A'\n      }, {\n        src: 'A',\n        dest: 'B'\n      }]\n    },\n    builds: [{\n      jobId: 1,\n      id: 4,\n      status: 'SUCCESS'\n    }, {\n      jobId: 2,\n      id: 5,\n      status: 'SUCCESS'\n    }, {\n      jobId: 3,\n      id: 6,\n      status: 'FAILURE'\n    }]\n  };\n  (0, _qunit.module)('Integration | Component | pipeline event row', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.actions = {};\n\n      this.send = (actionName, ...args) => this.actions[actionName].apply(this, args);\n    });\n    (0, _qunit.test)('it renders with pipeline event', async function (assert) {\n      this.actions.eventClick = () => {\n        assert.ok(true);\n      };\n\n      const eventMock = Ember.Object.create(Ember.copy(event, true));\n      this.set('event', eventMock);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"TjazfB+B\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-event-row\\\",null,[[\\\"event\\\",\\\"selectedEvent\\\",\\\"lastSuccessful\\\"],[[25,[\\\"event\\\"]],3,3]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.SUCCESS').exists({\n        count: 1\n      });\n      assert.dom('.status .fa-check-circle-o').exists({\n        count: 1\n      });\n      assert.dom('.commit').hasText('#abc123');\n      assert.dom('.message').hasText('this was a test');\n      assert.dom('svg').exists({\n        count: 1\n      });\n      assert.dom('.graph-node').exists({\n        count: 4\n      });\n      assert.dom('.graph-edge').exists({\n        count: 3\n      });\n      assert.dom('.by').hasText('batman');\n      assert.dom('.date').hasText('Started now');\n    });\n    (0, _qunit.test)('it renders with pr event', async function (assert) {\n      this.actions.eventClick = () => {\n        assert.ok(true);\n      };\n\n      const eventMock = Ember.Object.create(Ember.assign(Ember.copy(event, true), {\n        startFrom: '~pr',\n        type: 'pr',\n        pr: {\n          url: 'https://foo/bar/baz/pull/2'\n        },\n        prNum: 2\n      }));\n      this.set('event', eventMock);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"TjazfB+B\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-event-row\\\",null,[[\\\"event\\\",\\\"selectedEvent\\\",\\\"lastSuccessful\\\"],[[25,[\\\"event\\\"]],3,3]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.SUCCESS').exists({\n        count: 1\n      });\n      assert.dom('.status .fa-check-circle-o').exists({\n        count: 1\n      });\n      assert.dom('.commit').hasText('PR-2');\n      assert.dom('.message').hasText('this was a test');\n      assert.dom('svg').exists({\n        count: 1\n      });\n      assert.dom('.graph-node').exists({\n        count: 4\n      });\n      assert.dom('.graph-edge').exists({\n        count: 3\n      });\n      assert.dom('.by').hasText('batman');\n      assert.dom('.date').hasText('Started now');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/pipeline-events-list/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | pipeline events list', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      const events = [Ember.Object.create({\n        id: 4,\n        startFrom: '~commit',\n        causeMessage: 'test',\n        commit: {\n          url: '#',\n          message: 'this was a test'\n        },\n        creator: {\n          url: '#',\n          name: 'batman'\n        },\n        createTimeWords: 'now',\n        durationText: '1 sec',\n        truncatedMessage: 'this was a test',\n        truncatedSha: 'abc124',\n        workflowGraph: {\n          nodes: [{\n            name: '~pr'\n          }, {\n            name: '~commit'\n          }, {\n            id: 1,\n            name: 'main'\n          }, {\n            id: 2,\n            name: 'A'\n          }, {\n            id: 3,\n            name: 'B'\n          }],\n          edges: [{\n            src: '~pr',\n            dest: 'main'\n          }, {\n            src: '~commit',\n            dest: 'main'\n          }, {\n            src: 'main',\n            dest: 'A'\n          }, {\n            src: 'A',\n            dest: 'B'\n          }]\n        },\n        builds: [{\n          jobId: 1,\n          id: 4,\n          status: 'SUCCESS'\n        }, {\n          jobId: 2,\n          id: 5,\n          status: 'SUCCESS'\n        }, {\n          jobId: 3,\n          id: 6,\n          status: 'FAILURE'\n        }]\n      }), Ember.Object.create({\n        id: 3,\n        startFrom: '~commit',\n        causeMessage: 'test',\n        commit: {\n          url: '#',\n          message: 'this was a test'\n        },\n        creator: {\n          url: '#',\n          name: 'batman'\n        },\n        createTimeWords: 'now',\n        durationText: '1 sec',\n        truncatedSha: 'abc123',\n        workflowGraph: {\n          nodes: [{\n            name: '~pr'\n          }, {\n            name: '~commit'\n          }, {\n            id: 1,\n            name: 'main'\n          }, {\n            id: 2,\n            name: 'A'\n          }, {\n            id: 3,\n            name: 'B'\n          }],\n          edges: [{\n            src: '~pr',\n            dest: 'main'\n          }, {\n            src: '~commit',\n            dest: 'main'\n          }, {\n            src: 'main',\n            dest: 'A'\n          }, {\n            src: 'A',\n            dest: 'B'\n          }]\n        },\n        builds: [{\n          jobId: 1,\n          id: 4,\n          status: 'SUCCESS'\n        }, {\n          jobId: 2,\n          id: 5,\n          status: 'SUCCESS'\n        }, {\n          jobId: 3,\n          id: 6,\n          status: 'FAILURE'\n        }]\n      })];\n      this.set('eventsMock', events);\n      this.set('updateEventsMock', page => {\n        assert.equal(page, 2);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Ri/SCsji\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-events-list\\\",null,[[\\\"events\\\",\\\"eventsPage\\\",\\\"updateEvents\\\"],[[25,[\\\"eventsMock\\\"]],1,[25,[\\\"updateEventsMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.view').exists({\n        count: 2\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/pipeline-graph-nav/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | pipeline graph nav', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      Ember.set(this, 'obj', {\n        truncatedSha: 'abc123',\n        status: 'SUCCESS',\n        creator: {\n          name: 'anonymous'\n        }\n      });\n      Ember.set(this, 'selected', 2);\n      Ember.set(this, 'startBuild', () => {\n        assert.ok(true);\n      });\n      Ember.set(this, 'currentEventType', 'pipeline');\n      Ember.set(this, 'showDownstreamTriggers', false);\n      Ember.set(this, 'setDownstreamTrigger', () => {\n        assert.ok(true);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"gIktvqvG\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-graph-nav\\\",null,[[\\\"mostRecent\\\",\\\"lastSuccessful\\\",\\\"selectedEvent\\\",\\\"selectedEventObj\\\",\\\"selected\\\",\\\"startMainBuild\\\",\\\"startPRBuild\\\",\\\"graphType\\\",\\\"showDownstreamTriggers\\\",\\\"setDownstreamTrigger\\\"],[3,2,2,[25,[\\\"obj\\\"]],[25,[\\\"selected\\\"]],[25,[\\\"startBuild\\\"]],[25,[\\\"startBuild\\\"]],[25,[\\\"currentEventType\\\"]],[25,[\\\"showDownstreamTriggers\\\"]],[25,[\\\"setDownstreamTrigger\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.row strong').hasText('Pipeline');\n      assert.dom('.row button').exists({\n        count: 3\n      });\n      const $columnTitles = this.$('.event-info .title');\n      const $links = this.$('.event-info a');\n      assert.equal($columnTitles.eq(0).text().trim(), 'Commit');\n      assert.equal($columnTitles.eq(1).text().trim(), 'Message');\n      assert.equal($columnTitles.eq(2).text().trim(), 'Status');\n      assert.equal($columnTitles.eq(3).text().trim(), 'User');\n      assert.equal($columnTitles.eq(4).text().trim(), 'Start Time');\n      assert.equal($columnTitles.eq(5).text().trim(), 'Duration');\n      assert.equal($links.eq(0).text().trim(), '#abc123');\n      assert.equal($links.eq(1).text().trim(), 'anonymous');\n      assert.dom('.SUCCESS').exists({\n        count: 1\n      });\n      assert.dom('.btn-group').hasText('Most Recent Last Successful Aggregate');\n      assert.dom('.x-toggle-component').includesText('Show triggers');\n    });\n    (0, _qunit.test)('it updates selected event id', async function (assert) {\n      assert.expect(1);\n      Ember.set(this, 'obj', {\n        truncatedSha: 'abc123'\n      });\n      Ember.set(this, 'selected', 2);\n      Ember.set(this, 'startBuild', () => {\n        assert.ok(true);\n      });\n      Ember.set(this, 'currentEventType', 'pipeline');\n      Ember.set(this, 'showDownstreamTriggers', false);\n      Ember.set(this, 'setDownstreamTrigger', () => {\n        assert.ok(true);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"gIktvqvG\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-graph-nav\\\",null,[[\\\"mostRecent\\\",\\\"lastSuccessful\\\",\\\"selectedEvent\\\",\\\"selectedEventObj\\\",\\\"selected\\\",\\\"startMainBuild\\\",\\\"startPRBuild\\\",\\\"graphType\\\",\\\"showDownstreamTriggers\\\",\\\"setDownstreamTrigger\\\"],[3,2,2,[25,[\\\"obj\\\"]],[25,[\\\"selected\\\"]],[25,[\\\"startBuild\\\"]],[25,[\\\"startBuild\\\"]],[25,[\\\"currentEventType\\\"]],[25,[\\\"showDownstreamTriggers\\\"]],[25,[\\\"setDownstreamTrigger\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      this.$('button').filter(':first').click();\n      assert.equal(Ember.get(this, 'selected'), 3);\n    });\n    (0, _qunit.test)('it renders when selectedEvent is a PR event', async function (assert) {\n      assert.expect(2);\n      Ember.set(this, 'obj', {\n        truncatedSha: 'abc123',\n        status: 'SUCCESS',\n        creator: {\n          name: 'anonymous'\n        },\n        prNum: 1,\n        type: 'pr'\n      });\n      Ember.set(this, 'selected', 2);\n      Ember.set(this, 'startBuild', (prNum, jobs) => {\n        assert.equal(prNum, 1);\n        assert.equal(jobs[0].group, 1);\n      });\n      Ember.set(this, 'currentEventType', 'pr');\n      Ember.set(this, 'pullRequestGroups', {\n        1: [{\n          name: 'PR-1:foo',\n          isPR: true,\n          group: 1\n        }, {\n          name: 'PR-1:bar',\n          isPR: true,\n          group: 1\n        }],\n        2: [{\n          name: 'PR-2:foo',\n          isPR: true,\n          group: 2\n        }]\n      });\n      Ember.set(this, 'showDownstreamTriggers', false);\n      Ember.set(this, 'setDownstreamTrigger', () => {\n        assert.ok(true);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"5QNTqRrG\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-graph-nav\\\",null,[[\\\"mostRecent\\\",\\\"lastSuccessful\\\",\\\"selectedEvent\\\",\\\"selectedEventObj\\\",\\\"selected\\\",\\\"startMainBuild\\\",\\\"startPRBuild\\\",\\\"graphType\\\",\\\"prGroups\\\",\\\"showDownstreamTriggers\\\",\\\"setDownstreamTrigger\\\"],[3,2,2,[25,[\\\"obj\\\"]],[25,[\\\"selected\\\"]],[25,[\\\"startBuild\\\"]],[25,[\\\"startBuild\\\"]],[25,[\\\"currentEventType\\\"]],[25,[\\\"pullrequestGroups\\\"]],[25,[\\\"showDownstreamTriggers\\\"]],[25,[\\\"setDownstreamTrigger\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.row strong').hasText('Pull Requests');\n      assert.dom('.row button').exists({\n        count: 2\n      });\n    });\n    (0, _qunit.test)('it handles toggling triggers', async function (assert) {\n      assert.expect(2);\n      Ember.set(this, 'obj', {\n        truncatedSha: 'abc123'\n      });\n      Ember.set(this, 'selected', 2);\n      Ember.set(this, 'startBuild', () => {\n        assert.ok(true);\n      });\n      Ember.set(this, 'setTrigger', () => {\n        assert.ok(true);\n      });\n      Ember.set(this, 'currentEventType', 'pipeline');\n      Ember.set(this, 'showDownstreamTriggers', false);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"W7MniRlP\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-graph-nav\\\",null,[[\\\"mostRecent\\\",\\\"lastSuccessful\\\",\\\"graphType\\\",\\\"selectedEvent\\\",\\\"selectedEventObj\\\",\\\"selected\\\",\\\"startMainBuild\\\",\\\"startPRBuild\\\",\\\"setDownstreamTrigger\\\",\\\"showDownstreamTriggers\\\"],[3,2,[25,[\\\"currentEventType\\\"]],2,[25,[\\\"obj\\\"]],[25,[\\\"selected\\\"]],[25,[\\\"startBuild\\\"]],[25,[\\\"startBuild\\\"]],[25,[\\\"setTrigger\\\"]],[25,[\\\"showDownstreamTriggers\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.x-toggle-component').includesText('Show triggers');\n      await (0, _testHelpers.click)('.x-toggle-btn');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/pipeline-header/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | pipeline header', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      const pipelineMock = Ember.Object.create({\n        appId: 'batman/batmobile',\n        hubUrl: 'http://example.com/batman/batmobile',\n        branch: 'master',\n        scmContext: 'github.com'\n      });\n      const scmMock = Ember.Object.create({\n        scm: 'github.com',\n        scmIcon: 'github'\n      });\n      this.set('pipelineMock', pipelineMock);\n      this.set('scmMock', scmMock);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"orOh2wwx\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-header\\\",null,[[\\\"pipeline\\\",\\\"scmContext\\\"],[[25,[\\\"pipelineMock\\\"]],[25,[\\\"scmMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h1').hasText('batman/batmobile');\n      assert.dom('a.branch').hasText('master');\n      assert.dom('a.branch').hasAttribute('href', 'http://example.com/batman/batmobile');\n      assert.dom('span.scm', 'github.com');\n      assert.dom('.scm > .fa-github').exists({\n        count: 1\n      });\n    });\n    (0, _qunit.test)('it renders link to parent pipeline for child pipeline', async function (assert) {\n      const pipelineMock = Ember.Object.create({\n        appId: 'batman/batmobile',\n        hubUrl: 'http://example.com/batman/batmobile',\n        branch: 'master',\n        scmContext: 'github.com',\n        configPipelineId: '123'\n      });\n      const scmMock = Ember.Object.create({\n        scm: 'github.com',\n        scmIcon: 'github'\n      });\n      this.set('pipelineMock', pipelineMock);\n      this.set('scmMock', scmMock);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"orOh2wwx\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-header\\\",null,[[\\\"pipeline\\\",\\\"scmContext\\\"],[[25,[\\\"pipelineMock\\\"]],[25,[\\\"scmMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('a:nth-child(5)').hasText('Parent Pipeline');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/pipeline-list/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | pipeline list', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      const pipelines = [Ember.Object.create({\n        id: 3,\n        appId: 'foo/bar',\n        branch: 'master',\n        scmContext: 'github:github.com'\n      }), Ember.Object.create({\n        id: 4,\n        appId: 'batman/tumbler',\n        branch: 'waynecorp',\n        scmContext: 'bitbucket:bitbucket.org'\n      })];\n      const pipeline = Ember.Object.create({\n        id: 1,\n        appId: 'foo/bar',\n        branch: 'master',\n        scmContext: 'github:github.com'\n      });\n      this.set('pipelineList', pipelines);\n      this.set('pipeline', pipeline);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"/BrBYE0+\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-list\\\",null,[[\\\"pipelines\\\",\\\"pipeline\\\"],[[25,[\\\"pipelineList\\\"]],[25,[\\\"pipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom((0, _testHelpers.find)('ul li:first-child')).hasText('foo/bar');\n      assert.dom('ul li:nth-child(2)').hasText('batman/tumbler');\n      assert.dom('button').hasText('Start All');\n      assert.dom('.num-results span').hasText('Found 2 child pipeline(s)');\n    });\n    (0, _qunit.test)('it renders with zero child piplines found', async function (assert) {\n      const pipelines = [];\n      const pipeline = Ember.Object.create({\n        id: 1,\n        appId: 'foo/bar',\n        branch: 'master',\n        scmContext: 'github:github.com'\n      });\n      this.set('pipelineList', pipelines);\n      this.set('pipeline', pipeline);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"/BrBYE0+\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-list\\\",null,[[\\\"pipelines\\\",\\\"pipeline\\\"],[[25,[\\\"pipelineList\\\"]],[25,[\\\"pipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.num-results span').hasText('No child pipeline(s) created');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/pipeline-nav/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | sd pipeline nav', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders without child pipelines tab', async function (assert) {\n      const pipeline = Ember.Object.create({\n        id: 1,\n        appId: 'foo/bar',\n        branch: 'master',\n        scmContext: 'github:github.com'\n      });\n      this.set('pipelineMock', pipeline);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"YJ77S6cM\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-nav\\\",null,[[\\\"pipeline\\\"],[[25,[\\\"pipelineMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('li:first-child a').hasText('Events');\n      assert.dom('li:nth-child(2) a').hasText('Secrets');\n      assert.dom('li:nth-child(3) a').hasText('Options');\n      assert.dom('li:last-child a').hasText('Metrics');\n    });\n    (0, _qunit.test)('it renders with child pipelines tab', async function (assert) {\n      const pipeline = Ember.Object.create({\n        id: 1,\n        appId: 'foo/bar',\n        branch: 'master',\n        scmContext: 'github:github.com',\n        childPipelines: {\n          foo: 'bar'\n        }\n      });\n      this.set('pipelineMock', pipeline);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"YJ77S6cM\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-nav\\\",null,[[\\\"pipeline\\\"],[[25,[\\\"pipelineMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('li:first-child a').hasText('Child Pipelines');\n      assert.dom('li:nth-child(2) a').hasText('Events');\n      assert.dom('li:nth-child(3) a').hasText('Secrets');\n      assert.dom('li:nth-child(4) a').hasText('Options');\n      assert.dom('li:last-child a').hasText('Metrics');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/pipeline-options/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"screwdriver-ui/tests/helpers/inject-session\"], function (_qunit, _emberQunit, _testHelpers, _injectSession) {\n  \"use strict\";\n\n  /* eslint new-cap: [\"error\", { \"capIsNewExceptions\": [\"A\"] }] */\n  let syncService;\n  let cacheService;\n  (0, _qunit.module)('Integration | Component | pipeline options', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('mockPipeline', Ember.Object.create({\n        appId: 'foo/bar',\n        scmUri: 'github.com:84604643:master',\n        id: 'abc1234'\n      }));\n      this.set('mockJobs', Ember.A([Ember.Object.create({\n        id: '3456',\n        name: 'B',\n        isDisabled: false\n      }), Ember.Object.create({\n        id: '1234',\n        name: 'main',\n        isDisabled: false\n      }), Ember.Object.create({\n        id: '2345',\n        name: 'A',\n        isDisabled: false\n      })]));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"p6UKDpKb\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-options\\\",null,[[\\\"pipeline\\\",\\\"jobs\\\"],[[25,[\\\"mockPipeline\\\"]],[25,[\\\"mockJobs\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      })); // Pipeline\n\n      assert.dom('section.pipeline h3').hasText('Pipeline');\n      assert.dom('section.pipeline li').exists({\n        count: 1\n      });\n      assert.dom('section.pipeline h4').hasText('Checkout URL and Source Directory');\n      assert.dom('section.pipeline p').hasText('Update your checkout URL and / or source directory.');\n      assert.dom('section.pipeline .button-label').hasText('Update'); // Jobs\n\n      assert.dom('section.jobs h3').hasText('Jobs');\n      assert.dom('section.jobs li').exists({\n        count: 4\n      });\n      assert.dom('section.jobs li:nth-child(2) h4').hasText('A');\n      assert.dom('section.jobs li:nth-child(3) h4').hasText('B');\n      assert.dom('section.jobs li:nth-child(4) h4').hasText('main');\n      assert.dom('section.jobs p').hasText('Toggle to disable or enable the job.');\n      assert.dom('.x-toggle-container').hasClass('x-toggle-container-checked'); // Sync\n\n      assert.dom('section.sync li:first-child h4').hasText('SCM webhooks');\n      assert.dom('section.sync li:nth-child(2) h4').hasText('Pull requests');\n      assert.dom('section.sync li:last-child h4').hasText('Pipeline'); // Cache\n\n      assert.dom('section.cache li:first-child h4').hasText('Pipeline');\n      assert.dom('section.cache li:nth-child(2) h4').hasText('Job A');\n      assert.dom('section.cache li:nth-child(3) h4').hasText('Job B');\n      assert.dom('section.cache li:last-child h4').hasText('Job main'); // Danger Zone\n\n      assert.dom('section.danger h3').hasText('Danger Zone');\n      assert.dom('section.danger li').exists({\n        count: 1\n      });\n      assert.dom('section.danger h4').hasText('Remove this pipeline');\n      assert.dom('section.danger p').hasText('Once you remove a pipeline, there is no going back.');\n      assert.dom('section.danger a i').hasClass('fa-trash');\n    });\n    (0, _qunit.test)('it updates a pipeline', async function (assert) {\n      const scm = 'git@github.com:foo/bar.git';\n      this.set('updatePipeline', ({\n        scmUrl\n      }) => {\n        assert.equal(scmUrl, scm);\n      });\n      this.set('mockPipeline', Ember.Object.create({\n        appId: 'foo/bar',\n        scmUri: 'github.com:84604643:notMaster',\n        id: 'abc1234',\n        rootDir: ''\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"j+pOc5aR\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-options\\\",null,[[\\\"pipeline\\\",\\\"errorMessage\\\",\\\"isSaving\\\",\\\"onUpdatePipeline\\\"],[[25,[\\\"mockPipeline\\\"]],\\\"\\\",false,[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updatePipeline\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.scm-url').hasValue('git@github.com:foo/bar.git#notMaster');\n      assert.dom('.root-dir').doesNotExist();\n      await (0, _testHelpers.fillIn)('.scm-url', scm);\n      await (0, _testHelpers.triggerKeyEvent)('.text-input', 'keyup', 'SPACE');\n      assert.dom('.scm-url').hasValue(scm);\n      await (0, _testHelpers.click)('button.blue-button');\n    });\n    (0, _qunit.test)('it updates a pipeline with rootDir', async function (assert) {\n      const scm = 'git@github.com:foo/bar.git';\n      const root = 'lib';\n      assert.expect(6);\n      this.set('updatePipeline', ({\n        scmUrl,\n        rootDir\n      }) => {\n        assert.equal(scmUrl, scm);\n        assert.equal(rootDir, root);\n      });\n      this.set('mockPipeline', Ember.Object.create({\n        appId: 'foo/bar',\n        scmUri: 'github.com:84604643:notMaster',\n        rootDir: '',\n        id: 'abc1234'\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"j+pOc5aR\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-options\\\",null,[[\\\"pipeline\\\",\\\"errorMessage\\\",\\\"isSaving\\\",\\\"onUpdatePipeline\\\"],[[25,[\\\"mockPipeline\\\"]],\\\"\\\",false,[29,\\\"action\\\",[[24,0,[]],[25,[\\\"updatePipeline\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.scm-url').hasValue('git@github.com:foo/bar.git#notMaster');\n      assert.dom('.root-dir').doesNotExist('');\n      await (0, _testHelpers.fillIn)('.scm-url', scm);\n      await (0, _testHelpers.click)('.checkbox-input');\n      await (0, _testHelpers.fillIn)('.root-dir', root);\n      await (0, _testHelpers.triggerKeyEvent)('.scm-url', 'keyup', 'SPACE');\n      assert.dom('.scm-url').hasValue(scm);\n      assert.dom('.root-dir').hasValue(root);\n      await (0, _testHelpers.click)('button.blue-button');\n    });\n    (0, _qunit.test)('it opens job toggle modal', async function (assert) {\n      assert.expect(8);\n      (0, _injectSession.default)(this);\n      const main = Ember.Object.create({\n        id: '1234',\n        name: 'main',\n        isDisabled: false\n      });\n      const jobModelMock = {\n        save() {\n          return Ember.RSVP.resolve(main);\n        }\n\n      };\n      const storeStub = Ember.Service.extend({\n        peekRecord() {\n          assert.ok(true, 'peekRecord called');\n          return jobModelMock;\n        }\n\n      });\n      this.set('mockPipeline', Ember.Object.create({\n        appId: 'foo/bar',\n        scmUri: 'github.com:84604643:master',\n        id: 'abc1234'\n      }));\n      this.set('showToggleModal', false);\n      this.set('mockJobs', Ember.A([main]));\n      this.set('username', 'tkyi');\n      this.set('setJobStatsMock', (id, state, name, message) => {\n        assert.equal(id, '1234');\n        assert.equal(message, ' ');\n        assert.equal(name, 'tkyi');\n        assert.equal(state, 'DISABLED');\n        main.set('state', state);\n        main.set('stateChanger', 'tkyi');\n        main.set('stateChangeMessage', ' ');\n        main.set('isDisabled', state === 'DISABLED');\n        this.set('state', state);\n        this.set('showToggleModal', false);\n      });\n      this.owner.unregister('service:store');\n      this.owner.register('service:store', storeStub);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"1skYPP7X\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-options\\\",null,[[\\\"username\\\",\\\"pipeline\\\",\\\"setJobStatus\\\",\\\"jobs\\\",\\\"showToggleModal\\\"],[[25,[\\\"username\\\"]],[25,[\\\"mockPipeline\\\"]],[25,[\\\"setJobStatsMock\\\"]],[25,[\\\"mockJobs\\\"]],[25,[\\\"showToggleModal\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.get('showToggleModal'), false);\n      assert.dom('.modal').doesNotExist();\n      await (0, _testHelpers.click)('.x-toggle-btn');\n      assert.equal(this.get('showToggleModal'), true); // Make sure there is only 1 modal\n\n      assert.dom('.modal').exists({\n        count: 1\n      });\n      assert.dom('.modal-title').hasText('Disable the \"main\" job?');\n      assert.dom('.message input').exists({\n        count: 1\n      });\n      assert.dom('.toggle-form__cancel').hasText('Cancel');\n      assert.dom('.toggle-form__create').hasText('Confirm');\n    });\n    (0, _qunit.test)('it handles job disabling', async function (assert) {\n      const main = Ember.Object.create({\n        id: '1234',\n        name: 'main',\n        state: 'ENABLED',\n        stateChanger: 'tkyi',\n        stateChangeMessage: 'testing',\n        isDisabled: false\n      });\n      this.set('mockPipeline', Ember.Object.create({\n        appId: 'foo/bar',\n        scmUri: 'github.com:84604643:master',\n        id: 'abc1234'\n      }));\n      this.set('mockJobs', Ember.A([main]));\n      this.set('username', 'tkyi');\n      this.set('setJobStatsMock', (id, state, name) => {\n        assert.equal(id, '1234');\n        assert.equal(state, 'DISABLED');\n        assert.equal(name, 'tkyi');\n        main.set('isDisabled', state === 'DISABLED');\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"33hIy3IP\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-options\\\",null,[[\\\"username\\\",\\\"pipeline\\\",\\\"setJobStatus\\\",\\\"jobs\\\"],[[25,[\\\"username\\\"]],[25,[\\\"mockPipeline\\\"]],[25,[\\\"setJobStatsMock\\\"]],[25,[\\\"mockJobs\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.x-toggle-container').hasClass('x-toggle-container-checked');\n      await (0, _testHelpers.click)('.x-toggle-btn');\n      await (0, _testHelpers.click)('.toggle-form__create');\n      assert.dom('section.jobs h4').hasText('main');\n      assert.dom('.x-toggle-container').hasNoClass('x-toggle-container-checked');\n      assert.dom('section.jobs p').hasText('Toggle to disable or enable the job.');\n      assert.dom('section.jobs li:nth-child(2) p').hasText('Disabled by tkyi: testing');\n    });\n    (0, _qunit.test)('it handles job enabling', async function (assert) {\n      const main = Ember.Object.create({\n        id: '1234',\n        name: 'main',\n        isDisabled: true\n      });\n      this.set('mockPipeline', Ember.Object.create({\n        appId: 'foo/bar',\n        scmUri: 'github.com:84604643:master',\n        id: 'abc1234'\n      }));\n      this.set('mockJobs', Ember.A([main]));\n      this.set('setJobStatsMock', (id, state) => {\n        assert.equal(id, '1234');\n        assert.equal(state, 'ENABLED');\n        main.set('isDisabled', state === 'DISABLED');\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"cuVz8qZU\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-options\\\",null,[[\\\"pipeline\\\",\\\"setJobStatus\\\",\\\"jobs\\\"],[[25,[\\\"mockPipeline\\\"]],[25,[\\\"setJobStatsMock\\\"]],[25,[\\\"mockJobs\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('section.jobs h4').hasText('main');\n      assert.dom('section.jobs p').hasText('Toggle to disable or enable the job.');\n      assert.dom('.x-toggle-container').hasNoClass('x-toggle-container-checked');\n      await (0, _testHelpers.click)('.x-toggle-btn');\n      await (0, _testHelpers.click)('.toggle-form__create');\n      assert.dom('.x-toggle-container').hasClass('x-toggle-container-checked'); // return settled().then(() => {\n      // });\n    });\n    (0, _qunit.test)('it handles pipeline remove flow', async function (assert) {\n      this.set('mockPipeline', Ember.Object.create({\n        appId: 'foo/bar',\n        scmUri: 'github.com:84604643:master',\n        id: 'abc1234'\n      }));\n      this.set('removePipelineMock', () => {\n        assert.ok(true);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"cZ5l+voy\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-options\\\",null,[[\\\"pipeline\\\",\\\"onRemovePipeline\\\"],[[25,[\\\"mockPipeline\\\"]],[25,[\\\"removePipelineMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('section.danger h4').hasText('Remove this pipeline');\n      await (0, _testHelpers.click)('section.danger a');\n      assert.dom('section.danger h4').hasText('Are you absolutely sure?');\n      assert.dom('section.danger a').exists({\n        count: 2\n      });\n      await (0, _testHelpers.click)('section.danger a');\n      assert.dom('section.danger h4').hasText('Remove this pipeline');\n      await (0, _testHelpers.click)('section.danger a');\n      assert.dom('section.danger h4').hasText('Are you absolutely sure?');\n      await (0, _testHelpers.click)('section.danger a:last-child');\n      assert.dom('section.danger p').hasText('Please wait...');\n    });\n    (0, _qunit.test)('it syncs the webhooks', async function (assert) {\n      syncService = Ember.Service.extend({\n        syncRequests(pipelineId, syncPath) {\n          assert.equal(pipelineId, 1);\n          assert.equal(syncPath, 'webhooks');\n          return Ember.RSVP.resolve({});\n        }\n\n      });\n      this.owner.register('service:sync', syncService);\n      this.set('mockPipeline', Ember.Object.create({\n        appId: 'foo/bar',\n        scmUri: 'github.com:84604643:master',\n        id: '1'\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"D9dM1lQj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-options\\\",null,[[\\\"pipeline\\\"],[[25,[\\\"mockPipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('section.sync a');\n    });\n    (0, _qunit.test)('it syncs the pullrequests', async function (assert) {\n      syncService = Ember.Service.extend({\n        syncRequests(pipelineId, syncPath) {\n          assert.equal(pipelineId, 1);\n          assert.equal(syncPath, 'pullrequests');\n          return Ember.RSVP.resolve({});\n        }\n\n      });\n      this.owner.register('service:sync', syncService);\n      this.set('mockPipeline', Ember.Object.create({\n        appId: 'foo/bar',\n        scmUri: 'github.com:84604643:master',\n        id: '1'\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"D9dM1lQj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-options\\\",null,[[\\\"pipeline\\\"],[[25,[\\\"mockPipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('section.sync li:nth-child(2) a');\n    });\n    (0, _qunit.test)('it syncs the pipeline', async function (assert) {\n      syncService = Ember.Service.extend({\n        syncRequests(pipelineId, syncPath) {\n          assert.equal(pipelineId, 1);\n          assert.equal(syncPath, undefined);\n          return Ember.RSVP.resolve({});\n        }\n\n      });\n      this.owner.register('service:sync', syncService);\n      this.set('mockPipeline', Ember.Object.create({\n        appId: 'foo/bar',\n        scmUri: 'github.com:84604643:master',\n        id: '1'\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"D9dM1lQj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-options\\\",null,[[\\\"pipeline\\\"],[[25,[\\\"mockPipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('section.sync li:nth-child(3) a');\n    });\n    (0, _qunit.test)('it fails to sync the pipeline', async function (assert) {\n      syncService = Ember.Service.extend({\n        syncRequests() {\n          return Ember.RSVP.reject('something conflicting');\n        }\n\n      });\n      this.owner.register('service:sync', syncService);\n      this.set('mockPipeline', Ember.Object.create({\n        appId: 'foo/bar',\n        scmUri: 'github.com:84604643:master',\n        id: '1'\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"D9dM1lQj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-options\\\",null,[[\\\"pipeline\\\"],[[25,[\\\"mockPipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('section.sync li:nth-child(3) a');\n      assert.dom('.alert > span').hasText('something conflicting');\n    });\n    (0, _qunit.test)('it does not render pipeline and danger for child pipeline', async function (assert) {\n      this.set('mockPipeline', Ember.Object.create({\n        appId: 'foo/bar',\n        scmUri: 'github.com:84604643:master',\n        id: 'abc1234',\n        configPipelineId: '123'\n      }));\n      this.set('mockJobs', Ember.A([Ember.Object.create({\n        id: '3456',\n        name: 'B',\n        isDisabled: false\n      }), Ember.Object.create({\n        id: '1234',\n        name: 'main',\n        isDisabled: false\n      }), Ember.Object.create({\n        id: '2345',\n        name: 'A',\n        isDisabled: false\n      })]));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"p6UKDpKb\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-options\\\",null,[[\\\"pipeline\\\",\\\"jobs\\\"],[[25,[\\\"mockPipeline\\\"]],[25,[\\\"mockJobs\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      })); // Pipeline should not render\n\n      assert.dom('section.pipeline h3').doesNotExist(); // Jobs should render\n\n      assert.dom('section.jobs h3').hasText('Jobs');\n      assert.dom('section.jobs li').exists({\n        count: 4\n      });\n      assert.dom('section.jobs li:nth-child(2) h4').hasText('A');\n      assert.dom('section.jobs li:nth-child(3) h4').hasText('B');\n      assert.dom('section.jobs li:nth-child(4) h4').hasText('main'); // eslint-disable-next-line max-len\n\n      assert.dom('section.jobs p').hasText('Toggle to disable or enable the job.');\n      assert.dom('.x-toggle-container').hasClass('x-toggle-container-checked'); // Sync should render\n\n      assert.dom('section.sync li:first-child h4').hasText('SCM webhooks');\n      assert.dom('section.sync li:nth-child(2) h4').hasText('Pull requests');\n      assert.dom('section.sync li:last-child h4').hasText('Pipeline'); // Cache should render\n\n      assert.dom('section.cache li:first-child h4').hasText('Pipeline');\n      assert.dom('section.cache li:nth-child(2) h4').hasText('Job A');\n      assert.dom('section.cache li:nth-child(3) h4').hasText('Job B');\n      assert.dom('section.cache li:last-child h4').hasText('Job main'); // Danger Zone should not render\n\n      assert.dom('section.danger h3').doesNotExist();\n    });\n    (0, _qunit.test)('it clears the pipeline cache', async function (assert) {\n      cacheService = Ember.Service.extend({\n        clearCache(config) {\n          assert.equal(config.scope, 'pipelines');\n          assert.equal(config.id, '1');\n          return Ember.RSVP.resolve({});\n        }\n\n      });\n      this.owner.register('service:cache', cacheService);\n      this.set('mockPipeline', Ember.Object.create({\n        appId: 'foo/bar',\n        scmUri: 'github.com:84604643:master',\n        id: '1'\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"D9dM1lQj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-options\\\",null,[[\\\"pipeline\\\"],[[25,[\\\"mockPipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('section.cache a');\n    });\n    (0, _qunit.test)('it clears the job cache', async function (assert) {\n      cacheService = Ember.Service.extend({\n        clearCache(config) {\n          assert.equal(config.scope, 'jobs');\n          assert.equal(config.id, '2345');\n          return Ember.RSVP.resolve({});\n        }\n\n      });\n      this.owner.register('service:cache', cacheService);\n      this.set('mockPipeline', Ember.Object.create({\n        appId: 'foo/bar',\n        scmUri: 'github.com:84604643:master',\n        id: '1'\n      }));\n      this.set('mockJobs', Ember.A([Ember.Object.create({\n        id: '3456',\n        name: 'B',\n        isDisabled: false\n      }), Ember.Object.create({\n        id: '1234',\n        name: 'main',\n        isDisabled: false\n      }), Ember.Object.create({\n        id: '2345',\n        name: 'A',\n        isDisabled: false\n      })]));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"p6UKDpKb\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-options\\\",null,[[\\\"pipeline\\\",\\\"jobs\\\"],[[25,[\\\"mockPipeline\\\"]],[25,[\\\"mockJobs\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('section.cache li:nth-child(2) a');\n    });\n    (0, _qunit.test)('it fails to clear the cache for the pipeline', async function (assert) {\n      cacheService = Ember.Service.extend({\n        clearCache() {\n          return Ember.RSVP.reject('something conflicting');\n        }\n\n      });\n      this.owner.register('service:cache', cacheService);\n      this.set('mockPipeline', Ember.Object.create({\n        appId: 'foo/bar',\n        scmUri: 'github.com:84604643:master',\n        id: '1'\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"D9dM1lQj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-options\\\",null,[[\\\"pipeline\\\"],[[25,[\\\"mockPipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('section.cache a');\n      assert.dom('.alert > span').hasText('something conflicting');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/pipeline-pr-list/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | pipeline pr list', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      const jobs = [Ember.Object.create({\n        id: 'abcd',\n        name: 'PR-1234:main',\n        createTimeWords: 'now',\n        title: 'update readme',\n        username: 'anonymous',\n        builds: [{\n          id: '1234',\n          status: 'SUCCESS'\n        }]\n      }), Ember.Object.create({\n        id: 'efgh',\n        name: 'revert',\n        createTimeWords: 'now',\n        title: 'revert PR-1234',\n        username: 'suomynona',\n        builds: [{\n          id: '1235',\n          status: 'FAILURE'\n        }]\n      })];\n      this.set('jobsMock', jobs);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"zSCcqWwz\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-pr-list\\\",null,[[\\\"jobs\\\"],[[25,[\\\"jobsMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.view .view .detail').exists({\n        count: 2\n      });\n      assert.dom('.title').hasText('update readme');\n      assert.dom('.by').hasText('anonymous');\n    });\n    (0, _qunit.test)('it renders start build for restricted PR pipeline', async function (assert) {\n      const jobs = [Ember.Object.create({\n        id: 'abcd',\n        name: 'PR-1234:main',\n        createTimeWords: 'now',\n        title: 'update readme',\n        username: 'anonymous',\n        builds: []\n      })];\n      this.set('jobsMock', jobs);\n      this.set('isRestricted', true);\n      this.set('startBuild', Function.prototype);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"c0YDRwEm\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-pr-list\\\",null,[[\\\"jobs\\\",\\\"isRestricted\\\",\\\"startBuild\\\"],[[25,[\\\"jobsMock\\\"]],[25,[\\\"isRestricted\\\"]],[25,[\\\"startBuild\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.view .view .detail').doesNotExist();\n      assert.dom('.title').hasText('update readme');\n      assert.dom('.by').hasText('anonymous');\n      assert.dom('.view .startButton').exists({\n        count: 1\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/pipeline-pr-view/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | pipeline pr view', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders a successful PR', async function (assert) {\n      const job = Ember.Object.create({\n        id: 'abcd',\n        name: 'PR-1234:main',\n        createTimeWords: 'now',\n        title: 'update readme',\n        username: 'anonymous',\n        builds: [{\n          id: '1234',\n          status: 'SUCCESS',\n          startTimeWords: 'now'\n        }]\n      });\n      this.set('jobMock', job);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"cF1Ffj02\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-pr-view\\\",null,[[\\\"job\\\"],[[25,[\\\"jobMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.SUCCESS').exists({\n        count: 1\n      });\n      assert.equal((0, _testHelpers.find)('.detail').textContent.trim().replace(/\\s{2,}/g, ' '), 'main Started now');\n      assert.dom('.date').hasText('Started now');\n      assert.dom('.status .fa-check-circle-o').exists({\n        count: 1\n      });\n    }); // When a user sets a job to unstable, it should show unstable icon\n\n    (0, _qunit.test)('it renders an unstable PR', async function (assert) {\n      const job = Ember.Object.create({\n        id: 'abcd',\n        name: 'PR-1234:main',\n        createTimeWords: 'now',\n        title: 'update readme',\n        username: 'anonymous',\n        builds: [{\n          id: '1234',\n          status: 'UNSTABLE',\n          startTimeWords: 'now'\n        }]\n      });\n      this.set('jobMock', job);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"cF1Ffj02\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-pr-view\\\",null,[[\\\"job\\\"],[[25,[\\\"jobMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.UNSTABLE').exists({\n        count: 1\n      });\n      assert.dom('.fa-exclamation-circle').exists({\n        count: 1\n      });\n    });\n    (0, _qunit.test)('it renders a failed PR', async function (assert) {\n      const job = Ember.Object.create({\n        id: 'abcd',\n        name: 'PR-1234:main',\n        createTimeWords: 'now',\n        title: 'update readme',\n        username: 'anonymous',\n        builds: [{\n          id: '1234',\n          status: 'FAILURE',\n          startTimeWords: 'now'\n        }]\n      });\n      this.set('jobMock', job);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"cF1Ffj02\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-pr-view\\\",null,[[\\\"job\\\"],[[25,[\\\"jobMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.FAILURE').exists({\n        count: 1\n      });\n      assert.dom('.fa-times-circle-o').exists({\n        count: 1\n      });\n    });\n    (0, _qunit.test)('it renders a queued PR', async function (assert) {\n      const job = Ember.Object.create({\n        id: 'abcd',\n        name: 'PR-1234:main',\n        createTimeWords: 'now',\n        title: 'update readme',\n        username: 'anonymous',\n        builds: [{\n          id: '1234',\n          status: 'QUEUED',\n          startTimeWords: 'now'\n        }]\n      });\n      this.set('jobMock', job);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"cF1Ffj02\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-pr-view\\\",null,[[\\\"job\\\"],[[25,[\\\"jobMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.QUEUED').exists({\n        count: 1\n      });\n      assert.dom('.fa-spinner').exists({\n        count: 1\n      });\n    });\n    (0, _qunit.test)('it renders a running PR', async function (assert) {\n      const job = Ember.Object.create({\n        id: 'abcd',\n        name: 'PR-1234:main',\n        createTimeWords: 'now',\n        title: 'update readme',\n        username: 'anonymous',\n        builds: [{\n          id: '1234',\n          status: 'RUNNING',\n          startTimeWords: 'now'\n        }]\n      });\n      this.set('jobMock', job);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"cF1Ffj02\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-pr-view\\\",null,[[\\\"job\\\"],[[25,[\\\"jobMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.RUNNING').exists({\n        count: 1\n      });\n      assert.dom('.fa-spinner').exists({\n        count: 1\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/pipeline-rootdir/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | pipeline-rootdir', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"0z9mxfP2\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"pipeline-rootdir\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"O47FbMON\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-rootdir\\\",null,[[\\\"hasRootDir\\\"],[false]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.checkbox-input').exists({\n        count: 1\n      });\n      assert.dom('.root-dir').doesNotExist();\n    });\n    (0, _qunit.test)('it renders with rootDir', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"0z9mxfP2\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"pipeline-rootdir\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"K/jiYQDv\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-rootdir\\\",null,[[\\\"hasRootDir\\\",\\\"rootDir\\\"],[true,\\\"lib\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.root-dir').hasValue('lib');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/pipeline-secret-settings/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | pipeline secret settings', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      const testSecret = Ember.Object.create({\n        name: 'TEST_SECRET',\n        pipelineId: 123245,\n        value: 'banana',\n        allowInPR: false\n      });\n      this.set('mockSecrets', [testSecret]);\n      const testPipeline = Ember.Object.create({\n        id: '123245'\n      });\n      this.set('mockPipeline', testPipeline);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"w2wqeaAb\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-secret-settings\\\",null,[[\\\"secrets\\\",\\\"pipeline\\\"],[[25,[\\\"mockSecrets\\\"]],[25,[\\\"mockPipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('p').hasText('User secrets must also be added to the Screwdriver YAML.'); // the table is present\n\n      assert.dom('table').exists({\n        count: 1\n      });\n      assert.dom('tbody tr').exists({\n        count: 1\n      });\n      assert.dom('tfoot tr').exists({\n        count: 1\n      }); // eye-icons are present and have fa-eye class as default\n\n      assert.dom('tbody i').hasClass('fa-eye');\n      assert.dom('tfoot i').hasClass('fa-eye'); // the type of input is a password as default\n\n      assert.dom('tbody .pass input').hasAttribute('type', 'password');\n      assert.dom('tfoot .pass input').hasAttribute('type', 'password');\n    });\n    (0, _qunit.test)('it updates the add button properly', async function (assert) {\n      this.set('mockPipeline', {\n        id: 'abcd'\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"fxAP5KzK\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-secret-settings\\\",null,[[\\\"pipeline\\\"],[[25,[\\\"mockPipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      })); // starts disabled\n\n      assert.dom('tfoot button').isDisabled(); // disabled when no value\n\n      await (0, _testHelpers.fillIn)('.key input', 'SECRET_KEY');\n      await (0, _testHelpers.triggerKeyEvent)('.key input', 'keyup', 'ENTER');\n      assert.dom('tfoot button').isDisabled(); // disabled when no key\n\n      await (0, _testHelpers.fillIn)('.key input', '');\n      await (0, _testHelpers.triggerKeyEvent)('.key input', 'keyup', 'ENTER');\n      await (0, _testHelpers.fillIn)('.pass input', 'SECRET_VAL');\n      await (0, _testHelpers.triggerKeyEvent)('.pass input', 'keyup', 'ENTER');\n      assert.dom('tfoot button').isDisabled(); // enabled when both present\n\n      await (0, _testHelpers.fillIn)('.key input', 'SECRET_KEY');\n      await (0, _testHelpers.triggerKeyEvent)('.key input', 'keyup', 'ENTER');\n      assert.dom('tfoot button').isNotDisabled(); // disabled again when no key\n\n      await (0, _testHelpers.fillIn)('.key input', '');\n      await (0, _testHelpers.triggerKeyEvent)('.key input', 'keyup', 'ENTER');\n      assert.dom('tfoot button').isDisabled();\n    });\n    (0, _qunit.test)('it calls action to create secret', async function (assert) {\n      this.set('mockPipeline', {\n        id: 'abcd'\n      });\n      this.set('externalAction', (name, value, id) => {\n        assert.equal(name, 'SECRET_KEY');\n        assert.equal(value, 'SECRET_VAL');\n        assert.equal(id, 'abcd');\n      }); // eslint-disable-next-line max-len\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"LFhi5wVm\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-secret-settings\\\",null,[[\\\"pipeline\\\",\\\"onCreateSecret\\\"],[[25,[\\\"mockPipeline\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"externalAction\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.fillIn)('.key input', 'SECRET_KEY');\n      await (0, _testHelpers.triggerKeyEvent)('.key input', 'keyup', 'ENTER');\n      await (0, _testHelpers.fillIn)('.pass input', 'SECRET_VAL');\n      await (0, _testHelpers.triggerKeyEvent)('.pass input', 'keyup', 'ENTER');\n      await (0, _testHelpers.click)('tfoot button'); // and clears the new secret form elements\n\n      assert.dom('.key input').hasValue('');\n      assert.dom('.pass input').hasValue('');\n      assert.dom('tfoot button').isDisabled('not disabled');\n    });\n    (0, _qunit.test)('it displays an error', async function (assert) {\n      this.set('mockPipeline', {\n        id: 'abcd'\n      });\n      this.set('externalAction', () => {\n        assert.fail('should not get here');\n      }); // eslint-disable-next-line max-len\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"LFhi5wVm\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-secret-settings\\\",null,[[\\\"pipeline\\\",\\\"onCreateSecret\\\"],[[25,[\\\"mockPipeline\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"externalAction\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.fillIn)('.key input', '0banana');\n      await (0, _testHelpers.triggerKeyEvent)('.key input', 'keyup', 'ENTER');\n      await (0, _testHelpers.fillIn)('.pass input', '0value');\n      await (0, _testHelpers.triggerKeyEvent)('.pass input', 'keyup', 'ENTER');\n      await (0, _testHelpers.click)('tfoot button'); // and clears the new secret form elements\n\n      assert.dom('.alert > span').hasText('Secret keys can only consist of numbers, uppercase letters and underscores, ' + 'and cannot begin with a number.');\n    });\n    (0, _qunit.test)('it sorts secrets by name alphabetically', async function (assert) {\n      const testSecret1 = Ember.Object.create({\n        name: 'FOO',\n        pipelineId: 123245,\n        value: 'banana',\n        allowInPR: false\n      });\n      const testSecret2 = Ember.Object.create({\n        name: 'BAR',\n        pipelineId: 123245,\n        value: 'banana',\n        allowInPR: false\n      });\n      const testSecret3 = Ember.Object.create({\n        name: 'ZOO',\n        pipelineId: 123245,\n        value: 'banana',\n        allowInPR: false\n      });\n      this.set('mockSecrets', [testSecret1, testSecret2, testSecret3]);\n      const testPipeline = Ember.Object.create({\n        id: '123245'\n      });\n      this.set('mockPipeline', testPipeline);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"w2wqeaAb\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-secret-settings\\\",null,[[\\\"secrets\\\",\\\"pipeline\\\"],[[25,[\\\"mockSecrets\\\"]],[25,[\\\"mockPipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      })); // secrets are sorted by name\n\n      assert.dom((0, _testHelpers.find)('tbody tr:first-child td:first-child')).hasText('BAR');\n      assert.dom((0, _testHelpers.find)('tbody tr:nth-child(2) td:first-child')).hasText('FOO');\n      assert.dom((0, _testHelpers.find)('tbody tr:nth-child(3) td:first-child')).hasText('ZOO');\n    });\n    (0, _qunit.test)('it renders differently for a child pipeline', async function (assert) {\n      const testSecret = Ember.Object.create({\n        name: 'FOO',\n        pipelineId: 123245,\n        value: 'banana',\n        allowInPR: false\n      });\n      this.set('mockSecrets', [testSecret]);\n      const testPipeline = Ember.Object.create({\n        id: '123',\n        configPipelineId: '123245'\n      });\n      this.set('mockPipeline', testPipeline);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"w2wqeaAb\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-secret-settings\\\",null,[[\\\"secrets\\\",\\\"pipeline\\\"],[[25,[\\\"mockSecrets\\\"]],[25,[\\\"mockPipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('p').hasText('Secrets are inherited from the parent pipeline. You may override a secret or revert it back to its original value.'); // Secrets are rendered but footer is not\n\n      assert.dom('table').exists({\n        count: 1\n      });\n      assert.dom('tbody tr').exists({\n        count: 1\n      });\n      assert.dom('tfoot tr').doesNotExist();\n    });\n    (0, _qunit.test)('it toggles eye-icon and input type', async function (assert) {\n      const testSecret = Ember.Object.create({\n        name: 'TEST_SECRET',\n        pipelineId: 123245,\n        value: 'banana',\n        allowInPR: false\n      });\n      this.set('mockSecrets', [testSecret]);\n      const testPipeline = Ember.Object.create({\n        id: '123245'\n      });\n      this.set('mockPipeline', testPipeline);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"w2wqeaAb\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-secret-settings\\\",null,[[\\\"secrets\\\",\\\"pipeline\\\"],[[25,[\\\"mockSecrets\\\"]],[25,[\\\"mockPipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('tbody i');\n      await (0, _testHelpers.click)('tfoot i');\n      assert.dom('tbody i').hasClass('fa-eye-slash');\n      assert.dom('tbody .pass input').hasAttribute('type', 'text');\n      assert.dom('tfoot i').hasClass('fa-eye-slash');\n      assert.dom('tfoot .pass input').hasAttribute('type', 'text');\n      await (0, _testHelpers.click)('tbody i');\n      await (0, _testHelpers.click)('tfoot i');\n      assert.dom('tbody i').hasClass('fa-eye');\n      assert.dom('tbody .pass input').hasAttribute('type', 'password');\n      assert.dom('tfoot i').hasClass('fa-eye');\n      assert.dom('tfoot .pass input').hasAttribute('type', 'password');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/pipeline-start/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | pipeline start', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      assert.expect(2);\n      this.set('onStartBuild', () => {\n        assert.ok(true);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Z4RFVbtS\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-start\\\",null,[[\\\"startBuild\\\"],[[25,[\\\"onStartBuild\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('button').hasText('Start');\n      await (0, _testHelpers.click)('button');\n    });\n    (0, _qunit.test)('it renders start PR', async function (assert) {\n      assert.expect(3); // Starting PR job requires the PR number and PR jobs\n\n      this.set('jobs', ['job1', 'job2']);\n      this.set('onPRStartBuild', (prNum, prJobs) => {\n        assert.equal(prNum, 5);\n        assert.equal(prJobs.length, 2);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"wxT485kO\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-start\\\",null,[[\\\"startBuild\\\",\\\"prNum\\\",\\\"jobs\\\"],[[25,[\\\"onPRStartBuild\\\"]],5,[25,[\\\"jobs\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('button').hasText('Start PR-5');\n      await (0, _testHelpers.click)('button');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/pipeline-workflow/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  const GRAPH = {\n    nodes: [{\n      name: '~pr'\n    }, {\n      name: '~commit'\n    }, {\n      id: 1,\n      name: 'main'\n    }, {\n      id: 2,\n      name: 'batman'\n    }, {\n      id: 3,\n      name: 'robin'\n    }],\n    edges: [{\n      src: '~pr',\n      dest: 'main'\n    }, {\n      src: '~commit',\n      dest: 'main'\n    }, {\n      src: 'main',\n      dest: 'batman'\n    }, {\n      src: 'batman',\n      dest: 'robin'\n    }]\n  };\n  const BUILDS = [{\n    jobId: 1,\n    id: 4,\n    status: 'SUCCESS'\n  }, {\n    jobId: 2,\n    id: 5,\n    status: 'SUCCESS'\n  }, {\n    jobId: 3,\n    id: 6,\n    status: 'FAILURE'\n  }];\n  (0, _qunit.module)('Integration | Component | pipeline workflow', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders an aggregate', async function (assert) {\n      const jobs = ['main', 'batman', 'robin'].map(name => {\n        const j = {\n          name,\n          isDisabled: false,\n          lastBuild: Ember.Object.create({\n            id: 12345,\n            status: 'SUCCESS',\n            sha: 'abcd1234'\n          })\n        };\n        return Ember.Object.create(j);\n      });\n      this.set('jobsMock', jobs);\n      this.set('graph', GRAPH);\n      this.set('selected', 'aggregate');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"9nwtdYHZ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-workflow\\\",null,[[\\\"workflowGraph\\\",\\\"jobs\\\",\\\"selected\\\"],[[25,[\\\"graph\\\"]],[25,[\\\"jobsMock\\\"]],[25,[\\\"selected\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.graph-node').exists({\n        count: 5\n      });\n      assert.dom('.workflow-tooltip').exists({\n        count: 1\n      });\n    });\n    (0, _qunit.test)('it renders an event', async function (assert) {\n      this.set('selected', 1);\n      this.set('obj', Ember.Object.create({\n        builds: Ember.RSVP.resolve(BUILDS),\n        workflowGraph: GRAPH,\n        startFrom: '~commit',\n        causeMessage: 'test'\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"gXj4XTo+\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"pipeline-workflow\\\",null,[[\\\"selectedEventObj\\\",\\\"selected\\\"],[[25,[\\\"obj\\\"]],[25,[\\\"selected\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.graph-node').exists({\n        count: 5\n      });\n      assert.dom('.workflow-tooltip').exists({\n        count: 1\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/search-list/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"screwdriver-ui/tests/helpers/inject-session\", \"screwdriver-ui/tests/helpers/inject-scm\"], function (_qunit, _emberQunit, _testHelpers, _injectSession, _injectScm) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | search list', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders without collections', async function (assert) {\n      (0, _injectScm.default)(this);\n      const pipelines = [Ember.Object.create({\n        id: 2,\n        appId: 'batman/tumbler',\n        branch: 'waynecorp',\n        scmContext: 'bitbucket:bitbucket.org'\n      }), Ember.Object.create({\n        id: 1,\n        appId: 'foo/bar',\n        branch: 'master',\n        scmContext: 'github:github.com'\n      })];\n      const collections = [Ember.Object.create({\n        id: 1,\n        name: 'collection1',\n        description: 'description1',\n        pipelineIds: [1, 2, 3]\n      })];\n      this.set('pipelineList', pipelines);\n      this.set('collections', collections);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WZgyKoBg\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"search-list\\\",null,[[\\\"pipelines\\\",\\\"collections\\\"],[[25,[\\\"pipelineList\\\"]],[25,[\\\"collections\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('tbody tr:first-child td.appId').hasText('batman/tumbler');\n      assert.dom('tbody tr:first-child td.branch').hasText('waynecorp');\n      assert.dom('tbody tr:first-child td.account').hasText('bitbucket.org');\n      assert.dom('tbody tr:nth-child(2) td.appId').hasText('foo/bar');\n      assert.dom('tbody tr:nth-child(2) td.branch').hasText('master');\n      assert.dom('tbody tr:nth-child(2) td.account').hasText('github.com');\n      assert.dom('.add-to-collection').doesNotExist();\n    });\n    (0, _qunit.test)('it renders with collections', async function (assert) {\n      (0, _injectSession.default)(this);\n      (0, _injectScm.default)(this);\n      const pipelines = [Ember.Object.create({\n        id: 2,\n        appId: 'batman/tumbler',\n        branch: 'waynecorp',\n        scmContext: 'bitbucket:bitbucket.org'\n      }), Ember.Object.create({\n        id: 1,\n        appId: 'foo/bar',\n        branch: 'master',\n        scmContext: 'github:github.com'\n      })];\n      const collections = [Ember.Object.create({\n        id: 1,\n        name: 'collection1',\n        description: 'description1',\n        pipelineIds: [1, 2, 3]\n      }), Ember.Object.create({\n        id: 2,\n        name: 'collection2',\n        description: 'description2',\n        pipelineIds: [4, 5, 6]\n      })];\n      this.set('pipelineList', pipelines);\n      this.set('collections', collections);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WZgyKoBg\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"search-list\\\",null,[[\\\"pipelines\\\",\\\"collections\\\"],[[25,[\\\"pipelineList\\\"]],[25,[\\\"collections\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('tbody tr:first-child td.appId').hasText('batman/tumbler');\n      assert.dom('tbody tr:first-child td.branch').hasText('waynecorp');\n      assert.dom('tbody tr:first-child td.account').hasText('bitbucket.org');\n      assert.dom('tbody tr:nth-child(2) td.appId').hasText('foo/bar');\n      assert.dom('tbody tr:nth-child(2) td.branch').hasText('master');\n      assert.dom('tbody tr:nth-child(2) td.account').hasText('github.com');\n      assert.dom('.add-to-collection').exists({\n        count: 2\n      });\n      await (0, _testHelpers.click)('td.add .dropdown-toggle');\n      assert.dom('td.add .dropdown-menu li:first-child span').hasText('collection1');\n      assert.dom('td.add .dropdown-menu li:nth-child(2) span').hasText('collection2');\n      assert.dom('td.add .dropdown-menu li:nth-child(3) span').hasText('CREATE');\n    });\n    (0, _qunit.test)('it filters the list', async function (assert) {\n      (0, _injectScm.default)(this);\n      const pipelines = [Ember.Object.create({\n        id: 1,\n        appId: 'foo/bar',\n        branch: 'master',\n        scmContext: 'github:github.com'\n      })];\n      this.set('pipelineList', pipelines);\n      this.set('q', 'foo');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"GvuHztFc\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"search-list\\\",null,[[\\\"pipelines\\\",\\\"query\\\"],[[25,[\\\"pipelineList\\\"]],[25,[\\\"q\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('tr').exists({\n        count: 2\n      });\n      assert.dom('td.appId').hasText('foo/bar');\n      assert.dom('td.branch').hasText('master');\n      assert.dom('td.account').hasText('github.com');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/secret-view/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | secret view', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      const testSecret = Ember.Object.create({\n        name: 'TEST_SECRET',\n        pipelineId: 123245,\n        value: 'banana',\n        allowInPR: false\n      });\n      this.set('mockSecret', testSecret);\n      const testPipeline = Ember.Object.create({\n        id: '123245'\n      });\n      this.set('mockPipeline', testPipeline);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"3FUKuuUQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"secret-view\\\",null,[[\\\"secret\\\",\\\"pipeline\\\"],[[25,[\\\"mockSecret\\\"]],[25,[\\\"mockPipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.name').hasText('TEST_SECRET');\n      assert.dom('.pass input').hasAttribute('placeholder', 'Protected');\n      assert.dom('.pass input').hasNoValue();\n      assert.dom('.allow input').isNotChecked();\n      assert.dom('button').hasText('Delete'); // button value changes when user types a new value\n\n      await (0, _testHelpers.fillIn)('.pass input', 'banana');\n      await (0, _testHelpers.triggerKeyEvent)('.pass input', 'keyup', 'ENTER');\n      assert.dom('button').hasText('Update'); // button value changes when user types a new value\n\n      await (0, _testHelpers.fillIn)('.pass input', '');\n      await (0, _testHelpers.triggerKeyEvent)('.pass input', 'keyup', 'ENTER');\n      assert.dom('button').hasText('Delete'); // button value changes when user click the checkbox\n\n      await (0, _testHelpers.click)('.allow input');\n      assert.dom('button').hasText('Update'); // button value changes when user click the checkbox again to change it back\n\n      await (0, _testHelpers.click)('.allow input');\n      assert.dom('button').hasText('Delete');\n    });\n    (0, _qunit.test)('it trys to delete a secret', async function (assert) {\n      assert.expect(3);\n      const testPipeline = Ember.Object.create({\n        id: '123245'\n      });\n      this.set('mockSecret', Ember.Object.extend({\n        destroyRecord() {\n          // destroy called\n          assert.ok(true);\n          return Promise.resolve(null);\n        },\n\n        save() {\n          // update called: Fail!\n          assert.ok(false);\n        }\n\n      }).create({\n        name: 'TEST_SECRET',\n        pipelineId: 123245,\n        value: null,\n        allowInPR: false\n      }));\n      this.set('mockPipeline', testPipeline);\n      this.set('secrets', {\n        store: {\n          unloadRecord: secret => {\n            assert.equal(secret.name, 'TEST_SECRET');\n          }\n        },\n        reload: () => {\n          // reload called\n          assert.ok(true);\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"1xfurg1L\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"secret-view\\\",null,[[\\\"secret\\\",\\\"secrets\\\",\\\"pipeline\\\"],[[25,[\\\"mockSecret\\\"]],[25,[\\\"secrets\\\"]],[25,[\\\"mockPipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('button');\n    });\n    (0, _qunit.test)('it saves changes to a secret', async function (assert) {\n      assert.expect(2);\n      const testPipeline = Ember.Object.create({\n        id: '123245'\n      }); // Setting up model so `set` works as expected\n\n      this.set('mockSecret', Ember.Object.extend({\n        destroyRecord() {\n          // destroy called: Fail!\n          assert.ok(false);\n        },\n\n        save() {\n          // update called\n          assert.equal(this.get('value'), 'banana');\n          assert.equal(this.get('allowInPR'), true);\n        }\n\n      }).create({\n        name: 'TEST_SECRET',\n        pipelineId: 123245,\n        value: null,\n        allowInPR: false\n      }));\n      this.set('mockPipeline', testPipeline);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"3FUKuuUQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"secret-view\\\",null,[[\\\"secret\\\",\\\"pipeline\\\"],[[25,[\\\"mockSecret\\\"]],[25,[\\\"mockPipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.fillIn)('.pass input', 'banana');\n      await (0, _testHelpers.triggerKeyEvent)('.pass input', 'keyup', 'ENTER');\n      await (0, _testHelpers.click)('.allow input');\n      await (0, _testHelpers.click)('button');\n    });\n    (0, _qunit.test)('it renders secrets for child pipeline', async function (assert) {\n      assert.expect(2);\n      const testSecret = Ember.Object.create({\n        name: 'TEST_SECRET',\n        pipelineId: '123245',\n        value: 'banana',\n        allowInPR: false\n      });\n      const testPipeline = Ember.Object.create({\n        id: '123',\n        configPipelineId: '123245'\n      });\n      this.set('mockSecret', testSecret);\n      this.set('mockPipeline', testPipeline);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"3FUKuuUQ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"secret-view\\\",null,[[\\\"secret\\\",\\\"pipeline\\\"],[[25,[\\\"mockSecret\\\"]],[25,[\\\"mockPipeline\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.pass input').hasAttribute('placeholder', 'Inherited from parent pipeline');\n      assert.dom('button').hasText('Override');\n    });\n    (0, _qunit.test)('it overrides a secret for a child pipeline', async function (assert) {\n      assert.expect(3);\n      const testSecret = Ember.Object.create({\n        name: 'TEST_SECRET',\n        pipelineId: '123245',\n        value: 'banana',\n        allowInPR: false\n      });\n      const testPipeline = Ember.Object.create({\n        id: '123',\n        configPipelineId: '123245'\n      });\n      this.set('mockSecret', testSecret);\n      this.set('mockPipeline', testPipeline);\n      this.set('externalAction', (name, value, id) => {\n        assert.equal(name, 'TEST_SECRET');\n        assert.equal(value, 'apple');\n        assert.equal(id, '123');\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"66NzLbEc\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"secret-view\\\",null,[[\\\"secret\\\",\\\"pipeline\\\",\\\"onCreateSecret\\\"],[[25,[\\\"mockSecret\\\"]],[25,[\\\"mockPipeline\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"externalAction\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.fillIn)('.pass input', 'apple');\n      await (0, _testHelpers.triggerKeyEvent)('.pass input', 'keyup', 'ENTER');\n      await (0, _testHelpers.click)('button');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/tc-collection-linker/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  const TEMPLATE_DATA_WITH_NAME = {\n    column: {\n      label: 'Name'\n    },\n    extra: {\n      routes: {\n        namespace: 'collection.namespace',\n        detail: 'collection.detail'\n      }\n    },\n    row: {\n      content: {\n        namespace: 'foo',\n        name: 'bar'\n      }\n    },\n    value: 'bar'\n  };\n  const TEMPLATE_DATA_WITH_NAMESPACE = {\n    column: {\n      label: 'Namespace'\n    },\n    extra: {\n      routes: {\n        namespace: 'collection.namespace',\n        detail: 'collection.detail'\n      }\n    },\n    row: {\n      content: {\n        namespace: 'baz'\n      }\n    },\n    value: 'baz'\n  };\n  (0, _qunit.module)('Integration | Component | tc collection linker', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders the link to collection namespace page', async function (assert) {\n      Object.keys(TEMPLATE_DATA_WITH_NAMESPACE).forEach(prop => this.set(prop, TEMPLATE_DATA_WITH_NAMESPACE[prop]));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"MoSuYmBG\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"tc-collection-linker\\\",null,[[\\\"column\\\",\\\"extra\\\",\\\"value\\\"],[[25,[\\\"column\\\"]],[25,[\\\"extra\\\"]],[25,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('a .namespace').hasText('baz');\n    });\n    (0, _qunit.test)('it renders the link to collection detail page', async function (assert) {\n      Object.keys(TEMPLATE_DATA_WITH_NAME).forEach(prop => this.set(prop, TEMPLATE_DATA_WITH_NAME[prop]));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"MoSuYmBG\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"tc-collection-linker\\\",null,[[\\\"column\\\",\\\"extra\\\",\\\"value\\\"],[[25,[\\\"column\\\"]],[25,[\\\"extra\\\"]],[25,[\\\"value\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('a .name').hasText('bar');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/tc-collection-list/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-responsive/test-support\"], function (_qunit, _emberQunit, _testHelpers, _testSupport) {\n  \"use strict\";\n\n  const TEST_TEMPLATES = {\n    model: [{\n      id: 2,\n      description: 'A test example',\n      labels: ['car', 'armored'],\n      maintainer: 'bruce@wayne.com',\n      name: 'bar',\n      namespace: 'foo',\n      version: '2.0.0'\n    }, {\n      id: 3,\n      description: 'A fruity example',\n      labels: ['fruit'],\n      maintainer: 'thomas@wayne.com',\n      name: 'strawberry',\n      namespace: 'banana',\n      version: '1.0.0'\n    }],\n    targetNamespace: 'foo'\n  };\n  (0, _qunit.module)('Integration | Component | tc collection list', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      (0, _testSupport.setBreakpoint)('desktop');\n      Object.keys(TEST_TEMPLATES).forEach(prop => this.set(prop, TEST_TEMPLATES[prop]));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"JJS+Ifob\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"tc-collection-list\\\",null,[[\\\"model\\\",\\\"collectionType\\\"],[[25,[\\\"model\\\"]],\\\"Collection\\\"]],{\\\"statements\\\":[[0,\\\"      This is a collection\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('header h4 a').hasText('Collection Docs');\n      assert.dom('header h4 a').hasAttribute('href', 'http://docs.screwdriver.cd/user-guide/collection');\n      assert.dom('.collection-list-table th').exists({\n        count: 6\n      });\n      assert.dom('.collection-list-table .lt-body td').exists({\n        count: 12\n      });\n    });\n    (0, _qunit.test)('it renders with filter namespace', async function (assert) {\n      (0, _testSupport.setBreakpoint)('desktop');\n      Object.keys(TEST_TEMPLATES).forEach(prop => this.set(prop, TEST_TEMPLATES[prop]));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"2FM3OjvG\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"tc-collection-list\\\",null,[[\\\"model\\\",\\\"filteringNamespace\\\",\\\"collectionType\\\"],[[25,[\\\"model\\\"]],[25,[\\\"targetNamespace\\\"]],\\\"Collection\\\"]],{\\\"statements\\\":[[0,\\\"      This is a collection\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('header h4 a').hasText('Collection Docs');\n      assert.dom('header h4 a').hasAttribute('href', 'http://docs.screwdriver.cd/user-guide/collection');\n      assert.dom('.collection-list-table th').exists({\n        count: 6\n      });\n      assert.dom('.collection-list-table .lt-body td').exists({\n        count: 6\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/template-header/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  const TEMPLATE = {\n    id: 2,\n    config: {\n      image: 'node:8'\n    },\n    createTime: '2018-06-16T00:36:50.603Z',\n    description: 'A test example',\n    labels: ['car', 'armored'],\n    maintainer: 'bruce@wayne.com',\n    pipelineId: 1,\n    namespace: 'foo',\n    name: 'bar',\n    fullName: 'foo/bar',\n    version: '2.0.0',\n    images: {\n      stable: 'node:6',\n      development: 'node:7'\n    }\n  };\n  const mockPipeline = {\n    id: 1,\n    scmRepo: {\n      url: 'github.com/screwdriver-cd'\n    },\n\n    get(key) {\n      return this[key];\n    }\n\n  };\n  (0, _qunit.module)('Integration | Component | template header', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      const storeStub = Ember.Service.extend({\n        findRecord() {\n          return new Ember.RSVP.Promise(resolve => resolve(mockPipeline));\n        }\n\n      });\n      this.set('mock', TEMPLATE);\n      this.owner.unregister('service:store');\n      this.owner.register('service:store', storeStub);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"0j5U9XUn\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"template-header\\\",null,[[\\\"template\\\"],[[25,[\\\"mock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h1').hasText('foo/bar');\n      assert.dom('h2').hasText('2.0.0');\n      assert.dom('p').hasText('A test example');\n      assert.dom('#template-namespace').hasText('Namespace: foo');\n      assert.dom('#template-name').hasText('Name: bar');\n      assert.dom('#template-maintainer').hasText('Released by: bruce@wayne.com');\n      assert.dom('#template-maintainer > .template-details--value > a').hasAttribute('href', 'mailto:bruce@wayne.com');\n      assert.dom('#template-tags').hasText('Tags: car armored');\n      assert.dom('h4').hasText('Usage:');\n      assert.dom('pre').hasText('jobs: main: template: foo/bar@2.0.0');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/template-versions/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  const TEMPLATES = [{\n    version: '3.0.0',\n    tag: 'latest stable'\n  }, {\n    version: '2.0.0',\n    tag: 'meeseeks'\n  }, {\n    version: '1.0.0'\n  }];\n  (0, _qunit.module)('Integration | Component | template versions', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.actions = {};\n\n      this.send = (actionName, ...args) => this.actions[actionName].apply(this, args);\n    });\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('mock', TEMPLATES);\n\n      this.actions.mockAction = function () {};\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"k5WFndvv\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"template-versions\\\",null,[[\\\"templates\\\",\\\"changeVersion\\\"],[[25,[\\\"mock\\\"]],[29,\\\"action\\\",[[24,0,[]],\\\"mockAction\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h4').hasText('Versions:');\n      assert.dom('ul li:first-child').hasText('3.0.0 - latest stable');\n      assert.dom('ul li:nth-child(2)').hasText('2.0.0 - meeseeks');\n      assert.dom('ul li:last-child').hasText('1.0.0');\n    });\n    (0, _qunit.test)('it handles clicks on versions', async function (assert) {\n      assert.expect(5);\n      this.set('mock', TEMPLATES);\n\n      this.actions.mockAction = function (ver) {\n        assert.equal(ver, '1.0.0');\n      };\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"k5WFndvv\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"template-versions\\\",null,[[\\\"templates\\\",\\\"changeVersion\\\"],[[25,[\\\"mock\\\"]],[29,\\\"action\\\",[[24,0,[]],\\\"mockAction\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h4').hasText('Versions:');\n      assert.dom('ul li:first-child').hasText('3.0.0 - latest stable');\n      assert.dom('ul li:nth-child(2)').hasText('2.0.0 - meeseeks');\n      assert.dom('ul li:last-child').hasText('1.0.0');\n      await (0, _testHelpers.click)('ul li:last-child span');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/token-list/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | token list', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('tokens', [Ember.Object.create({\n        id: 1,\n        name: 'foo',\n        description: 'bar'\n      }), Ember.Object.create({\n        id: 2,\n        name: 'baz',\n        description: 'qux'\n      })]);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ATrQTpW8\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"token-list\\\",null,[[\\\"tokens\\\"],[[25,[\\\"tokens\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('td.name input').hasValue('baz');\n      assert.dom('td.description input').hasValue('qux');\n      assert.dom('tr:nth-child(2) td.name input').hasValue('foo');\n      assert.dom('tr:nth-child(2) td.description input').hasValue('bar');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/token-view/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | token view', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      const testToken = Ember.Object.create({\n        name: 'TEST_TOKEN',\n        description: 'hunter2'\n      });\n      this.set('mockToken', testToken);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"VyUwRZBk\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"token-view\\\",null,[[\\\"token\\\"],[[25,[\\\"mockToken\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.name input').hasValue('TEST_TOKEN');\n      assert.dom('.description input').hasValue('hunter2');\n      assert.dom('button:last-child').hasText('Delete'); // button value changes when user types a new name\n\n      await (0, _testHelpers.fillIn)('.name input', 'TEST_TOKEN_2');\n      await (0, _testHelpers.triggerEvent)('.name input', 'keyup');\n      assert.dom('button:last-child').hasText('Update'); // button value reverts if the new name is the same as the original\n\n      await (0, _testHelpers.fillIn)('.name input', 'TEST_TOKEN');\n      await (0, _testHelpers.triggerEvent)('.name input', 'keyup');\n      assert.dom('button:last-child').hasText('Delete'); // button value changes when user types a new description\n\n      await (0, _testHelpers.fillIn)('.description input', 'hunter3');\n      await (0, _testHelpers.triggerEvent)('.description input', 'keyup');\n      assert.dom('button:last-child').hasText('Update'); // button value reverts if the new description is the same as the original\n\n      await (0, _testHelpers.fillIn)('.description input', 'hunter2');\n      await (0, _testHelpers.triggerEvent)('.description input', 'keyup');\n      assert.dom('button:last-child').hasText('Delete');\n    });\n    (0, _qunit.test)('it trys to delete a token', async function (assert) {\n      assert.expect(2);\n      this.set('mockToken', Ember.Object.create({\n        name: 'TEST_TOKEN',\n        description: 'hunter2'\n      }));\n      this.set('confirmAction', (action, id) => {\n        assert.equal(action, 'delete');\n        assert.equal(id, this.get('mockToken.id'));\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"3NUfSp3V\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"token-view\\\",null,[[\\\"token\\\",\\\"confirmAction\\\"],[[25,[\\\"mockToken\\\"]],[29,\\\"action\\\",[[24,0,[]],[25,[\\\"confirmAction\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('button:last-child');\n    });\n    (0, _qunit.test)('it saves changes to a token', async function (assert) {\n      let expectIsSaving = true;\n      assert.expect(3); // Setting up model so `set` works as expected\n\n      this.set('mockToken', Ember.Object.extend({\n        destroyRecord() {\n          // destroy called: Fail!\n          assert.ok(false);\n        },\n\n        save() {\n          // update called\n          assert.equal(this.get('name'), 'TEST_TOKEN_2');\n          expectIsSaving = false;\n          return Ember.RSVP.resolve();\n        }\n\n      }).create({\n        name: 'TEST_TOKEN',\n        description: 'hunter2'\n      }));\n      this.set('setIsSavingMock', isSaving => {\n        assert.equal(expectIsSaving, isSaving);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"7B+UEIvw\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"token-view\\\",null,[[\\\"token\\\",\\\"setIsSaving\\\"],[[25,[\\\"mockToken\\\"]],[25,[\\\"setIsSavingMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.fillIn)('.name input', 'TEST_TOKEN_2');\n      await (0, _testHelpers.triggerEvent)('.name input', 'keyup');\n      await (0, _testHelpers.click)('button:last-child');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/user-link/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | user link', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      const userMock = {\n        username: 'batman',\n        name: 'Bruce W',\n        avatar: 'http://example.com/u/batman/avatar',\n        url: 'http://example.com/u/batman'\n      };\n      this.set('userMock', userMock);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"5tuMp1g5\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"user-link\\\",null,[[\\\"user\\\",\\\"causeMessage\\\"],[[25,[\\\"userMock\\\"]],\\\"merged it\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal((0, _testHelpers.find)('a').href, 'http://example.com/u/batman');\n      assert.equal((0, _testHelpers.find)('a').title, 'merged it');\n      assert.equal((0, _testHelpers.find)('img').src, 'http://example.com/u/batman/avatar');\n      assert.dom('a').hasText('Bruce W');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/validator-input/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | validator input', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"JOaAwWDi\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"validator-input\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h3').hasText('Validate Screwdriver Configuration');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/validator-job/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | validator job', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('jobMock', {\n        image: 'int-test:1',\n        commands: [{\n          name: 'step1',\n          command: 'echo hello'\n        }, {\n          name: 'step2',\n          command: 'echo goodbye'\n        }],\n        secrets: [],\n        environment: {},\n        settings: {}\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"s3OxPIwh\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"validator-job\\\",null,[[\\\"name\\\",\\\"index\\\",\\\"job\\\"],[\\\"int-test\\\",0,[25,[\\\"jobMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h4').hasText('int-test');\n      assert.dom('.image .label').hasText('Image:');\n      assert.dom('.image .value').hasText('int-test:1');\n      assert.dom('.steps .label').hasText('Steps:');\n      assert.dom('.steps ul li:first-child .value').hasText('echo hello');\n      assert.dom('.steps ul li:last-child .value').hasText('echo goodbye');\n      assert.dom('.secrets .label').hasText('Secrets:');\n      assert.dom('.secrets ul li').hasText('None defined');\n      assert.dom('.env .label').hasText('Environment Variables:');\n      assert.dom('.env ul li').hasText('None defined');\n      assert.dom('.settings .label').hasText('Settings:');\n      assert.dom('.settings ul li').hasText('None defined');\n      assert.dom('.annotations .label').hasText('Annotations:');\n      assert.dom('.annotations .value').hasText('None defined');\n    });\n    (0, _qunit.test)('it renders a template, description, images', async function (assert) {\n      this.set('templateMock', {\n        description: 'Test template',\n        maintainer: 'bruce@wayne.com',\n        images: {\n          stable: 'node:6',\n          development: 'node:7'\n        },\n        name: 'test',\n        namespace: 'batman',\n        version: '2.0.0'\n      });\n      this.set('jobMock', {\n        image: 'int-test:1',\n        commands: [{\n          name: 'step1',\n          command: 'echo hello'\n        }, {\n          name: 'step2',\n          command: 'echo goodbye'\n        }],\n        secrets: ['FOO', 'BAR'],\n        environment: {\n          FOO: 'bar'\n        },\n        settings: {\n          FOO: 'bar'\n        },\n        annotations: {\n          FOO: 'bar'\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"3dy+gd80\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"validator-job\\\",null,[[\\\"name\\\",\\\"index\\\",\\\"job\\\",\\\"template\\\"],[\\\"int-test\\\",0,[25,[\\\"jobMock\\\"]],[25,[\\\"templateMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.template-description .label').hasText('Template Description:');\n      assert.dom('.template-description .value').hasText('Test template');\n      assert.dom('.images > .label').hasText('Supported Images:');\n      assert.dom('.images > .value > ul > li:first-child').hasText('stable: node:6');\n      assert.dom('.images > .value > ul > li:nth-child(2)').hasText('development: node:7');\n    });\n    (0, _qunit.test)('it renders settings, env, secrets, annotations', async function (assert) {\n      this.set('jobMock', {\n        image: 'int-test:1',\n        commands: [{\n          name: 'step1',\n          command: 'echo hello'\n        }, {\n          name: 'step2',\n          command: 'echo goodbye'\n        }],\n        secrets: ['FOO', 'BAR'],\n        environment: {\n          FOO: 'bar'\n        },\n        settings: {\n          FOO: 'bar'\n        },\n        annotations: {\n          FOO: 'bar'\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"s3OxPIwh\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"validator-job\\\",null,[[\\\"name\\\",\\\"index\\\",\\\"job\\\"],[\\\"int-test\\\",0,[25,[\\\"jobMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h4').hasText('int-test');\n      assert.dom('.secrets .label').hasText('Secrets:');\n      assert.dom('.secrets ul li:first-child').hasText('FOO');\n      assert.dom('.secrets ul li:last-child').hasText('BAR');\n      assert.dom('.env .label').hasText('Environment Variables:');\n      assert.dom('.env ul li').hasText('FOO: bar');\n      assert.dom('.settings .label').hasText('Settings:');\n      assert.dom('.settings ul li').hasText('FOO: bar');\n      assert.dom('.annotations .label').hasText('Annotations:');\n      assert.dom('.annotations ul li').hasText('FOO: bar');\n    });\n    (0, _qunit.test)('it renders template steps', async function (assert) {\n      this.set('jobMock', {\n        image: 'int-test:1',\n        steps: [{\n          step1: 'echo hello'\n        }, {\n          step2: 'echo goodbye'\n        }],\n        secrets: [],\n        environment: {},\n        settings: {},\n        annotations: {}\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"s3OxPIwh\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"validator-job\\\",null,[[\\\"name\\\",\\\"index\\\",\\\"job\\\"],[\\\"int-test\\\",0,[25,[\\\"jobMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h4').hasText('int-test');\n      assert.dom('.image .label').hasText('Image:');\n      assert.dom('.image .value').hasText('int-test:1');\n      assert.dom('.steps .label').hasText('Steps:');\n      assert.dom('.steps ul li:first-child .value').hasText('echo hello');\n      assert.dom('.steps ul li:last-child .value').hasText('echo goodbye');\n      assert.dom('.secrets .label').hasText('Secrets:');\n      assert.dom('.secrets ul li').hasText('None defined');\n      assert.dom('.env .label').hasText('Environment Variables:');\n      assert.dom('.env ul li').hasText('None defined');\n      assert.dom('.settings .label').hasText('Settings:');\n      assert.dom('.settings ul li').hasText('None defined');\n      assert.dom('.annotations .label').hasText('Annotations:');\n      assert.dom('.annotations .value').hasText('None defined');\n      assert.dom('.sourcePaths .label').hasText('Source Paths:');\n      assert.dom('.sourcePaths ul li').hasText('None defined');\n    });\n    (0, _qunit.test)('it renders when there are no steps or commands', async function (assert) {\n      this.set('jobMock', {\n        image: 'int-test:1',\n        secrets: [],\n        environment: {},\n        settings: {},\n        annotations: {}\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"5OAiE3NE\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"validator-job\\\",null,[[\\\"name\\\",\\\"index\\\",\\\"job\\\"],[\\\"int-test\\\",1,[25,[\\\"jobMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h4').hasText('int-test.1');\n      assert.dom('.steps .label').hasText('Steps:');\n      assert.dom('.steps ul .value').doesNotExist();\n    });\n    (0, _qunit.test)('it handles clicks on header', async function (assert) {\n      this.set('jobMock', {\n        image: 'int-test:1',\n        commands: [{\n          name: 'step1',\n          command: 'echo hello'\n        }, {\n          name: 'step2',\n          command: 'echo goodbye'\n        }],\n        secrets: ['FOO', 'BAR'],\n        environment: {\n          FOO: 'bar'\n        },\n        settings: {\n          FOO: 'bar'\n        },\n        annotations: {}\n      });\n      this.set('openMock', true);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Ta0jDG0v\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"validator-job\\\",null,[[\\\"name\\\",\\\"index\\\",\\\"job\\\",\\\"isOpen\\\"],[\\\"int-test\\\",0,[25,[\\\"jobMock\\\"]],[25,[\\\"openMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.ok(this.get('openMock'));\n      await (0, _testHelpers.click)('h4');\n      assert.notOk(this.get('openMock'));\n      await (0, _testHelpers.click)('h4');\n      assert.ok(this.get('openMock'));\n    });\n    (0, _qunit.test)('it renders a description', async function (assert) {\n      this.set('jobMock', {\n        image: 'int-test:1',\n        description: 'This is a description',\n        secrets: [],\n        environment: {},\n        settings: {},\n        annotations: {}\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"s3OxPIwh\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"validator-job\\\",null,[[\\\"name\\\",\\\"index\\\",\\\"job\\\"],[\\\"int-test\\\",0,[25,[\\\"jobMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h4').hasText('int-test');\n      assert.dom('.description .label').hasText('Description:');\n      assert.dom('.description .value').hasText('This is a description');\n    });\n    (0, _qunit.test)('it renders sourcePaths', async function (assert) {\n      this.set('jobMock', {\n        image: 'int-test:1',\n        description: 'This is a description',\n        secrets: [],\n        environment: {},\n        settings: {},\n        annotations: {},\n        sourcePaths: ['README.md', 'src/folder/']\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"s3OxPIwh\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"validator-job\\\",null,[[\\\"name\\\",\\\"index\\\",\\\"job\\\"],[\\\"int-test\\\",0,[25,[\\\"jobMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h4').hasText('int-test');\n      assert.dom('.sourcePaths .label').hasText('Source Paths:');\n      assert.dom('.sourcePaths .value ul li:first-child').hasText('README.md');\n      assert.dom('.sourcePaths .value ul li:last-child').hasText('src/folder/');\n    });\n    (0, _qunit.test)('it renders without a collapsible heading', async function (assert) {\n      this.set('jobMock', {\n        image: 'int-test:1',\n        commands: [{\n          name: 'step1',\n          command: 'echo hello'\n        }, {\n          name: 'step2',\n          command: 'echo goodbye'\n        }],\n        secrets: [],\n        environment: {},\n        settings: {}\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"mGVoUeNw\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"validator-job\\\",null,[[\\\"name\\\",\\\"index\\\",\\\"job\\\",\\\"collapsible\\\"],[\\\"int-test\\\",0,[25,[\\\"jobMock\\\"]],false]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h4').doesNotExist();\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/validator-pipeline/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | validator pipeline', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders default empty settings', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"BXnF8VEm\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"validator-pipeline\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('h4.pipeline').hasText('Pipeline Settings');\n      assert.dom('.annotations .label').hasText('Annotations:');\n      assert.dom('.annotations ul li').hasText('None defined');\n      assert.dom('.workflow .label').hasText('Workflow:');\n      assert.ok(this.$('.workflow canvas'), 'workflow canvas');\n    });\n    (0, _qunit.test)('it renders pipeline annotations and workflow', async function (assert) {\n      this.set('plMock', {\n        annotations: {\n          hello: 'hi'\n        },\n        workflow: ['firstjob', 'secondjob']\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"jZ9Aiuv9\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"validator-pipeline\\\",null,[[\\\"annotations\\\",\\\"workflow\\\"],[[25,[\\\"plMock\\\",\\\"annotations\\\"]],[25,[\\\"plMock\\\",\\\"workflow\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.annotations .label').hasText('Annotations:');\n      assert.dom('.annotations ul li').hasText('hello: hi');\n      assert.dom('.workflow .label').hasText('Workflow:');\n      assert.ok(this.$('.workflow canvas'), 'workflow canvas');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/validator-results/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | validator results', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders jobs', async function (assert) {\n      this.set('validationMock', {\n        errors: ['got an error'],\n        workflow: ['main', 'foo'],\n        workflowGraph: {\n          nodes: [{\n            name: '~pr'\n          }, {\n            name: '~commit'\n          }, {\n            name: 'main'\n          }, {\n            name: 'foo'\n          }],\n          edges: []\n        },\n        jobs: {\n          foo: [{\n            image: 'int-test:1',\n            commands: [{\n              name: 'step1',\n              command: 'echo hello'\n            }, {\n              name: 'step2',\n              command: 'echo goodbye'\n            }],\n            secrets: [],\n            environment: {},\n            settings: {}\n          }],\n          main: [{\n            image: 'int-test:1',\n            commands: [{\n              name: 'step1',\n              command: 'echo hello'\n            }, {\n              name: 'step2',\n              command: 'echo goodbye'\n            }],\n            secrets: [],\n            environment: {},\n            settings: {}\n          }, {\n            image: 'int-test:1',\n            commands: [{\n              name: 'step1',\n              command: 'echo hello'\n            }, {\n              name: 'step2',\n              command: 'echo goodbye'\n            }],\n            secrets: [],\n            environment: {},\n            settings: {}\n          }]\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"U8bmmMd0\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"validator-results\\\",null,[[\\\"results\\\"],[[25,[\\\"validationMock\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      const jobs = (0, _testHelpers.findAll)('h4.job');\n      assert.dom(jobs[0]).hasText('main');\n      assert.dom(jobs[1]).hasText('main.1');\n      assert.dom(jobs[2]).hasText('foo');\n      assert.dom('.error').hasText('got an error');\n      assert.dom('h4.pipeline').hasText('Pipeline Settings');\n    });\n    (0, _qunit.test)('it renders templates', async function (assert) {\n      this.set('validationMock', {\n        errors: [],\n        template: {\n          name: 'batman/batmobile',\n          version: '1.0.0',\n          config: {\n            image: 'int-test:1',\n            steps: [{\n              forgreatjustice: 'ba.sh'\n            }]\n          }\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"GeY5iBih\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"validator-results\\\",null,[[\\\"results\\\",\\\"isTemplate\\\"],[[25,[\\\"validationMock\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.error').doesNotExist();\n      assert.dom('h4').hasText('batman/batmobile@1.0.0');\n    });\n    (0, _qunit.test)('it renders templates with a namespace', async function (assert) {\n      this.set('validationMock', {\n        errors: [],\n        template: {\n          namespace: 'batman',\n          name: 'batmobile',\n          version: '1.0.0',\n          config: {\n            image: 'int-test:1',\n            steps: [{\n              forgreatjustice: 'ba.sh'\n            }]\n          }\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"GeY5iBih\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"validator-results\\\",null,[[\\\"results\\\",\\\"isTemplate\\\"],[[25,[\\\"validationMock\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.error').doesNotExist();\n      assert.dom('h4').hasText('batman/batmobile@1.0.0');\n    });\n    (0, _qunit.test)('it renders joi error results', async function (assert) {\n      this.set('validationMock', {\n        errors: [{\n          message: 'there is an error'\n        }],\n        template: {\n          name: 'batman/batmobile',\n          version: '1.0.0',\n          config: {\n            image: 'int-test:1',\n            steps: [{\n              forgreatjustice: 'ba.sh'\n            }]\n          }\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"GeY5iBih\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"validator-results\\\",null,[[\\\"results\\\",\\\"isTemplate\\\"],[[25,[\\\"validationMock\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.error').hasText('there is an error');\n      assert.dom('h4').hasText('batman/batmobile@1.0.0');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/workflow-graph-d3/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | workflow graph d3', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders empty when no graph supplied', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"RB4BRT7j\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"workflow-graph-d3\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('svg').exists({\n        count: 1\n      });\n      assert.equal(this.$('svg').children().length, 0);\n    });\n    (0, _qunit.test)('it renders nodes and edges when a graph is supplied', async function (assert) {\n      this.set('workflowGraph', {\n        nodes: [{\n          name: '~pr'\n        }, {\n          name: '~commit'\n        }, {\n          name: 'main'\n        }],\n        edges: [{\n          src: '~pr',\n          dest: 'main'\n        }, {\n          src: '~commit',\n          dest: 'main'\n        }]\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ujLJy9b5\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"workflow-graph-d3\\\",null,[[\\\"workflowGraph\\\"],[[25,[\\\"workflowGraph\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      const svg = this.$('svg');\n      assert.equal(svg.length, 1);\n      assert.equal(svg.children('g.graph-node').length, 3);\n      assert.equal(svg.children('path.graph-edge').length, 2);\n    });\n    (0, _qunit.test)('it renders a complete graph with triggers when showDownstreamTriggers is true', async function (assert) {\n      this.set('workflowGraph', {\n        nodes: [{\n          name: '~pr'\n        }, {\n          name: '~commit'\n        }, {\n          name: 'main'\n        }],\n        edges: [{\n          src: '~pr',\n          dest: 'main'\n        }, {\n          src: '~commit',\n          dest: 'main'\n        }]\n      });\n      this.set('completeWorkflowGraph', {\n        nodes: [{\n          name: '~pr'\n        }, {\n          name: '~commit'\n        }, {\n          name: 'main'\n        }, {\n          name: '~sd-main-trigger'\n        }],\n        edges: [{\n          src: '~pr',\n          dest: 'main'\n        }, {\n          src: '~commit',\n          dest: 'main'\n        }, {\n          src: 'main',\n          dest: '~sd-main-trigger'\n        }]\n      });\n      this.set('showDownstreamTriggers', true);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"JijgHnVF\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"workflow-graph-d3\\\",null,[[\\\"workflowGraph\\\",\\\"completeWorkflowGraph\\\",\\\"showDownstreamTriggers\\\"],[[25,[\\\"workflowGraph\\\"]],[25,[\\\"completeWorkflowGraph\\\"]],[25,[\\\"showDownstreamTriggers\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      const svg = this.$('svg');\n      assert.equal(svg.length, 1);\n      assert.equal(svg.children('g.graph-node').length, 4);\n      assert.equal(svg.children('path.graph-edge').length, 3);\n    });\n    (0, _qunit.test)('it renders statuses when build data is available', async function (assert) {\n      this.set('workflowGraph', {\n        nodes: [{\n          name: '~pr'\n        }, {\n          name: '~commit'\n        }, {\n          id: 1,\n          name: 'main'\n        }, {\n          id: 2,\n          name: 'A'\n        }, {\n          id: 3,\n          name: 'B'\n        }],\n        edges: [{\n          src: '~pr',\n          dest: 'main'\n        }, {\n          src: '~commit',\n          dest: 'main'\n        }, {\n          src: 'main',\n          dest: 'A'\n        }, {\n          src: 'A',\n          dest: 'B'\n        }]\n      });\n      this.set('startFrom', '~commit');\n      this.set('builds', [{\n        jobId: 1,\n        id: 4,\n        status: 'SUCCESS'\n      }, {\n        jobId: 2,\n        id: 5,\n        status: 'SUCCESS'\n      }, {\n        jobId: 3,\n        id: 6,\n        status: 'FAILURE'\n      }]);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"euYOnRtj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"workflow-graph-d3\\\",null,[[\\\"workflowGraph\\\",\\\"builds\\\",\\\"startFrom\\\"],[[25,[\\\"workflowGraph\\\"]],[25,[\\\"builds\\\"]],[25,[\\\"startFrom\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      const svg = this.$('svg');\n      assert.equal(svg.length, 1);\n      assert.equal(svg.children('g.graph-node').length, 5);\n      assert.equal(svg.children('g.graph-node.build-success').length, 2);\n      assert.equal(svg.children('g.graph-node.build-failure').length, 1);\n      assert.equal(svg.children('g.graph-node.build-started_from').length, 1);\n      assert.equal(svg.children('path.graph-edge').length, 4);\n      assert.equal(svg.children('path.graph-edge.build-started_from').length, 1);\n      assert.equal(svg.children('path.graph-edge.build-success').length, 2);\n    });\n    (0, _qunit.test)('it does not render startFrom icon when starting in the middle of the graph', async function (assert) {\n      this.set('workflowGraph', {\n        nodes: [{\n          name: '~pr'\n        }, {\n          name: '~commit'\n        }, {\n          id: 1,\n          name: 'main'\n        }, {\n          id: 2,\n          name: 'A'\n        }, {\n          id: 3,\n          name: 'B'\n        }],\n        edges: [{\n          src: '~pr',\n          dest: 'main'\n        }, {\n          src: '~commit',\n          dest: 'main'\n        }, {\n          src: 'main',\n          dest: 'A'\n        }, {\n          src: 'A',\n          dest: 'B'\n        }]\n      });\n      this.set('startFrom', 'A');\n      this.set('builds', [{\n        jobId: 2,\n        id: 5,\n        status: 'SUCCESS'\n      }, {\n        jobId: 3,\n        id: 6,\n        status: 'FAILURE'\n      }]);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"euYOnRtj\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"workflow-graph-d3\\\",null,[[\\\"workflowGraph\\\",\\\"builds\\\",\\\"startFrom\\\"],[[25,[\\\"workflowGraph\\\"]],[25,[\\\"builds\\\"]],[25,[\\\"startFrom\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      const svg = this.$('svg');\n      assert.equal(svg.length, 1);\n      assert.equal(svg.children('g.graph-node').length, 5);\n      assert.equal(svg.children('g.graph-node.build-success').length, 1);\n      assert.equal(svg.children('g.graph-node.build-failure').length, 1);\n      assert.equal(svg.children('g.graph-node.build-started_from').length, 0);\n      assert.equal(svg.children('path.graph-edge').length, 4);\n      assert.equal(svg.children('path.graph-edge.build-started_from').length, 0);\n      assert.equal(svg.children('path.graph-edge.build-success').length, 1);\n    });\n    (0, _qunit.test)('it can renders subgraph for minified case', async function (assert) {\n      this.set('workflowGraph', {\n        nodes: [{\n          name: '~pr'\n        }, {\n          name: '~commit'\n        }, {\n          id: 1,\n          name: 'main'\n        }, {\n          id: 2,\n          name: 'A'\n        }, {\n          id: 3,\n          name: 'B'\n        }],\n        edges: [{\n          src: '~pr',\n          dest: 'main'\n        }, {\n          src: '~commit',\n          dest: 'main'\n        }, {\n          src: 'main',\n          dest: 'A'\n        }, {\n          src: 'A',\n          dest: 'B'\n        }]\n      });\n      this.set('startFrom', 'A');\n      this.set('builds', [{\n        jobId: 2,\n        id: 5,\n        status: 'SUCCESS'\n      }, {\n        jobId: 3,\n        id: 6,\n        status: 'FAILURE'\n      }]);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"zrvqbwTv\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"workflow-graph-d3\\\",null,[[\\\"workflowGraph\\\",\\\"builds\\\",\\\"startFrom\\\",\\\"minified\\\"],[[25,[\\\"workflowGraph\\\"]],[25,[\\\"builds\\\"]],[25,[\\\"startFrom\\\"]],true]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      const svg = this.$('svg');\n      assert.equal(svg.length, 1);\n      assert.equal(svg.children('g.graph-node').length, 2);\n      assert.equal(svg.children('g.graph-node.build-success').length, 1);\n      assert.equal(svg.children('g.graph-node.build-failure').length, 1);\n      assert.equal(svg.children('g.graph-node.build-started_from').length, 0);\n      assert.equal(svg.children('path.graph-edge').length, 1);\n      assert.equal(svg.children('path.graph-edge.build-started_from').length, 0);\n      assert.equal(svg.children('path.graph-edge.build-success').length, 1);\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/components/workflow-tooltip/component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | workflow tooltip', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"VgAM7ld4\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"workflow-tooltip\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom(this.element).hasText('Go to build metrics'); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Ywqv2I8s\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"workflow-tooltip\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom(this.element).includesText('template block text');\n    });\n    (0, _qunit.test)('it renders build detail and metrics links', async function (assert) {\n      const data = {\n        job: {\n          id: 1,\n          buildId: 1234,\n          name: 'batmobile'\n        }\n      };\n      this.set('data', data);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"griJDeEZ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"workflow-tooltip\\\",null,[[\\\"tooltipData\\\"],[[25,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.content a').exists({\n        count: 2\n      });\n      assert.dom('a:first-child').hasText('Go to build details');\n      assert.dom('a:last-child').hasText('Go to build metrics');\n    });\n    (0, _qunit.test)('it renders remote trigger link', async function (assert) {\n      const data = {\n        externalTrigger: {\n          pipelineId: 1234,\n          jobName: 'main'\n        }\n      };\n      this.set('data', data);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"griJDeEZ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"workflow-tooltip\\\",null,[[\\\"tooltipData\\\"],[[25,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.content a').exists({\n        count: 1\n      });\n      assert.dom(this.element).hasText('Go to remote pipeline');\n    });\n    (0, _qunit.test)('it renders downstream trigger links', async function (assert) {\n      const data = {\n        triggers: [{\n          pipelineId: 1234,\n          jobName: 'main',\n          triggerName: '~sd@1234:main'\n        }, {\n          pipelineId: 2,\n          jobName: 'prod',\n          triggerName: '~sd@2:prod'\n        }]\n      };\n      this.set('data', data);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"griJDeEZ\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"workflow-tooltip\\\",null,[[\\\"tooltipData\\\"],[[25,[\\\"data\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.content a').exists({\n        count: 2\n      });\n      assert.dom(this.element).hasText('Go to downstream pipeline ~sd@1234:main Go to downstream pipeline ~sd@2:prod');\n    });\n    (0, _qunit.test)('it renders restart link', async function (assert) {\n      const data = {\n        job: {\n          buildId: 1234,\n          name: 'batmobile'\n        }\n      };\n      this.set('data', data);\n      this.set('confirmStartBuild', () => {});\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Cp1mOX5W\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"workflow-tooltip\\\",null,[[\\\"tooltipData\\\",\\\"displayRestartButton\\\",\\\"confirmStartBuild\\\"],[[25,[\\\"data\\\"]],true,\\\"confirmStartBuild\\\"]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.content a').exists({\n        count: 3\n      });\n      assert.dom('a:first-child').hasText('Go to build details');\n      assert.dom('a:last-child').hasText('Start pipeline from here');\n    });\n    (0, _qunit.test)('it should update position and hidden status', async function (assert) {\n      this.set('show', true);\n      this.set('pos', 'left');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"cJ/VaugE\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"workflow-tooltip\\\",null,[[\\\"showTooltip\\\",\\\"showTooltipPosition\\\"],[[25,[\\\"show\\\"]],[25,[\\\"pos\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('.workflow-tooltip').hasClass('show-tooltip');\n      assert.dom('.workflow-tooltip').hasClass('left');\n      this.set('show', false);\n      this.set('pos', 'center');\n      assert.dom('.workflow-tooltip').hasNoClass('show-tooltip');\n      assert.dom('.workflow-tooltip').hasNoClass('left');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/helpers/get-step-data-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('helper:get-step-data', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders a value', async function (assert) {\n      this.set('buildSteps', [{\n        name: 'banana',\n        startTime: '1234',\n        endTime: '1235',\n        code: 128\n      }, {\n        name: 'monkey',\n        startTime: '1236',\n        endTime: '1239',\n        code: 0\n      }]);\n      this.set('step', 'banana');\n      this.set('field', 'code');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"vV29m+++\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"get-step-data\\\",[[25,[\\\"buildSteps\\\"]],[25,[\\\"step\\\"]],[25,[\\\"field\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom(this.element).hasText('128');\n    });\n    (0, _qunit.test)('it fetches an object', async function (assert) {\n      this.set('buildSteps', [{\n        name: 'banana',\n        startTime: '1234',\n        endTime: '1235',\n        code: 128\n      }, {\n        name: 'monkey',\n        startTime: '1236',\n        endTime: '1239',\n        code: 0\n      }]);\n      this.set('field', 'startTime');\n      this.set('step', 'monkey');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"wlXDCyPx\",\n        \"block\": \"{\\\"symbols\\\":[\\\"s\\\"],\\\"statements\\\":[[4,\\\"with\\\",[[29,\\\"get-step-data\\\",[[25,[\\\"buildSteps\\\"]],[25,[\\\"step\\\"]]],null]],null,{\\\"statements\\\":[[1,[24,1,[\\\"startTime\\\"]],false]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom(this.element).hasText('1236');\n    });\n  });\n});","define(\"screwdriver-ui/tests/integration/helpers/x-duration-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('helper:x-duration', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders a duration given two parsable times in HH:mm:ss format', async function (assert) {\n      this.set('time1', 1478912844724);\n      this.set('time2', 1478912845724);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"YOnrFm2e\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"x-duration\\\",[[25,[\\\"time1\\\"]],[25,[\\\"time2\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom(this.element).hasText('00:00:01');\n      this.set('time1', '2016-11-04T20:09:41.238Z');\n      this.set('time2', '2016-11-04T20:09:44.238Z');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"YOnrFm2e\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[29,\\\"x-duration\\\",[[25,[\\\"time1\\\"]],[25,[\\\"time2\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom(this.element).hasText('00:00:03');\n    });\n  });\n});","define(\"screwdriver-ui/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('404/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '404/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('application/adapter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/adapter.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('application/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('application/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('authenticators/screwdriver-api.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/screwdriver-api.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('banner/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'banner/service.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('breakpoints.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'breakpoints.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('build-artifact/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'build-artifact/service.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('build-logs/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'build-logs/service.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('build/model.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'build/model.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('build/serializer.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'build/serializer.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('builds/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'builds/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('cache/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'cache/service.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('collection/model.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'collection/model.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('collection/serializer.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'collection/serializer.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('command/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'command/service.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('commands/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'commands/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('commands/detail/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'commands/detail/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('commands/detail/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'commands/detail/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('commands/index/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'commands/index/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('commands/namespace/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'commands/namespace/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('commands/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'commands/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/app-header/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/app-header/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/artifact-tree/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/artifact-tree/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/bread-crumbs/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/bread-crumbs/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/build-banner/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/build-banner/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/build-log/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/build-log/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/build-step-collection/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/build-step-collection/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/build-step-item/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/build-step-item/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/chart-c3/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/chart-c3/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/collection-dropdown/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/collection-dropdown/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/collection-modal/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/collection-modal/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/collection-view/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/collection-view/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/collections-flyout/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/collections-flyout/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/command-format/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/command-format/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/command-header/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/command-header/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/command-versions/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/command-versions/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/error-view/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/error-view/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/home-hero/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/home-hero/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/info-message/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/info-message/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/job-toggle-modal/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/job-toggle-modal/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/loading-view/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/loading-view/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/login-button/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/login-button/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/nav-banner/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/nav-banner/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/pipeline-create-form/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pipeline-create-form/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/pipeline-event-row/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pipeline-event-row/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/pipeline-events-list/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pipeline-events-list/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/pipeline-graph-nav/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pipeline-graph-nav/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/pipeline-header/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pipeline-header/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/pipeline-list/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pipeline-list/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/pipeline-nav/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pipeline-nav/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/pipeline-options/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pipeline-options/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/pipeline-pr-list/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pipeline-pr-list/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/pipeline-pr-view/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pipeline-pr-view/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/pipeline-secret-settings/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pipeline-secret-settings/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/pipeline-start/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pipeline-start/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/pipeline-workflow/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pipeline-workflow/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/search-list/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/search-list/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/secret-view/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/secret-view/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/tc-collection-linker/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/tc-collection-linker/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/tc-collection-list/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/tc-collection-list/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/template-header/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/template-header/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/template-versions/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/template-versions/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/token-list/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/token-list/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/token-view/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/token-view/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/user-link/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/user-link/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/validator-input/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/validator-input/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/validator-job/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/validator-job/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/validator-pipeline/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/validator-pipeline/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/validator-results/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/validator-results/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/workflow-graph-d3/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/workflow-graph-d3/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/workflow-tooltip/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/workflow-tooltip/component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('coverage/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'coverage/service.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('create/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'create/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('create/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'create/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('dashboard/index/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dashboard/index/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('dashboard/show/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dashboard/show/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('dashboard/show/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dashboard/show/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('event-stop/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'event-stop/service.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('event/model.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'event/model.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('event/serializer.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'event/serializer.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/ansi-colorize.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/ansi-colorize.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/get-last-build.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/get-last-build.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/get-step-data.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/get-step-data.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/index-of.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/index-of.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/x-duration.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/x-duration.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('home/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'home/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('instance-initializers/supplementary-config.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/supplementary-config.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('job/model.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'job/model.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('job/serializer.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'job/serializer.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('login/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'login/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('login/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'login/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('metric/model.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'metric/model.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('mixins/model-reloader.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/model-reloader.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline-startall/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline-startall/service.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline-triggers/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline-triggers/service.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/build/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/build/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/build/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/build/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/build/step/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/build/step/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/child-pipelines/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/child-pipelines/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/child-pipelines/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/child-pipelines/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/events/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/events/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/events/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/events/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/index/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/index/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/metrics/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/metrics/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/metrics/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/metrics/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/model.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/model.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/options/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/options/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/options/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/options/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/pulls/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/pulls/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/secrets/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/secrets/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/secrets/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/secrets/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/secrets/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/secrets/service.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pipeline/serializer.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pipeline/serializer.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('pr-events/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pr-events/service.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('scm/model.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'scm/model.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('scm/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'scm/service.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('search/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'search/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('search/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'search/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('secret/model.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'secret/model.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('secret/serializer.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'secret/serializer.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('store/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'store/service.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('sync/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'sync/service.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('template/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'template/service.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('templates/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'templates/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('templates/detail/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'templates/detail/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('templates/detail/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'templates/detail/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('templates/index/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'templates/index/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('templates/index/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'templates/index/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('templates/namespace/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'templates/namespace/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('templates/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'templates/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('token/model.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'token/model.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('token/serializer.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'token/serializer.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('user-settings/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'user-settings/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('user-settings/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'user-settings/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('user-settings/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'user-settings/service.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('utils/build.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/build.js should pass ESLint\\n\\n64:5 - Use object destructuring. (prefer-destructuring)\\n69:7 - Use object destructuring. (prefer-destructuring)');\n  });\n  QUnit.test('utils/git.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/git.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('utils/graph-tools.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/graph-tools.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('utils/template.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/template.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('utils/time-range.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/time-range.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('validator/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'validator/controller.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('validator/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'validator/route.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('validator/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'validator/service.js should pass ESLint\\n\\n');\n  });\n});","define(\"screwdriver-ui/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('screwdriver-ui/404/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/404/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/application/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/application/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/commands/detail/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/commands/detail/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/commands/index/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/commands/index/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/commands/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/commands/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/404-display/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/404-display/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/app-header/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/app-header/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/artifact-tree/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/artifact-tree/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/bread-crumbs/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/bread-crumbs/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/build-banner/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/build-banner/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/build-log/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/build-log/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/build-step-collection/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/build-step-collection/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/build-step-item/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/build-step-item/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/collection-dropdown/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/collection-dropdown/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/collection-modal/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/collection-modal/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/collection-view/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/collection-view/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/collections-flyout/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/collections-flyout/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/command-format/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/command-format/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/command-header/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/command-header/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/command-versions/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/command-versions/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/error-view/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/error-view/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/home-hero/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/home-hero/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/info-message/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/info-message/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/job-toggle-modal/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/job-toggle-modal/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/loading-view/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/loading-view/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/login-button/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/login-button/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/nav-banner/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/nav-banner/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/pipeline-create-form/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/pipeline-create-form/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/pipeline-event-row/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/pipeline-event-row/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/pipeline-events-list/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/pipeline-events-list/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/pipeline-graph-nav/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/pipeline-graph-nav/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/pipeline-header/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/pipeline-header/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/pipeline-list/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/pipeline-list/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/pipeline-nav/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/pipeline-nav/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/pipeline-options/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/pipeline-options/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/pipeline-pr-list/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/pipeline-pr-list/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/pipeline-pr-view/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/pipeline-pr-view/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/pipeline-rootdir/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/pipeline-rootdir/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/pipeline-secret-settings/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/pipeline-secret-settings/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/pipeline-start/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/pipeline-start/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/pipeline-workflow/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/pipeline-workflow/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/search-list/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/search-list/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/secret-view/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/secret-view/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/tc-collection-linker/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/tc-collection-linker/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/tc-collection-list/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/tc-collection-list/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/template-header/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/template-header/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/template-versions/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/template-versions/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/token-list/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/token-list/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/token-view/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/token-view/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/user-link/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/user-link/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/validator-input/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/validator-input/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/validator-job/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/validator-job/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/validator-pipeline/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/validator-pipeline/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/validator-results/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/validator-results/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/workflow-graph-d3/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/workflow-graph-d3/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/components/workflow-tooltip/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/components/workflow-tooltip/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/create/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/create/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/dashboard/index/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/dashboard/index/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/dashboard/show/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/dashboard/show/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/home/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/home/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/login/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/login/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/page-not-found/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/page-not-found/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/pipeline/build/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/pipeline/build/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/pipeline/child-pipelines/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/pipeline/child-pipelines/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/pipeline/events/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/pipeline/events/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/pipeline/metrics/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/pipeline/metrics/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/pipeline/options/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/pipeline/options/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/pipeline/secrets/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/pipeline/secrets/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/pipeline/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/pipeline/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/search/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/search/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/templates/detail/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/templates/detail/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/templates/error.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/templates/error.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/templates/index/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/templates/index/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/templates/loading.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/templates/loading.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/templates/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/templates/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/user-settings/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/user-settings/template.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('screwdriver-ui/validator/template.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'screwdriver-ui/validator/template.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"screwdriver-ui/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('acceptance/create-page-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/create-page-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('acceptance/dashboards-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/dashboards-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('acceptance/metrics-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/metrics-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('acceptance/pipeline-builds-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/pipeline-builds-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('acceptance/pipeline-childPipelines-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/pipeline-childPipelines-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('acceptance/pipeline-options-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/pipeline-options-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('acceptance/pipeline-pr-chain-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/pipeline-pr-chain-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('acceptance/search-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/search-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('acceptance/secrets-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/secrets-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('acceptance/tokens-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/tokens-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/inject-scm.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/inject-scm.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/inject-session.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/inject-session.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/responsive.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/responsive.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/app-header/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/app-header/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/artifact-tree/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/artifact-tree/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/bread-crumbs/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/bread-crumbs/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/build-banner/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/build-banner/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/build-log/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/build-log/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/build-step-collection/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/build-step-collection/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/build-step-item/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/build-step-item/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/chart-c3/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/chart-c3/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/collection-dropdown/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/collection-dropdown/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/collection-modal/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/collection-modal/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/collection-view/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/collection-view/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/collections-flyout/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/collections-flyout/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/command-format/componenet-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/command-format/componenet-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/command-header/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/command-header/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/command-versions/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/command-versions/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/error-view/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/error-view/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/home-hero/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/home-hero/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/info-message/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/info-message/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/job-toggle-modal/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/job-toggle-modal/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/loading-view/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/loading-view/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/login-button/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/login-button/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/nav-banner/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/nav-banner/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/pipeline-create-form/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pipeline-create-form/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/pipeline-event-row/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pipeline-event-row/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/pipeline-events-list/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pipeline-events-list/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/pipeline-graph-nav/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pipeline-graph-nav/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/pipeline-header/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pipeline-header/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/pipeline-list/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pipeline-list/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/pipeline-nav/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pipeline-nav/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/pipeline-options/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pipeline-options/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/pipeline-pr-list/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pipeline-pr-list/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/pipeline-pr-view/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pipeline-pr-view/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/pipeline-rootdir/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pipeline-rootdir/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/pipeline-secret-settings/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pipeline-secret-settings/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/pipeline-start/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pipeline-start/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/pipeline-workflow/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pipeline-workflow/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/search-list/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/search-list/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/secret-view/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/secret-view/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/tc-collection-linker/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tc-collection-linker/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/tc-collection-list/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tc-collection-list/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/template-header/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/template-header/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/template-versions/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/template-versions/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/token-list/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/token-list/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/token-view/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/token-view/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/user-link/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/user-link/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/validator-input/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/validator-input/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/validator-job/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/validator-job/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/validator-pipeline/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/validator-pipeline/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/validator-results/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/validator-results/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/workflow-graph-d3/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/workflow-graph-d3/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/workflow-tooltip/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/workflow-tooltip/component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/helpers/get-step-data-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/get-step-data-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/helpers/x-duration-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/x-duration-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('mock/builds.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mock/builds.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('mock/events.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mock/events.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('mock/jobs.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mock/jobs.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('mock/metrics.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mock/metrics.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('mock/pipeline.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mock/pipeline.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('mock/workflow-graph.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mock/workflow-graph.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/404/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/404/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/application/adapter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/adapter-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/application/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/controller-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/application/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/banner/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/banner/service-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/build-artifact/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/build-artifact/service-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/build-logs/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/build-logs/service-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/build/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/build/model-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/build/serializer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/build/serializer-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/builds/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/builds/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/cache/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/cache/service-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/collection/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/collection/model-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/collection/serializer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/collection/serializer-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/command/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/command/service-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/commands/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/commands/controller-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/commands/detail/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/commands/detail/controller-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/commands/detail/router-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/commands/detail/router-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/commands/index/router-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/commands/index/router-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/commands/router-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/commands/router-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/coverage/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/coverage/service-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/create/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/create/controller-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/create/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/create/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/dashboard/index/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/dashboard/index/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/dashboard/show/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/dashboard/show/controller-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/dashboard/show/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/dashboard/show/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/event-stop/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/event-stop/service-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/event/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/event/model-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/helpers/ansi-colorize-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/ansi-colorize-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/helpers/get-last-build-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/get-last-build-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/helpers/index-of-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/index-of-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/home/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/home/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/instance-initializers/supplementary-config-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/instance-initializers/supplementary-config-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/job/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/job/model-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/job/serializer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/job/serializer-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/login/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/login/controller-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/login/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/login/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/metric/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/metric/model-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/mixins/model-reloader-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/model-reloader-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline-startall/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline-startall/service-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline-triggers/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline-triggers/service-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline/build/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline/build/controller-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline/build/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline/build/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline/build/step/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline/build/step/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline/events/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline/events/controller-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline/events/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline/events/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline/index/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline/index/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline/metrics/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline/metrics/controller-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline/metrics/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline/metrics/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline/model-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline/options/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline/options/controller-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline/options/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline/options/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline/pulls/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline/pulls/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline/secrets/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline/secrets/controller-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline/secrets/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline/secrets/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pipeline/serializer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pipeline/serializer-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/pr-events/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pr-events/service-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/search/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/search/controller-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/search/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/search/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/secret/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/secret/model-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/secret/serializer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/secret/serializer-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/store/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/store/service-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/sync/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/sync/service-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/template/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/template/service-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/templates/detail/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/templates/detail/controller-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/templates/detail/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/templates/detail/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/templates/index/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/templates/index/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/templates/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/templates/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/token/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/token/model-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/token/serializer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/token/serializer-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/utils/build-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/build-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/utils/git-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/git-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/utils/graph-tools-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/graph-tools-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/utils/template-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/template-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/utils/time-range-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/time-range-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/validator/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/validator/controller-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/validator/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/validator/route-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/validator/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/validator/service-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"screwdriver-ui/tests/mock/builds\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  const build = {\n    id: '1234',\n    jobId: '1',\n    number: 1474649580274,\n    container: 'node:6',\n    cause: 'Started by user batman',\n    sha: 'c96f36886e084d18bd068b8156d095cd9b31e1d6',\n    createTime: '2016-09-23T16:53:00.274Z',\n    startTime: '2016-09-23T16:53:08.601Z',\n    endTime: '2016-09-23T16:58:47.355Z',\n    meta: {},\n    steps: [{\n      startTime: '2016-09-23T16:53:07.497654442Z',\n      name: 'sd-setup',\n      code: 0,\n      endTime: '2016-09-23T16:53:12.46806858Z'\n    }, {\n      startTime: '2016-09-23T16:53:12.902784483Z',\n      name: 'install',\n      code: 137,\n      endTime: '2016-09-23T16:58:46.924844475Z'\n    }, {\n      name: 'bower'\n    }, {\n      name: 'test'\n    }],\n    status: 'FAILURE'\n  };\n  const shas = ['abcd1234567890', 'bcd1234567890a', 'cd1234567890ab', 'd1234567890abc', '1234567890abcd'];\n\n  var _default = eventId => {\n    const builds = [];\n    shas.forEach(sha => {\n      const b = Ember.copy(build, true);\n      const config = {\n        id: Math.floor(Math.random() * 99999999999),\n        eventId,\n        sha,\n        number: Date.now(),\n        status: ['SUCCESS', 'FAILURE', 'RUNNING'][Math.floor(Math.random() * 2)]\n      };\n      Ember.assign(b, config);\n      builds.push(b);\n    });\n    return builds;\n  };\n\n  _exports.default = _default;\n});","define(\"screwdriver-ui/tests/mock/events\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  const events = [{\n    id: '2',\n    causeMessage: 'Merged by batman',\n    commit: {\n      message: 'Merge pull request #2 from batcave/batmobile',\n      author: {\n        username: 'batman',\n        name: 'Bruce W',\n        avatar: 'http://example.com/u/batman/avatar',\n        url: 'http://example.com/u/batman'\n      },\n      url: 'http://example.com/batcave/batmobile/commit/abcdef1029384'\n    },\n    createTime: '2016-11-04T20:09:41.238Z',\n    creator: {\n      username: 'batman',\n      name: 'Bruce W',\n      avatar: 'http://example.com/u/batman/avatar',\n      url: 'http://example.com/u/batman'\n    },\n    startFrom: '~commit',\n    pipelineId: '12345',\n    sha: 'abcdef1029384',\n    type: 'pipeline',\n    workflowGraph: {\n      nodes: [],\n      edges: []\n    }\n  }, {\n    id: '3',\n    causeMessage: 'Opened by github:robin',\n    commit: {\n      message: 'fix bug',\n      author: {\n        username: 'robin',\n        name: 'Tim D',\n        avatar: 'http://example.com/u/robin/avatar',\n        url: 'http://example.com/u/robin'\n      },\n      url: 'http://example.com/batcave/batmobile/commit/1029384bbb'\n    },\n    createTime: '2016-11-05T20:09:41.238Z',\n    creator: {\n      username: 'robin',\n      name: 'Tim D',\n      avatar: 'http://example.com/u/robin/avatar',\n      url: 'http://example.com/u/robin'\n    },\n    startFrom: '~pr',\n    pr: {\n      url: 'http://example.com/batcave/batmobile/pulls/42'\n    },\n    pipelineId: '12345',\n    type: 'pr',\n    prNum: 42,\n    sha: '1029384bbb',\n    workflowGraph: {\n      nodes: [],\n      edges: []\n    }\n  }, {\n    id: '4',\n    causeMessage: 'Opened by github:robin',\n    commit: {\n      message: 'fix docs',\n      author: {\n        username: 'robin',\n        name: 'Tim D',\n        avatar: 'http://example.com/u/robin/avatar',\n        url: 'http://example.com/u/robin'\n      },\n      url: 'http://example.com/batcave/batmobile/commit/1030384bbb'\n    },\n    createTime: '2016-11-04T20:09:41.238Z',\n    creator: {\n      username: 'robin',\n      name: 'Tim D',\n      avatar: 'http://example.com/u/robin/avatar',\n      url: 'http://example.com/u/robin'\n    },\n    startFrom: '~pr',\n    pr: {\n      url: 'http://example.com/batcave/batmobile/pulls/43'\n    },\n    pipelineId: '12345',\n    sha: '1030384bbb',\n    type: 'pr',\n    prNum: 43,\n    workflowGraph: {\n      nodes: [],\n      edges: []\n    }\n  }];\n\n  var _default = workflowGraph => events.map(e => Ember.assign(Ember.copy(e, true), {\n    workflowGraph\n  }));\n\n  _exports.default = _default;\n});","define(\"screwdriver-ui/tests/mock/jobs\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.metricJobs = metricJobs;\n  _exports.default = void 0;\n\n  var _default = () => Ember.copy([{\n    id: '12345',\n    name: 'main',\n    pipelineId: '4',\n    state: 'ENABLED',\n    archived: false\n  }, {\n    id: '12346',\n    name: 'publish',\n    pipelineId: '4',\n    state: 'ENABLED',\n    archived: false\n  }, {\n    id: '12347',\n    name: 'PR-42:main',\n    pipelineId: '4',\n    state: 'ENABLED',\n    archived: false\n  }, {\n    id: '12348',\n    name: 'PR-42:publish',\n    pipelineId: '4',\n    state: 'ENABLED',\n    archived: false\n  }, {\n    id: '12349',\n    name: 'PR-43:main',\n    pipelineId: '4',\n    state: 'ENABLED',\n    archived: false\n  }], true);\n  /**\n   * Return jobs mock for use with metrics\n   *\n   * @export\n   * @returns\n   */\n\n\n  _exports.default = _default;\n\n  function metricJobs() {\n    return Ember.copy([{\n      id: 159,\n      name: 'prod',\n      pipelineId: 4,\n      state: 'ENABLED',\n      archived: false\n    }, {\n      id: 158,\n      name: 'beta',\n      pipelineId: 4,\n      state: 'ENABLED',\n      archived: false\n    }, {\n      id: 157,\n      name: 'publish',\n      pipelineId: 4,\n      state: 'ENABLED',\n      archived: false\n    }, {\n      id: 156,\n      name: 'main',\n      pipelineId: 4,\n      state: 'ENABLED',\n      archived: false\n    }], true);\n  }\n});","define(\"screwdriver-ui/tests/mock/metrics\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.model = model;\n  _exports.default = void 0;\n\n  var _default = () => Ember.copy([{\n    id: 71767,\n    createTime: '2019-03-12T01:09:55.973Z',\n    causeMessage: 'Merged by DekusDenial',\n    sha: '3deb58c4059220c9e5ae92f3ccd1609aa36e47e7',\n    queuedTime: 11,\n    imagePullTime: 21,\n    duration: 1144,\n    status: 'SUCCESS',\n    builds: [{\n      id: 99335,\n      jobId: 158,\n      eventId: 71767,\n      createTime: '2019-03-12T01:24:10.173Z',\n      startTime: '2019-03-12T01:24:19.388Z',\n      endTime: '2019-03-12T01:29:11.231Z',\n      duration: 292,\n      status: 'SUCCESS',\n      queuedTime: 2,\n      imagePullTime: 8\n    }, {\n      id: 99334,\n      jobId: 157,\n      eventId: 71767,\n      createTime: '2019-03-12T01:18:28.063Z',\n      startTime: '2019-03-12T01:18:39.806Z',\n      endTime: '2019-03-12T01:24:04.219Z',\n      duration: 324,\n      status: 'SUCCESS',\n      queuedTime: 4,\n      imagePullTime: 7\n    }, {\n      id: 99331,\n      jobId: 156,\n      eventId: 71767,\n      createTime: '2019-03-12T01:09:56.354Z',\n      startTime: '2019-03-12T01:10:07.408Z',\n      endTime: '2019-03-12T01:18:26.479Z',\n      duration: 499,\n      status: 'SUCCESS',\n      queuedTime: 5,\n      imagePullTime: 6\n    }]\n  }, {\n    id: 71900,\n    createTime: '2019-03-12T12:29:29.922Z',\n    causeMessage: 'Merged by DekusDenial',\n    sha: 'e6c90056bb11e52d94e74dcc9eae7d17ce8eb290',\n    queuedTime: 14,\n    imagePullTime: 20,\n    duration: 1002,\n    status: 'SUCCESS',\n    builds: [{\n      id: 99596,\n      jobId: 158,\n      eventId: 71900,\n      createTime: '2019-03-12T12:43:15.229Z',\n      startTime: '2019-03-12T12:43:27.707Z',\n      endTime: '2019-03-12T12:46:23.926Z',\n      duration: 176,\n      status: 'SUCCESS',\n      queuedTime: 5,\n      imagePullTime: 7\n    }, {\n      id: 99595,\n      jobId: 157,\n      eventId: 71900,\n      createTime: '2019-03-12T12:37:45.031Z',\n      startTime: '2019-03-12T12:37:56.605Z',\n      endTime: '2019-03-12T12:43:13.990Z',\n      duration: 317,\n      status: 'SUCCESS',\n      queuedTime: 5,\n      imagePullTime: 6\n    }, {\n      id: 99594,\n      jobId: 156,\n      eventId: 71900,\n      createTime: '2019-03-12T12:29:30.300Z',\n      startTime: '2019-03-12T12:29:42.193Z',\n      endTime: '2019-03-12T12:37:43.721Z',\n      duration: 482,\n      status: 'SUCCESS',\n      queuedTime: 4,\n      imagePullTime: 7\n    }]\n  }, {\n    id: 72148,\n    createTime: '2019-03-13T22:23:18.712Z',\n    causeMessage: 'Merged by DekusDenial',\n    sha: '91f45d077bacd52d13a7d5f76f2717f9fbec61b4',\n    queuedTime: 15,\n    imagePullTime: 29,\n    duration: 1073,\n    status: 'SUCCESS',\n    builds: [{\n      id: 100115,\n      jobId: 159,\n      eventId: 72148,\n      createTime: '2019-03-13T22:40:23.335Z',\n      startTime: '2019-03-13T22:40:31.848Z',\n      endTime: '2019-03-13T22:41:23.210Z',\n      duration: 51,\n      status: 'SUCCESS',\n      queuedTime: 1,\n      imagePullTime: 7\n    }, {\n      id: 100114,\n      jobId: 158,\n      eventId: 72148,\n      createTime: '2019-03-13T22:37:06.616Z',\n      startTime: '2019-03-13T22:37:17.501Z',\n      endTime: '2019-03-13T22:40:21.885Z',\n      duration: 184,\n      status: 'SUCCESS',\n      queuedTime: 4,\n      imagePullTime: 7\n    }, {\n      id: 100113,\n      jobId: 157,\n      eventId: 72148,\n      createTime: '2019-03-13T22:31:33.160Z',\n      startTime: '2019-03-13T22:31:46.869Z',\n      endTime: '2019-03-13T22:37:05.444Z',\n      duration: 319,\n      status: 'SUCCESS',\n      queuedTime: 6,\n      imagePullTime: 8\n    }, {\n      id: 100109,\n      jobId: 156,\n      eventId: 72148,\n      createTime: '2019-03-13T22:23:19.049Z',\n      startTime: '2019-03-13T22:23:30.100Z',\n      endTime: '2019-03-13T22:31:31.856Z',\n      duration: 482,\n      status: 'SUCCESS',\n      queuedTime: 4,\n      imagePullTime: 7\n    }]\n  }, {\n    id: 72817,\n    createTime: '2019-03-15T21:07:33.358Z',\n    causeMessage: 'Merged by jithin1987',\n    sha: '7650a8e64acc96a5de83b42c2e2f6de6223b9f1c',\n    queuedTime: 27,\n    imagePullTime: 30,\n    duration: 2070,\n    status: 'SUCCESS',\n    builds: [{\n      id: 101329,\n      jobId: 159,\n      eventId: 72817,\n      createTime: '2019-03-15T21:41:08.641Z',\n      startTime: '2019-03-15T21:41:22.231Z',\n      endTime: '2019-03-15T21:42:13.264Z',\n      duration: 51,\n      status: 'SUCCESS',\n      queuedTime: 5,\n      imagePullTime: 8\n    }, {\n      id: 101320,\n      jobId: 158,\n      eventId: 72817,\n      createTime: '2019-03-15T21:21:40.972Z',\n      startTime: '2019-03-15T21:22:02.303Z',\n      endTime: '2019-03-15T21:41:07.039Z',\n      duration: 1145,\n      status: 'SUCCESS',\n      queuedTime: 14,\n      imagePullTime: 7\n    }, {\n      id: 101314,\n      jobId: 157,\n      eventId: 72817,\n      createTime: '2019-03-15T21:16:13.163Z',\n      startTime: '2019-03-15T21:16:26.827Z',\n      endTime: '2019-03-15T21:21:40.019Z',\n      duration: 313,\n      status: 'SUCCESS',\n      queuedTime: 6,\n      imagePullTime: 8\n    }, {\n      id: 101306,\n      jobId: 156,\n      eventId: 72817,\n      createTime: '2019-03-15T21:07:33.723Z',\n      startTime: '2019-03-15T21:07:43.185Z',\n      endTime: '2019-03-15T21:16:11.987Z',\n      duration: 509,\n      status: 'SUCCESS',\n      queuedTime: 2,\n      imagePullTime: 7\n    }]\n  }], true);\n  /**\n   * Return mock model for metrics\n   *\n   * @export\n   * @returns\n   */\n\n\n  _exports.default = _default;\n\n  function model() {\n    return Ember.copy({\n      startTime: '2019-03-25T01:00',\n      endTime: '2019-03-26T17:01:19',\n      successOnly: false,\n      jobId: '156',\n      metrics: {\n        events: {\n          queuedTime: [0.18333333333333332, 0.23333333333333334, 0.25, 0.45],\n          imagePullTime: [0.35, 0.3333333333333333, 0.48333333333333334, 0.5],\n          duration: [19.066666666666666, 16.7, 17.883333333333333, 34.5],\n          total: [19.6, 17.266666666666666, 18.616666666666667, 35.45],\n          sha: ['3deb58c4059220c9e5ae92f3ccd1609aa36e47e7', 'e6c90056bb11e52d94e74dcc9eae7d17ce8eb290', '91f45d077bacd52d13a7d5f76f2717f9fbec61b4', '7650a8e64acc96a5de83b42c2e2f6de6223b9f1c'],\n          status: ['SUCCESS', 'SUCCESS', 'SUCCESS', 'SUCCESS'],\n          createTime: ['2019-03-12T01:09:55.973Z', '2019-03-12T12:29:29.922Z', '2019-03-13T22:23:18.712Z', '2019-03-15T21:07:33.358Z']\n        },\n        builds: [{\n          beta: 4.866666666666666,\n          publish: 5.4,\n          main: 8.316666666666666\n        }, {\n          beta: 2.933333333333333,\n          publish: 5.283333333333333,\n          main: 8.033333333333333\n        }, {\n          prod: 0.85,\n          beta: 3.066666666666667,\n          publish: 5.316666666666666,\n          main: 8.033333333333333\n        }, {\n          prod: 0.85,\n          beta: 19.083333333333332,\n          publish: 5.216666666666667,\n          main: 8.483333333333333\n        }],\n        jobMap: {\n          main: '156',\n          publish: '157',\n          beta: '158',\n          prod: '159'\n        },\n        steps: {\n          sha: ['e6c90056bb11e52d94e74dcc9eae7d17ce8eb290', '91f45d077bacd52d13a7d5f76f2717f9fbec61b4', '7650a8e64acc96a5de83b42c2e2f6de6223b9f1c'],\n          status: ['SUCCESS', 'SUCCESS', 'SUCCESS'],\n          createTime: ['2019-03-12T12:29:29.922Z', '2019-03-13T22:23:18.712Z', '2019-03-15T21:07:33.358Z'],\n          data: [{\n            'sd-setup-init': 0.6333333333333333,\n            'sd-setup-launcher': 0,\n            'sd-setup-scm': 0.03333333333333333,\n            'sd-setup-screwdriver-cache-bookend': 0.18333333333333332,\n            install: 1.2,\n            'install-browsers': 0.75,\n            test: 4.6,\n            'sd-teardown-screwdriver-coverage-bookend': 1.1833333333333333,\n            'sd-teardown-screwdriver-artifact-bookend': 0.016666666666666666,\n            'sd-teardown-screwdriver-cache-bookend': 0.2\n          }, {\n            'sd-setup-init': 0.25,\n            'sd-setup-launcher': 0,\n            'sd-setup-scm': 0.03333333333333333,\n            'sd-setup-screwdriver-cache-bookend': 0.2,\n            install: 1.1666666666666667,\n            'install-browsers': 0.7333333333333333,\n            test: 4.583333333333333,\n            'sd-teardown-screwdriver-coverage-bookend': 1.1833333333333333,\n            'sd-teardown-screwdriver-artifact-bookend': 0.03333333333333333,\n            'sd-teardown-screwdriver-cache-bookend': 0.21666666666666667\n          }, {\n            'sd-setup-init': 0.2,\n            'sd-setup-launcher': 0,\n            'sd-setup-scm': 0.016666666666666666,\n            'sd-setup-screwdriver-cache-bookend': 0.18333333333333332,\n            install: 1.1666666666666667,\n            'install-browsers': 0.75,\n            test: 4.7,\n            'sd-teardown-screwdriver-coverage-bookend': 1.1833333333333333,\n            'sd-teardown-screwdriver-artifact-bookend': 0.016666666666666666,\n            'sd-teardown-screwdriver-cache-bookend': 0.18333333333333332\n          }]\n        },\n        stepGroup: ['install', 'install-browsers', 'sd-setup-init', 'sd-setup-launcher', 'sd-setup-scm', 'sd-setup-screwdriver-cache-bookend', 'sd-teardown-screwdriver-artifact-bookend', 'sd-teardown-screwdriver-cache-bookend', 'sd-teardown-screwdriver-coverage-bookend', 'test'],\n        measures: {\n          total: 4,\n          passed: 4,\n          failed: 0,\n          avgs: {\n            queuedTime: '17 seconds',\n            imagePullTime: '25 seconds',\n            duration: '22 minutes, 2 seconds'\n          }\n        }\n      }\n    }, true);\n  }\n});","define(\"screwdriver-ui/tests/mock/pipeline\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  const pipeline = {\n    id: '4',\n    scmUrl: 'git@github.com:foo/bar.git#master',\n    scmRepo: {\n      name: 'foo/bar',\n      branch: 'master',\n      url: 'https://github.com/foo/bar'\n    },\n    createTime: '2016-09-15T23:12:23.760Z',\n    admins: {\n      batman: true\n    },\n    workflowGraph: {\n      nodes: [],\n      edges: []\n    }\n  };\n\n  var _default = workflowGraph => Ember.assign(Ember.copy(pipeline, true), {\n    workflowGraph\n  });\n\n  _exports.default = _default;\n});","define(\"screwdriver-ui/tests/mock/workflow-graph\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n\n  var _default = () => Ember.copy({\n    nodes: [{\n      name: '~pr'\n    }, {\n      name: '~commit'\n    }, {\n      id: 12345,\n      name: 'main'\n    }, {\n      is: 123456,\n      name: 'publish'\n    }],\n    edges: [{\n      src: '~pr',\n      dest: 'main'\n    }, {\n      src: '~commit',\n      dest: 'main'\n    }, {\n      src: 'main',\n      dest: 'publish'\n    }]\n  }, true);\n\n  _exports.default = _default;\n});","define(\"screwdriver-ui/tests/test-helper\", [\"@ember/test-helpers\", \"ember-qunit\", \"screwdriver-ui/app\", \"screwdriver-ui/config/environment\"], function (_testHelpers, _emberQunit, _app, _environment) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"screwdriver-ui/tests/unit/404/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | 404', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:404');\n      assert.ok(route);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/application/adapter-test\", [\"qunit\", \"ember-qunit\", \"pretender\", \"ember-data\"], function (_qunit, _emberQunit, _pretender, _emberData) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Unit | Adapter | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      assert.ok(adapter);\n    });\n    (0, _qunit.test)('it uses cors for ajax', function (assert) {\n      assert.expect(3);\n      server.get('https://sd.cd/fake', () => [200, {\n        'content-type': 'application/json'\n      }, '{\"foo\": \"bar\"}']);\n\n      server.handledRequest = function (verb, path, request) {\n        assert.equal(verb, 'GET');\n        assert.equal(request.withCredentials, true);\n      };\n\n      let adapter = this.owner.lookup('adapter:application');\n      return adapter.ajax('https://sd.cd/fake', 'GET').then(response => {\n        assert.deepEqual(response, {\n          foo: 'bar'\n        });\n      });\n    });\n    (0, _qunit.test)('it wraps non-array payload with model name', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      const requestData = {\n        url: 'http://localhost:8080/v4/builds/12345'\n      };\n      const payload = adapter.handleResponse(200, {}, {\n        id: 1234\n      }, requestData);\n      assert.deepEqual(payload, {\n        build: {\n          id: 1234\n        }\n      });\n    });\n    (0, _qunit.test)('it wraps array payload with model name', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      const requestData = {\n        url: 'http://localhost:8080/v4/builds'\n      };\n      const payload = adapter.handleResponse(200, {}, [{\n        id: 1234\n      }], requestData);\n      assert.deepEqual(payload, {\n        builds: [{\n          id: 1234\n        }]\n      });\n    });\n    (0, _qunit.test)('it adds links to pipelines', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      const requestData = {\n        url: 'http://localhost:8080/v4/pipelines/1234324'\n      };\n      const payload = adapter.handleResponse(200, {}, {\n        id: 1234\n      }, requestData);\n      assert.deepEqual(payload, {\n        pipeline: {\n          id: 1234,\n          links: {\n            jobs: 'jobs',\n            secrets: 'secrets',\n            events: 'events',\n            tokens: 'tokens',\n            metrics: 'metrics'\n          }\n        }\n      });\n    });\n    (0, _qunit.test)('it adds links to jobs', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      const requestData = {\n        url: 'http://localhost:8080/v4/pipelines/1234/jobs'\n      };\n      const payload = adapter.handleResponse(200, {}, [{\n        id: 1234\n      }], requestData);\n      assert.deepEqual(payload, {\n        jobs: [{\n          id: 1234,\n          links: {\n            builds: 'builds?count=10&page=1',\n            metrics: 'metrics'\n          }\n        }]\n      });\n    });\n    (0, _qunit.test)('it adds links to jobs', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      const requestData = {\n        url: 'http://localhost:8080/v4/pipelines/1234/jobs'\n      };\n      const payload = adapter.handleResponse(200, {}, [], requestData);\n      assert.deepEqual(payload, {\n        jobs: []\n      });\n    });\n    (0, _qunit.test)('it wraps errors', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      const requestData = {\n        url: 'http://localhost:8080/v4/pipelines/1234/jobs'\n      };\n      const payload = adapter.handleResponse(404, {}, {\n        error: 'bananas'\n      }, requestData);\n      assert.ok(payload instanceof _emberData.default.AdapterError);\n    });\n    (0, _qunit.test)('it wraps error objects', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      const requestData = {\n        url: 'http://localhost:8080/v4/pipelines/1234/jobs'\n      };\n      const payload = adapter.handleResponse(404, {}, {\n        error: {\n          statusCode: 400,\n          error: 'unfortunate',\n          message: 'a series of unfortunate events'\n        }\n      }, requestData);\n      assert.ok(payload instanceof _emberData.default.AdapterError);\n    });\n    (0, _qunit.test)('it takes care of empty payload', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      const requestData = {\n        url: 'http://localhost:8080/v4/pipelines/1234'\n      };\n      const payload = adapter.handleResponse(204, {}, null, requestData);\n      assert.deepEqual(payload, {});\n    });\n    (0, _qunit.test)('it returns pipelinetoken endpoint when model is token with pipelineId', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      const modelname = 'token';\n      const snapshot = {\n        adapterOptions: {\n          pipelineId: '1'\n        }\n      };\n      const id = '123';\n      const baseUrl = 'http://localhost:8080/v4/pipelines/1/tokens';\n      const urlForFindAll = adapter.urlForFindAll(modelname, snapshot);\n      const urlForCreateRecord = adapter.urlForCreateRecord(modelname, snapshot);\n      const urlForUpdateRecord = adapter.urlForUpdateRecord(id, modelname, snapshot);\n      const urlForDeleteRecord = adapter.urlForDeleteRecord(id, modelname, snapshot);\n      assert.deepEqual(urlForFindAll, baseUrl);\n      assert.deepEqual(urlForCreateRecord, baseUrl);\n      assert.deepEqual(urlForUpdateRecord, \"\".concat(baseUrl, \"/\").concat(id));\n      assert.deepEqual(urlForDeleteRecord, \"\".concat(baseUrl, \"/\").concat(id));\n    });\n    (0, _qunit.test)('it returns endpoint for metric and event given pipeline id', function (assert) {\n      const adapter = this.owner.lookup('adapter:application');\n      const metricsUrl = 'http://localhost:8080/v4/pipelines/1/metrics';\n      const eventsUrl = 'http://localhost:8080/v4/pipelines/1/events';\n      const jobMetricsUrl = 'http://localhost:8080/v4/jobs/1/metrics';\n      assert.equal(adapter.urlForQuery({\n        pipelineId: 1\n      }, 'metric'), metricsUrl);\n      assert.equal(adapter.urlForQuery({\n        pipelineId: 1\n      }, 'event'), eventsUrl);\n      assert.equal(adapter.urlForQuery({\n        jobId: 1\n      }, 'metric'), jobMetricsUrl);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/application/controller-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      Ember.run(() => {\n        // Need this to mock any core services\n        // https://github.com/emberjs/ember-qunit/issues/325\n        this.owner.unregister('service:session');\n      });\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      const controller = this.owner.lookup('controller:application');\n      assert.ok(controller);\n    });\n    (0, _qunit.test)('it calls session.invalidateSession', function (assert) {\n      assert.expect(3);\n      const sessionServiceMock = Ember.Service.extend({\n        data: {},\n\n        invalidate() {\n          assert.ok(true);\n        }\n\n      });\n      this.owner.register('service:session', sessionServiceMock);\n      const controller = this.owner.lookup('controller:application');\n      assert.equal(controller.get('session').get('data.sessionChanged'), undefined);\n      controller.send('invalidateSession');\n      assert.equal(controller.get('session').get('data.sessionChanged'), false);\n    });\n    (0, _qunit.test)('it calls session.authenticate', function (assert) {\n      assert.expect(4);\n      const controller = this.owner.lookup('controller:application');\n      const sessionServiceMock = Ember.Service.extend({\n        data: {\n          authenticated: {}\n        },\n\n        authenticate() {\n          assert.ok(true);\n          return {\n            then: cb => cb()\n          };\n        }\n\n      });\n      this.owner.register('service:session', sessionServiceMock);\n      controller.send('authenticate');\n      assert.equal(controller.get('session').get('data.sessionChanged'), undefined);\n      controller.get('session').set('data.authenticated.scmContext', 'new');\n      controller.send('authenticate');\n      assert.equal(controller.get('session').get('data.sessionChanged'), true);\n    });\n    (0, _qunit.test)('it calls search in controller', function (assert) {\n      const controller = this.owner.lookup('controller:application');\n\n      controller.transitionToRoute = (path, params) => {\n        assert.equal(path, 'search');\n        assert.deepEqual(params, {\n          queryParams: {\n            query: 'myquery'\n          }\n        });\n      };\n\n      controller.send('search', 'myquery');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/application/route-test\", [\"ember-qunit\", \"qunit\", \"ember-sinon-qunit/test-support/test\", \"screwdriver-ui/tests/helpers/inject-scm\"], function (_emberQunit, _qunit, _test, _injectScm) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _test.default)('it exists', function (assert) {\n      const route = this.owner.lookup('route:application');\n      assert.ok(route);\n    });\n    (0, _test.default)('it calculates title', function (assert) {\n      const route = this.owner.lookup('route:application');\n      assert.equal(route.title(), 'screwdriver.cd');\n      assert.equal(route.title([]), 'screwdriver.cd');\n      assert.equal(route.title(['a', 'b', 'c']), 'a > b > c > screwdriver.cd');\n    });\n    (0, _test.default)('it should reload on sessionInvalidated', function (assert) {\n      const route = this.owner.lookup('route:application');\n      const reloadStub = this.stub(route, 'reloadPage');\n      route.sessionInvalidated();\n      assert.ok(reloadStub.calledOnce, 'reloadPage was not called');\n    });\n    (0, _test.default)('it should clear store and reload page on session change', function (assert) {\n      const route = this.owner.lookup('route:application');\n      const session = this.owner.lookup('service:session');\n      const reloadStub = this.stub(route, 'reloadPage');\n      session.set('data.sessionChanged', true);\n      assert.ok(reloadStub.calledOnce, 'reloadPage was not called');\n    });\n    (0, _test.default)('it should not clear store and reload page if no session change', function (assert) {\n      const route = this.owner.lookup('route:application');\n      const session = this.owner.lookup('service:session');\n      const reloadStub = this.stub(route, 'reloadPage');\n      session.set('data.sessionChanged', false);\n      assert.notOk(reloadStub.calledOnce, 'reloadPage was called');\n    });\n    (0, _test.default)('it shoud return model of scms', function (assert) {\n      (0, _injectScm.default)(this, false);\n      const route = this.owner.lookup('route:application');\n      return route.model().then(scms => {\n        assert.equal(scms[0].context, 'github:github.com');\n        assert.equal(scms[0].displayName, 'github.com');\n        assert.equal(scms[0].iconType, 'github');\n        assert.equal(scms[0].isSignedIn, true);\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/banner/service-test\", [\"pretender\", \"qunit\", \"ember-qunit\"], function (_pretender, _qunit, _emberQunit) {\n  \"use strict\";\n\n  const actualMessage = 'shutdown imminent';\n  let server;\n\n  const getBanners = () => {\n    server.get('http://localhost:8080/v4/banners', () => [200, {\n      'Content-Type': 'application/json'\n    }, JSON.stringify([{\n      id: 1,\n      isActive: true,\n      message: actualMessage\n    }])]);\n  };\n\n  (0, _qunit.module)('Unit | Service | banner', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      const service = this.owner.lookup('service:banner');\n      assert.ok(service);\n    });\n    (0, _qunit.test)('it fetches active banners', function (assert) {\n      assert.expect(1);\n      getBanners();\n      const service = this.owner.lookup('service:banner');\n      const b = service.fetchBanners();\n      b.then(banners => {\n        assert.equal(banners[0].message, actualMessage);\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/build-artifact/service-test\", [\"qunit\", \"ember-qunit\", \"pretender\"], function (_qunit, _emberQunit, _pretender) {\n  \"use strict\";\n\n  let server;\n  const manifest = \".\\n./test.txt\\n./coverage\\n./coverage/coverage.json\";\n  const buildId = 1;\n  const parsedManifest = [{\n    text: 'coverage',\n    type: 'directory',\n    children: [{\n      text: 'coverage.json',\n      type: 'file',\n      a_attr: {\n        href: \"http://localhost:8080/v4/builds/\".concat(buildId, \"/artifacts/coverage/coverage.json\")\n      }\n    }]\n  }, {\n    text: 'test.txt',\n    type: 'file',\n    a_attr: {\n      href: \"http://localhost:8080/v4/builds/\".concat(buildId, \"/artifacts/test.txt\")\n    }\n  }];\n\n  const getManifest = () => {\n    server.get(\"http://localhost:8081/v1/builds/\".concat(buildId, \"/ARTIFACTS/manifest.txt\"), () => [200, {\n      'Content-Type': 'text/plain'\n    }, manifest]);\n  };\n\n  const sessionServiceMock = Ember.Service.extend({\n    isAuthenticated: false,\n    data: {\n      authenticated: {\n        token: 'banana'\n      }\n    }\n  });\n  (0, _qunit.module)('Unit | Service | build artifact', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Specify the other units that are required for this test.\n    // needs: ['service:session'],\n\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n      this.owner.register('service:session', sessionServiceMock);\n      this.session = this.owner.lookup('service:session');\n      this.session.set('isAuthenticated', false);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:build-artifact');\n      assert.ok(service);\n    });\n    (0, _qunit.test)('it rejects if the user is not authenticated', function (assert) {\n      assert.expect(2);\n      const service = this.owner.lookup('service:build-artifact');\n      const p = service.fetchManifest(buildId);\n      p.catch(e => {\n        assert.ok(e instanceof Error, e);\n        assert.equal('User is not authenticated', e.message);\n      });\n    });\n    (0, _qunit.test)('it makes a call to get artifact manifest successfully', function (assert) {\n      assert.expect(2);\n      this.session.set('isAuthenticated', true);\n      getManifest();\n      const service = this.owner.lookup('service:build-artifact');\n      const p = service.fetchManifest(buildId);\n      p.then(data => {\n        const [request] = server.handledRequests;\n        assert.equal(request.url, \"http://localhost:8081/v1/builds/\".concat(buildId, \"/ARTIFACTS/manifest.txt\"));\n        assert.deepEqual(data, parsedManifest);\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/build-logs/service-test\", [\"qunit\", \"ember-qunit\", \"pretender\"], function (_qunit, _emberQunit, _pretender) {\n  \"use strict\";\n\n  let server;\n  const now = Date.now();\n\n  const noMoreLogs = () => {\n    server.get('http://localhost:8080/v4/builds/1/steps/banana/logs/', () => [200, {\n      'Content-Type': 'application/json',\n      'x-more-data': false\n    }, JSON.stringify([{\n      t: now,\n      n: 0,\n      m: 'hello, world'\n    }])]);\n  };\n\n  const moreLogs = () => {\n    server.get('http://localhost:8080/v4/builds/1/steps/banana/logs/', () => [200, {\n      'Content-Type': 'application/json',\n      'x-more-data': true\n    }, JSON.stringify([{\n      t: now,\n      n: 0,\n      m: 'hello, world'\n    }])]);\n  };\n\n  const noNewLogs = () => {\n    server.get('http://localhost:8080/v4/builds/1/steps/banana/logs/', () => [200, {\n      'Content-Type': 'application/json',\n      'x-more-data': true\n    }, '[]']);\n  };\n\n  const badLogs = () => {\n    server.get('http://localhost:8080/v4/builds/1/steps/banana/logs/', () => [404, {\n      'Content-Type': 'application/json'\n    }, '']);\n  };\n\n  const sessionServiceMock = Ember.Service.extend({\n    isAuthenticated: true,\n    data: {\n      authenticated: {\n        token: 'banana'\n      }\n    }\n  });\n  const serviceConfig = {\n    buildId: '1',\n    stepName: 'banana',\n    started: true\n  };\n  (0, _qunit.module)('Unit | Service | build logs', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n      this.owner.register('service:session', sessionServiceMock);\n      this.session = this.owner.lookup('service:session');\n      this.session.set('isAuthenticated', true);\n      this.owner.lookup('service:build-logs').resetCache();\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      const service = this.owner.lookup('service:build-logs');\n      assert.ok(service);\n    });\n    (0, _qunit.test)('it rejects if the user is not authenticated', function (assert) {\n      assert.expect(2);\n      noMoreLogs();\n      this.session.set('isAuthenticated', false);\n      const service = this.owner.lookup('service:build-logs');\n      const p = service.fetchLogs(serviceConfig);\n      p.catch(e => {\n        assert.ok(e instanceof Error, e);\n        assert.equal('User is not authenticated', e.message);\n      });\n    });\n    (0, _qunit.test)('it makes a call to logs api and logs return with no remaining', async function (assert) {\n      assert.expect(4);\n      noMoreLogs();\n      const service = this.owner.lookup('service:build-logs');\n      const {\n        lines,\n        done\n      } = await service.fetchLogs(serviceConfig);\n      assert.ok(done);\n      assert.equal(lines.length, 1);\n      assert.equal(lines[0].m, 'hello, world');\n      const [request] = server.handledRequests;\n      assert.equal(request.url, 'http://localhost:8080/v4/builds/1/steps/banana/logs?from=0&pages=10&sort=ascending');\n    });\n    (0, _qunit.test)('it makes a call to logs api and logs return with more remaining', async function (assert) {\n      assert.expect(4);\n      moreLogs();\n      const service = this.owner.lookup('service:build-logs');\n      const {\n        lines,\n        done\n      } = await service.fetchLogs({\n        logNumber: 50,\n        ...serviceConfig\n      });\n      assert.notOk(done);\n      assert.equal(lines.length, 1);\n      assert.equal(lines[0].m, 'hello, world');\n      const [request] = server.handledRequests;\n      assert.equal(request.url, 'http://localhost:8080/v4/builds/1/steps/banana/logs?from=50&pages=10&sort=ascending');\n    });\n    (0, _qunit.test)('it makes a call to logs api and no logs return with no more remaining', async function (assert) {\n      assert.expect(3);\n      noNewLogs();\n      const service = this.owner.lookup('service:build-logs');\n      const {\n        lines,\n        done\n      } = await service.fetchLogs(serviceConfig);\n      assert.notOk(done);\n      assert.equal(lines.length, 0);\n      const [request] = server.handledRequests;\n      assert.equal(request.url, 'http://localhost:8080/v4/builds/1/steps/banana/logs?from=0&pages=10&sort=ascending');\n    });\n    (0, _qunit.test)('it handles log api failure by treating it as there are more logs', async function (assert) {\n      assert.expect(3);\n      badLogs();\n      const service = this.owner.lookup('service:build-logs');\n      const {\n        lines,\n        done\n      } = await service.fetchLogs(serviceConfig);\n      assert.notOk(done);\n      assert.equal(lines.length, 0);\n      const [request] = server.handledRequests;\n      assert.equal(request.url, 'http://localhost:8080/v4/builds/1/steps/banana/logs?from=0&pages=10&sort=ascending');\n    });\n    (0, _qunit.test)('it handles fetching multiple pages', async function (assert) {\n      assert.expect(3);\n      noNewLogs();\n      const service = this.owner.lookup('service:build-logs');\n      const {\n        lines,\n        done\n      } = await service.fetchLogs({\n        logNumber: 0,\n        pageSize: 100,\n        ...serviceConfig\n      });\n      assert.notOk(done);\n      assert.equal(lines.length, 0);\n      const [request] = server.handledRequests;\n      assert.equal(request.url, 'http://localhost:8080/v4/builds/1/steps/banana/logs?from=0&pages=100&sort=ascending');\n    });\n    (0, _qunit.test)('it can reset the cache', function (assert) {\n      assert.expect(2);\n      const service = this.owner.lookup('service:build-logs');\n      assert.ok(service.get('cache'));\n      assert.equal(Object.keys(service.get('cache')).length, 0);\n    });\n    (0, _qunit.test)('it creates and revokes object url', function (assert) {\n      // assert.expect(5);\n      const service = this.owner.lookup('service:build-logs');\n      service.setCache(serviceConfig.buildId, serviceConfig.stepName, {\n        logs: [{\n          t: now,\n          n: 0,\n          m: 'hello, world'\n        }]\n      });\n      const url = service.buildLogBlobUrl(serviceConfig.buildId, serviceConfig.stepName);\n      assert.ok(url);\n      assert.equal(service.getCache(serviceConfig.buildId, serviceConfig.stepName, 'blobUrl'), url);\n      assert.equal(service.get('blobKeys')[0].toString(), [serviceConfig.buildId, serviceConfig.stepName].toString());\n      service.revokeLogBlobUrls();\n      assert.equal(service.get('blobKeys').length, 0);\n      assert.equal(service.getCache(serviceConfig.buildId, serviceConfig.stepName, 'blobUrl'), undefined);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/build/model-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | build', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists and has statusMessage defaults to null', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('build'));\n      assert.ok(!!model);\n      assert.equal(model.get('statusMessage'), null);\n    });\n    (0, _qunit.test)('it calculates blockedDuration', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('build', {\n        createTime: new Date(1472244582531),\n        stats: {\n          imagePullStartTime: 'Fri Aug 26 2016 13:49:52 GMT-0700 (PDT)'\n        }\n      }));\n      Ember.run(() => {\n        assert.equal(model.get('blockedDuration'), '9 seconds');\n        model.set('stats.imagePullStartTime', null);\n        assert.equal(model.get('blockedDuration'), '0 seconds');\n      });\n    });\n    (0, _qunit.test)('it calculates imagePullDuration', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('build', {\n        stats: {\n          imagePullStartTime: 'Fri Aug 26 2016 13:48:52 GMT-0700 (PDT)'\n        },\n        startTime: new Date(1472244592531)\n      }));\n      Ember.run(() => {\n        assert.equal(model.get('imagePullDuration'), '1 minute, 1 second');\n        model.set('startTime', null);\n        assert.equal(model.get('imagePullDuration'), '0 seconds');\n      });\n    });\n    (0, _qunit.test)('it calculates buildDuration', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('build', {\n        createTime: new Date(1472244572531),\n        startTime: new Date(1472244582531),\n        endTime: new Date(1472244592531)\n      }));\n      Ember.run(() => {\n        // valid duration\n        assert.equal(model.get('buildDuration'), '10 seconds'); // no end time, so duration is 0\n\n        model.set('endTime', null);\n        assert.equal(model.get('buildDuration'), '0 seconds'); // no start time, so duration is 0\n\n        model.set('endTime', new Date(1472244592531));\n        model.set('startTime', null);\n        assert.equal(model.get('buildDuration'), '0 seconds');\n      });\n    });\n    (0, _qunit.test)('it calculates totalDuration', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('build', {\n        createTime: new Date(1472244572531),\n        startTime: new Date(1472244582531),\n        endTime: new Date(1472244592531)\n      }));\n      Ember.run(() => {\n        // valid duration\n        assert.equal(model.get('totalDuration'), '20 seconds'); // no end time, so duration is 0\n\n        model.set('endTime', null);\n        assert.equal(model.get('totalDuration'), '0 seconds'); // no start time, so duration is 0\n\n        model.set('endTime', new Date(1472244592531));\n        model.set('createTime', null);\n        assert.equal(model.get('totalDuration'), '0 seconds');\n      });\n    });\n    (0, _qunit.test)('it humanizes createTime', function (assert) {\n      const createTime = new Date(1472244582531);\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('build', {\n        createTime\n      }));\n      Ember.run(() => {\n        assert.equal(model.get('createTimeWords'), \"\".concat(humanizeDuration(Date.now() - createTime, {\n          round: true,\n          largest: 1\n        }), \" ago\"));\n      });\n    });\n    (0, _qunit.test)('it truncates the sha', function (assert) {\n      const sha = '026c5b76b210f96dc27011b553679a7663b38698';\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('build', {\n        sha\n      }));\n      Ember.run(() => {\n        assert.equal(model.get('truncatedSha'), '026c5b7');\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/build/serializer-test\", [\"qunit\", \"ember-qunit\", \"pretender\"], function (_qunit, _emberQunit, _pretender) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Unit | Serializer | build', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it converts container to buildContainer and haves right defaults', async function (assert) {\n      assert.expect(2);\n      server.get('http://localhost:8080/v4/builds/abcd', function () {\n        return [200, {}, JSON.stringify({\n          id: 'abcd',\n          container: 'node:6'\n        })];\n      });\n      const build = await this.owner.lookup('service:store').findRecord('build', 'abcd');\n      assert.equal(build.get('buildContainer'), 'node:6');\n      assert.equal(build.get('statusMessage'), null);\n    });\n    (0, _qunit.test)('it POSTs only a jobId for create', async function (assert) {\n      assert.expect(2);\n      server.post('http://localhost:8080/v4/builds', function () {\n        return [200, {}, JSON.stringify({\n          id: 'abcd'\n        })];\n      });\n      const build = await this.owner.lookup('service:store').createRecord('build', {\n        jobId: '1234'\n      });\n      await build.save();\n      assert.equal(build.get('id'), 'abcd');\n      const [request] = server.handledRequests;\n      const payload = JSON.parse(request.requestBody);\n      assert.deepEqual(payload, {\n        jobId: '1234'\n      });\n    });\n    (0, _qunit.test)('it PUTs only a status for update', async function (assert) {\n      assert.expect(1);\n      server.put('http://localhost:8080/v4/builds/1234', function () {\n        return [200, {}, JSON.stringify({\n          id: 1234\n        })];\n      });\n      this.owner.lookup('service:store').push({\n        data: {\n          id: 1234,\n          type: 'build',\n          attributes: {\n            jobId: 'abcd',\n            status: 'RUNNING'\n          }\n        }\n      });\n      const build = await this.owner.lookup('service:store').peekRecord('build', 1234);\n      build.set('status', 'ABORTED');\n      await build.save();\n      const [request] = server.handledRequests;\n      const payload = JSON.parse(request.requestBody);\n      assert.deepEqual(payload, {\n        status: 'ABORTED'\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/builds/route-test\", [\"qunit\", \"ember-qunit\", \"ember-sinon-qunit/test-support/test\"], function (_qunit, _emberQunit, _test) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | builds', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      const route = this.owner.lookup('route:builds');\n      assert.ok(route);\n    });\n    (0, _test.default)('it redirects', function (assert) {\n      const route = this.owner.lookup('route:builds');\n      const transitionStub = this.stub(route, 'transitionTo');\n      const model = {\n        pipeline: {\n          id: 1\n        },\n        build: {\n          id: 2\n        }\n      };\n      route.redirect(model);\n      assert.ok(transitionStub.calledOnce, 'transitionTo was called once');\n      assert.ok(transitionStub.calledWithExactly('pipeline.build', 1, 2), 'transition to pipeline');\n    });\n    (0, _qunit.test)('it fetches pipeline & build', function (assert) {\n      const dataMapping = {\n        build_2: {\n          type: 'build',\n          jobId: 'jid',\n          id: 2\n        },\n        job_jid: {\n          type: 'job',\n          id: 'jid',\n          pipelineId: 1\n        },\n        pipeline_1: {\n          type: 'job',\n          id: 1\n        }\n      };\n      const storeStub = Ember.Service.extend({\n        findRecord(type, id) {\n          return new Ember.RSVP.Promise(resolve => resolve(Ember.Object.create(dataMapping[\"\".concat(type, \"_\").concat(id)])));\n        }\n\n      });\n      this.owner.unregister('service:store');\n      this.owner.register('service:store', storeStub);\n      const route = this.owner.lookup('route:builds');\n      return route.model({\n        build_id: 2\n      }).then(data => {\n        const {\n          build,\n          pipeline\n        } = data;\n        assert.equal(pipeline.id, 1);\n        assert.equal(build.id, 2);\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/cache/service-test\", [\"qunit\", \"ember-qunit\", \"pretender\"], function (_qunit, _emberQunit, _pretender) {\n  \"use strict\";\n\n  let server;\n  const sessionStub = Ember.Service.extend({\n    data: {\n      authenticated: {\n        token: 'faketoken'\n      }\n    }\n  });\n  (0, _qunit.module)('Unit | Service | cache', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Specify the other units that are required for this test.\n    // needs: ['service:session'],\n\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n      this.owner.register('service:session', sessionStub);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      const service = this.owner.lookup('service:cache');\n      assert.ok(service);\n    });\n    (0, _qunit.test)('it makes a call to delete pipeline cache successfully', function (assert) {\n      server.delete('http://localhost:8081/v1/caches/pipelines/1', () => [204]);\n      let service = this.owner.lookup('service:cache');\n      assert.ok(service);\n      const p = service.clearCache({\n        scope: 'pipelines',\n        id: '1'\n      });\n      p.then(() => {\n        const [request] = server.handledRequests;\n        assert.equal(request.status, '204');\n        assert.equal(request.method, 'DELETE');\n        assert.equal(request.url, 'http://localhost:8081/v1/caches/pipelines/1');\n      });\n    });\n    (0, _qunit.test)('it makes a call to delete job cache successfully', function (assert) {\n      server.delete('http://localhost:8081/v1/caches/jobs/1', () => [204]);\n      let service = this.owner.lookup('service:cache');\n      assert.ok(service);\n      const p = service.clearCache({\n        scope: 'jobs',\n        id: '1'\n      });\n      p.then(() => {\n        const [request] = server.handledRequests;\n        assert.equal(request.status, '204');\n        assert.equal(request.method, 'DELETE');\n        assert.equal(request.url, 'http://localhost:8081/v1/caches/jobs/1');\n      });\n    });\n    (0, _qunit.test)('it returns 401 on unauthorized deletion', function (assert) {\n      assert.expect(2);\n      server.delete('http://localhost:8081/v1/caches/pipelines/1', () => [401, {\n        'Content-Type': 'application/json'\n      }, 'Unauthorized']);\n      let service = this.owner.lookup('service:cache');\n      assert.ok(service);\n      const p = service.clearCache({\n        scope: 'pipelines',\n        id: '1'\n      });\n      p.then(() => {}, err => {\n        assert.equal(err, 'You do not have the permissions to clear the cache.');\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/collection/model-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | collection', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('collection'));\n      assert.ok(!!model);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/collection/serializer-test\", [\"qunit\", \"ember-qunit\", \"pretender\"], function (_qunit, _emberQunit, _pretender) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Unit | Serializer | collection', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let record = Ember.run(() => this.owner.lookup('service:store').createRecord('collection'));\n      let serializedRecord = record.serialize();\n      assert.ok(serializedRecord);\n    });\n    (0, _qunit.test)('it does not post with model name as key', async function (assert) {\n      assert.expect(2);\n      server.post('http://localhost:8080/v4/collections', function () {\n        return [200, {}, JSON.stringify({\n          id: 123\n        })];\n      });\n      const collection = this.owner.lookup('service:store').createRecord('collection', {\n        name: 'Screwdriver',\n        description: 'Collection of screwdriver pipelines'\n      });\n      await collection.save();\n      assert.equal(collection.get('id'), 123);\n      const [request] = server.handledRequests;\n      const payload = JSON.parse(request.requestBody);\n      assert.deepEqual(payload, {\n        name: 'Screwdriver',\n        description: 'Collection of screwdriver pipelines'\n      });\n    });\n    (0, _qunit.test)('it serializes only dirty fields', async function (assert) {\n      assert.expect(1);\n      server.put('http://localhost:8080/v4/collections/123', function () {\n        return [200, {}, JSON.stringify({\n          id: 123\n        })];\n      });\n      this.owner.lookup('service:store').push({\n        data: {\n          id: 123,\n          type: 'collection',\n          attributes: {\n            name: 'Screwdriver',\n            description: 'Collection of screwdriver pipelines'\n          }\n        }\n      });\n      const collection = this.owner.lookup('service:store').peekRecord('collection', 123);\n      collection.set('description', 'newDescription');\n      await collection.save();\n      const [request] = server.handledRequests;\n      const payload = JSON.parse(request.requestBody);\n      assert.deepEqual(payload, {\n        description: 'newDescription'\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/command/service-test\", [\"qunit\", \"ember-qunit\", \"pretender\"], function (_qunit, _emberQunit, _pretender) {\n  \"use strict\";\n\n  const sessionStub = Ember.Service.extend({\n    data: {\n      authenticated: {\n        token: 'faketoken'\n      }\n    }\n  });\n  const createTime = '2016-09-23T16:53:00.274Z';\n  const created = new Date(createTime).getTime();\n  const lastUpdated = \"\".concat(humanizeDuration(Date.now() - created, {\n    round: true,\n    largest: 1\n  }), \" ago\");\n  const dummyCommands = [{\n    id: 2,\n    namespace: 'foo',\n    name: 'bar',\n    version: '2.0.0',\n    createTime\n  }, {\n    id: 1,\n    namespace: 'foo',\n    name: 'bar',\n    version: '1.0.0',\n    createTime\n  }];\n  const dummyCommandsResult = dummyCommands.map(c => {\n    c.lastUpdated = lastUpdated;\n    return c;\n  });\n  const dummyCommandTags = [{\n    id: 2,\n    namespace: 'foo',\n    name: 'bar',\n    tag: 'latest',\n    version: '2.0.0',\n    createTime\n  }, {\n    id: 1,\n    namespace: 'foo',\n    name: 'bar',\n    tag: 'stable',\n    version: '1.0.0',\n    createTime\n  }];\n  const dummyCommandTagsResult = dummyCommandTags.map(c => {\n    c.lastUpdated = lastUpdated;\n    return c;\n  });\n  let server;\n  (0, _qunit.module)('Unit | Service | command', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n      this.owner.register('service:session', sessionStub);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it fetches one set of command version', function (assert) {\n      assert.expect(2);\n      server.get('http://localhost:8080/v4/commands/foo/bar', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify(dummyCommands)]);\n      let service = this.owner.lookup('service:command');\n      assert.ok(service);\n      const t = service.getOneCommand('foo', 'bar');\n      t.then(commands => {\n        assert.deepEqual(commands, dummyCommandsResult);\n      });\n    });\n    (0, _qunit.test)('it fetches one set of command tags', function (assert) {\n      assert.expect(2);\n      server.get('http://localhost:8080/v4/commands/foo/bar/tags', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify(dummyCommandTags)]);\n      let service = this.owner.lookup('service:command');\n      assert.ok(service);\n      const t = service.getCommandTags('foo', 'bar');\n      t.then(commands => {\n        assert.deepEqual(commands, dummyCommandTagsResult);\n      });\n    });\n    (0, _qunit.test)('it fetches all commands', function (assert) {\n      assert.expect(2);\n      server.get('http://localhost:8080/v4/commands', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify(dummyCommands)]);\n      let service = this.owner.lookup('service:command');\n      assert.ok(service);\n      const t = service.getAllCommands();\n      const filteredCommands = [{\n        id: 2,\n        namespace: 'foo',\n        name: 'bar',\n        version: '2.0.0',\n        createTime,\n        lastUpdated\n      }];\n      t.then(commands => {\n        assert.deepEqual(commands, filteredCommands);\n      });\n    });\n    (0, _qunit.test)('it deletes all versions of a command', function (assert) {\n      assert.expect(4);\n      server.delete('http://localhost:8080/v4/commands/foo/bar', () => [204]);\n      let service = this.owner.lookup('service:command');\n      assert.ok(service);\n      const t = service.deleteCommands('foo', 'bar');\n      t.then(() => {\n        const [request] = server.handledRequests;\n        assert.equal(request.status, '204');\n        assert.equal(request.method, 'DELETE');\n        assert.equal(request.url, 'http://localhost:8080/v4/commands/foo/bar');\n      });\n    });\n    (0, _qunit.test)('it returns 401 on unauthorized deletion', function (assert) {\n      assert.expect(2);\n      server.delete('http://localhost:8080/v4/commands/foo/bar', () => [401, {\n        'Content-Type': 'application/json'\n      }, 'Unauthorized']);\n      let service = this.owner.lookup('service:command');\n      assert.ok(service);\n      const t = service.deleteCommands('foo', 'bar');\n      t.then(() => {}, err => {\n        assert.equal(err, 'You do not have the permissions to remove this command.');\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/commands/controller-test\", [\"qunit\", \"ember-qunit\", \"ember-sinon-qunit/test-support/test\"], function (_qunit, _emberQunit, _test) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | Commands', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _test.default)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:commands');\n      assert.ok(controller);\n    });\n    (0, _test.default)('it creates correct breadcrumbs', function (assert) {\n      const controller = this.owner.lookup('controller:commands');\n      Ember.run(() => {\n        controller.set('routeParams', {\n          namespace: 'testNamespace',\n          name: 'testName'\n        });\n        assert.deepEqual(controller.get('crumbs'), [{\n          name: 'Commands',\n          params: ['commands']\n        }, {\n          name: 'testNamespace',\n          params: ['commands.namespace', 'testNamespace']\n        }, {\n          name: 'testName',\n          params: ['commands.detail', 'testNamespace', 'testName']\n        }]);\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/commands/detail/controller-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  const commandServiceStub = Ember.Service.extend({\n    deleteCommands() {\n      return Ember.RSVP.resolve([204]);\n    }\n\n  });\n  (0, _qunit.module)('Unit | Controller | commands/detail', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n\n    hooks.beforeEach(function beforeEach() {\n      this.owner.register('service:command', commandServiceStub);\n    });\n    (0, _qunit.test)('it parses model properly', function (assert) {\n      let controller = this.owner.lookup('controller:commands/detail');\n      controller.set('model', [{\n        id: 3,\n        version: '3.0.0'\n      }, {\n        id: 2,\n        version: '2.0.0'\n      }, {\n        id: 1,\n        version: '1.0.0'\n      }]);\n      assert.ok(controller);\n      assert.equal(controller.get('selectedVersion'), null);\n      assert.equal(controller.get('latest.id'), 3);\n      assert.equal(controller.get('versionCommand.id'), 3);\n    });\n    (0, _qunit.test)('it handles version changes', function (assert) {\n      let controller = this.owner.lookup('controller:commands/detail');\n      controller.set('model', [{\n        id: 3,\n        version: '3.0.0'\n      }, {\n        id: 2,\n        version: '2.0.0'\n      }, {\n        id: 1,\n        version: '1.0.0'\n      }]);\n      assert.ok(controller);\n      assert.equal(controller.get('selectedVersion'), null);\n      assert.equal(controller.get('latest.id'), 3);\n      assert.equal(controller.get('versionCommand.id'), 3);\n      controller.send('changeVersion', '1.0.0');\n      assert.equal(controller.get('selectedVersion'), '1.0.0');\n      assert.equal(controller.get('versionCommand.id'), 1);\n      assert.equal(controller.get('latest.id'), 3);\n    });\n    (0, _qunit.test)('it handles model changes', function (assert) {\n      let controller = this.owner.lookup('controller:commands/detail'); // eslint-disable-next-line new-cap\n\n      const arr = Ember.A([{\n        id: 3,\n        version: '3.0.0'\n      }, {\n        id: 2,\n        version: '2.0.0'\n      }, {\n        id: 1,\n        version: '1.0.0'\n      }]);\n      controller.set('model', arr);\n      assert.ok(controller);\n      assert.equal(controller.get('selectedVersion'), null);\n      assert.equal(controller.get('versionCommand.id'), 3);\n      assert.equal(controller.get('latest.id'), 3);\n      controller.send('changeVersion', '1.0.0');\n      assert.equal(controller.get('selectedVersion'), '1.0.0');\n      assert.equal(controller.get('versionCommand.id'), 1);\n      arr.unshiftObject({\n        id: 4,\n        version: '4.0.0'\n      });\n      assert.equal(controller.get('selectedVersion'), null);\n      assert.equal(controller.get('versionCommand.id'), 4);\n      assert.equal(controller.get('latest.id'), 4);\n    });\n    (0, _qunit.test)('it handles command deletion', function (assert) {\n      let controller = this.owner.lookup('controller:commands/detail'); // eslint-disable-next-line new-cap\n\n      const arr = Ember.A([{\n        id: 3,\n        name: 'sample',\n        version: '3.0.0'\n      }, {\n        id: 2,\n        name: 'sample',\n        version: '2.0.0'\n      }, {\n        id: 1,\n        name: 'sample',\n        version: '1.0.0'\n      }]);\n      controller.set('model', arr);\n      assert.ok(controller);\n\n      controller.transitionToRoute = route => {\n        assert.equal(route, 'commands');\n      };\n\n      controller.send('removeCommand', 'sample');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/commands/detail/router-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  const commandServiceStub = Ember.Service.extend({\n    getOneCommand(namespace, name) {\n      return Ember.RSVP.resolve([{\n        id: 3,\n        namespace,\n        name,\n        version: '3.0.0'\n      }, {\n        id: 2,\n        namespace,\n        name,\n        version: '2.0.0'\n      }, {\n        id: 1,\n        namespace,\n        name,\n        version: '1.0.0'\n      }]);\n    },\n\n    getCommandTags(namespace, name) {\n      return Ember.RSVP.resolve([{\n        id: 3,\n        namespace,\n        name,\n        version: '3.0.0',\n        tag: 'latest'\n      }, {\n        id: 2,\n        namespace,\n        name,\n        version: '2.0.0',\n        tag: 'stable'\n      }, {\n        id: 1,\n        namespace,\n        name,\n        version: '1.0.0'\n      }]);\n    }\n\n  });\n  (0, _qunit.module)('Unit | Route | commands/detail', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n\n    hooks.beforeEach(function beforeEach() {\n      this.owner.register('service:command', commandServiceStub);\n    });\n    (0, _qunit.test)('it asks for the list of commands for a given namespace and name', function (assert) {\n      let route = this.owner.lookup('route:commands/detail');\n      assert.ok(route);\n      return route.model({\n        namespace: 'foo',\n        name: 'bar'\n      }).then(commands => {\n        assert.equal(commands[0].name, 'bar');\n        assert.equal(commands[0].namespace, 'foo');\n        assert.equal(commands[0].tag, 'latest');\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/commands/index/router-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  const commandServiceStub = Ember.Service.extend({\n    getAllCommands() {\n      return Ember.RSVP.resolve([{\n        id: 3,\n        namespace: 'foo',\n        name: 'foo',\n        version: '3.0.0'\n      }, {\n        id: 2,\n        namespace: 'foo',\n        name: 'bar',\n        version: '2.0.0'\n      }, {\n        id: 1,\n        namespace: 'foo',\n        name: 'baz',\n        version: '1.0.0'\n      }]);\n    }\n\n  });\n  (0, _qunit.module)('Unix | Route | commands/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n\n    hooks.beforeEach(function beforeEach() {\n      this.owner.register('service:command', commandServiceStub);\n    });\n    (0, _qunit.test)('it dedupes the commands by namespace and name', function (assert) {\n      let route = this.owner.lookup('route:commands/index');\n      assert.ok(route);\n      return route.model().then(commands => {\n        assert.equal(commands.length, 3);\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/commands/router-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | commands', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:commands');\n      assert.ok(route);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/coverage/service-test\", [\"qunit\", \"ember-qunit\", \"pretender\"], function (_qunit, _emberQunit, _pretender) {\n  \"use strict\";\n\n  const sessionStub = Ember.Service.extend({\n    data: {\n      authenticated: {\n        token: 'faketoken'\n      }\n    }\n  });\n  let server;\n  (0, _qunit.module)('Unit | Service | coverage ', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n      this.owner.register('service:session', sessionStub);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it fetches coverage info', function (assert) {\n      assert.expect(3);\n      server.get('http://localhost:8080/v4/coverage/info', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        coverage: 98,\n        projectUrl: 'https://sonar.foo.bar',\n        tests: '7/10'\n      })]);\n      let service = this.owner.lookup('service:coverage');\n      assert.ok(service);\n      const config = {\n        buildId: 123,\n        jobId: 1,\n        startTime: '2018-05-10T19:05:53.123Z',\n        endTime: '2018-05-10T19:06:53.123Z'\n      };\n      const p = service.getCoverageInfo(config);\n      p.then(data => {\n        const [request] = server.handledRequests;\n        assert.deepEqual(data, {\n          coverage: '98%',\n          coverageUrl: 'https://sonar.foo.bar',\n          tests: '7/10',\n          testsUrl: 'https://sonar.foo.bar'\n        });\n        assert.deepEqual(request.url, // eslint-disable-next-line max-len\n        'http://localhost:8080/v4/coverage/info?buildId=123&jobId=1&startTime=2018-05-10T19%3A05%3A53.123Z&endTime=2018-05-10T19%3A06%3A53.123Z');\n      });\n    });\n    (0, _qunit.test)('it sets default coverage info when request failed', function (assert) {\n      assert.expect(3);\n      server.get('http://localhost:8080/v4/coverage/info', () => [500, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({})]);\n      let service = this.owner.lookup('service:coverage');\n      assert.ok(service);\n      const config = {\n        buildId: 123,\n        jobId: 1,\n        startTime: '2018-05-10T19:05:53.123Z',\n        endTime: '2018-05-10T19:06:53.123Z'\n      };\n      const p = service.getCoverageInfo(config);\n      p.then(data => {\n        const [request] = server.handledRequests;\n        assert.deepEqual(data, {\n          coverage: 'N/A',\n          coverageUrl: '#',\n          tests: 'N/A',\n          testsUrl: '#'\n        });\n        assert.deepEqual(request.url, // eslint-disable-next-line max-len\n        'http://localhost:8080/v4/coverage/info?buildId=123&jobId=1&startTime=2018-05-10T19%3A05%3A53.123Z&endTime=2018-05-10T19%3A06%3A53.123Z');\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/create/controller-test\", [\"qunit\", \"ember-qunit\", \"ember-sinon-qunit/test-support/test\"], function (_qunit, _emberQunit, _test) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | create', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _test.default)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:create');\n      assert.ok(controller);\n    });\n    (0, _test.default)('it should handle duplicate error on pipeline save', function (assert) {\n      const controller = this.owner.lookup('controller:create');\n      const done = assert.async();\n      const conflictError = {\n        status: 409,\n        data: {\n          existingId: 1\n        }\n      };\n      const stub = this.stub(controller, 'transitionToRoute');\n      stub.callsFake(function () {\n        assert.ok(stub.calledOnce, 'transitionToRoute was called once');\n        assert.ok(stub.calledWithExactly('pipeline', 1), 'invalid data');\n        done();\n      });\n      controller.set('store', {\n        createRecord(modelName, data) {\n          assert.equal(modelName, 'pipeline');\n          assert.equal(data.checkoutUrl, 'dummy');\n          assert.equal(data.rootDir, '');\n          return {\n            save: () => Ember.RSVP.reject({\n              errors: [conflictError]\n            })\n          };\n        }\n\n      });\n      controller.send('createPipeline', {\n        scmUrl: 'dummy',\n        rootDir: ''\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/create/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | create', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:create');\n      assert.ok(route);\n      assert.equal(route.titleToken, 'Create Pipeline');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/dashboard/index/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | dashboard/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:dashboard/index');\n      assert.ok(route);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/dashboard/show/controller-test\", [\"qunit\", \"ember-qunit\", \"ember-sinon-qunit/test-support/test\", \"screwdriver-ui/tests/helpers/inject-session\"], function (_qunit, _emberQunit, _test, _injectSession) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | dashboard/show', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      (0, _injectSession.default)(this);\n      const controller = this.owner.lookup('controller:dashboard/show');\n      assert.ok(controller);\n    });\n    (0, _qunit.test)('it calls removePipeline', function (assert) {\n      (0, _injectSession.default)(this);\n      const controller = this.owner.lookup('controller:dashboard/show');\n      let pipelineIds = [1, 2, 3];\n      const mock = Ember.Object.create({\n        id: 1,\n        name: 'collection1',\n        description: 'description1',\n        pipelineIds,\n\n        save() {\n          assert.deepEqual(Ember.get(this, 'pipelineIds'), [1, 2]);\n          return Ember.RSVP.resolve(this);\n        }\n\n      });\n      controller.set('store', {\n        findRecord(modelName, collectionId) {\n          assert.strictEqual(modelName, 'collection');\n          assert.strictEqual(collectionId, 1);\n          return Ember.RSVP.resolve(mock);\n        }\n\n      }); // Remove pipeline with id 3 from collection with id 1\n\n      controller.send('removePipeline', 3, 1);\n    });\n    (0, _test.default)('it calls onDeleteCollection', function (assert) {\n      const controller = this.owner.lookup('controller:dashboard/show');\n      const stub = this.stub(controller, 'transitionToRoute');\n      controller.send('onDeleteCollection');\n      assert.ok(stub.calledOnce, 'transitionToRoute was called once');\n      assert.ok(stub.calledWithExactly('home'), 'transition to home');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/dashboard/show/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | dashboard/show', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:dashboard/show');\n      assert.ok(route);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/event-stop/service-test\", [\"qunit\", \"ember-qunit\", \"pretender\"], function (_qunit, _emberQunit, _pretender) {\n  \"use strict\";\n\n  let server;\n\n  const stop = () => {\n    server.put('http://localhost:8080/v4/events/1/stop', () => [200]);\n  };\n\n  const stopFailed = () => {\n    server.put('http://localhost:8080/v4/events/1/stop', () => [500, {\n      'Content-Type': 'application/json'\n    }, JSON.stringify({\n      statusCode: 500,\n      message: 'internal server error'\n    })]);\n  };\n\n  (0, _qunit.module)('Unit | Service | event-stop', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      const service = this.owner.lookup('service:event-stop');\n      assert.ok(service);\n    });\n    (0, _qunit.test)('it makes a call to stop all builds in an event', function (assert) {\n      assert.expect(1);\n      stop();\n      const service = this.owner.lookup('service:event-stop');\n      const e = service.stopBuilds(1);\n      e.then(() => {\n        const [request] = server.handledRequests;\n        assert.equal(request.url, 'http://localhost:8080/v4/events/1/stop');\n      });\n    });\n    (0, _qunit.test)('it fails to stop all builds in an event with error message ', function (assert) {\n      assert.expect(2);\n      stopFailed();\n      const service = this.owner.lookup('service:event-stop');\n      const e = service.stopBuilds(1);\n      e.catch(error => {\n        assert.equal(error, 'internal server error');\n        const [request] = server.handledRequests;\n        assert.equal(request.url, 'http://localhost:8080/v4/events/1/stop');\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/event/model-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | event', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      assert.ok(!!this.owner.lookup('service:store').createRecord('event'));\n    });\n    (0, _qunit.test)('it is not completed when there are no builds', async function (assert) {\n      const model = this.owner.lookup('service:store').createRecord('event');\n      await (0, _testHelpers.settled)();\n      const isComplete = Ember.get(model, 'isComplete');\n      assert.notOk(isComplete);\n    }); // Testing observers is messy, need to change the model value, then schedule to read the newly set value later\n\n    (0, _qunit.test)('it is not completed when the a build is not complete', async function (assert) {\n      const build = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 1,\n        status: 'RUNNING'\n      });\n      const model = this.owner.lookup('service:store').createRecord('event');\n      Ember.run(() => model.set('builds', [build]));\n      await (0, _testHelpers.settled)();\n      assert.notOk(model.get('isComplete'));\n    });\n    (0, _qunit.test)('it is not completed when new builds created during reload', async function (assert) {\n      assert.expect(3);\n      const build1 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 1,\n        status: 'SUCCESS'\n      });\n      const build2 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 2,\n        status: 'SUCCESS'\n      });\n      const build3 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 3,\n        status: 'SUCCESS'\n      });\n      const model = Ember.run(() => this.owner.lookup('service:store').createRecord('event'));\n      let reloadCnt = 0;\n      Ember.run(() => {\n        model.set('builds', [build1]);\n        model.set('buildId', 121);\n        model.set('startReloading', function () {\n          reloadCnt += 1;\n\n          if (reloadCnt > 2) {\n            return;\n          } // During each reload, add one new build\n\n\n          if (reloadCnt === 1) {\n            this.set('builds', [build2, build1]);\n          } else {\n            this.set('builds', [build3, build2, build1]);\n          } // New build added during reload, event not complete\n\n\n          const isComplete = Ember.get(model, 'isComplete');\n          assert.notOk(isComplete);\n        });\n      });\n      await (0, _testHelpers.settled)(); // Since no new builds added after 2 reloads, event eventually finishes\n\n      const isComplete = Ember.get(model, 'isComplete');\n      assert.ok(isComplete);\n    });\n    (0, _qunit.test)('it is complete when all builds have run', async function (assert) {\n      const build1 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 1,\n        status: 'SUCCESS'\n      });\n      const build2 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 2,\n        status: 'SUCCESS'\n      });\n      const build3 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 3,\n        status: 'SUCCESS'\n      });\n      const build4 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 4,\n        status: 'SUCCESS'\n      });\n      const build5 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 5,\n        status: 'SUCCESS'\n      });\n      const model = Ember.run(() => this.owner.lookup('service:store').createRecord('event'));\n      Ember.run(() => model.set('builds', [build5, build4, build3, build2, build1]));\n      await (0, _testHelpers.settled)();\n      const isComplete = Ember.get(model, 'isComplete');\n      assert.ok(isComplete);\n    });\n    (0, _qunit.test)('it is RUNNING when there are no builds', async function (assert) {\n      const model = Ember.run(() => this.owner.lookup('service:store').createRecord('event'));\n      Ember.run(() => model.set('builds', []));\n      await (0, _testHelpers.settled)();\n      const status = Ember.get(model, 'status');\n      assert.equal(status, 'RUNNING');\n    });\n    (0, _qunit.test)('it returns build status when a build is not SUCCESS', async function (assert) {\n      const build1 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 1,\n        status: 'ABORTED'\n      });\n      const build2 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 2,\n        status: 'SUCCESS'\n      });\n      const model = Ember.run(() => this.owner.lookup('service:store').createRecord('event'));\n      Ember.run(() => model.set('builds', [build2, build1]));\n      await (0, _testHelpers.settled)();\n      const status = Ember.get(model, 'status');\n      assert.equal(status, 'ABORTED');\n    });\n    (0, _qunit.test)('it is SUCCESS when all expected builds have run successfully', async function (assert) {\n      const build1 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 1,\n        status: 'SUCCESS'\n      });\n      const build2 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 2,\n        status: 'SUCCESS'\n      });\n      const build3 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 3,\n        status: 'SUCCESS'\n      });\n      const build4 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 4,\n        status: 'SUCCESS'\n      });\n      const build5 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 5,\n        status: 'SUCCESS'\n      });\n      const model = Ember.run(() => this.owner.lookup('service:store').createRecord('event'));\n      Ember.run(() => model.set('builds', [build5, build4, build3, build2, build1]));\n      await (0, _testHelpers.settled)();\n      const status = Ember.get(model, 'status');\n      assert.equal(status, 'SUCCESS');\n    });\n    (0, _qunit.test)('it returns event duration whenever builds have run in parallel', async function (assert) {\n      const eventStartTime = 1472244582531;\n      const elapsed10secsTime = eventStartTime + 10000;\n      const elapsed20secsTime = eventStartTime + 20000;\n      const build1 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 1,\n        createTime: new Date(eventStartTime),\n        endTime: new Date(elapsed10secsTime),\n        status: 'SUCCESS'\n      });\n      const build2 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 2,\n        createTime: new Date(eventStartTime),\n        endTime: new Date(elapsed20secsTime),\n        status: 'ABORTED'\n      });\n      const model = Ember.run(() => this.owner.lookup('service:store').createRecord('event'));\n      Ember.run(() => model.set('builds', [build2, build1]));\n      await (0, _testHelpers.settled)();\n      const duration = Ember.get(model, 'duration');\n      assert.equal(duration, 20000);\n    });\n    (0, _qunit.test)('it returns event duration until now if not completed yet', async function (assert) {\n      const eventStartTime = 1472244582531;\n      const elapsed10secsTime = eventStartTime + 10000;\n      const elapsed20secsTime = eventStartTime + 20000;\n      const build1 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 1,\n        createTime: new Date(eventStartTime),\n        endTime: new Date(elapsed10secsTime)\n      });\n      const build2 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 2,\n        createTime: new Date(eventStartTime),\n        endTime: new Date(elapsed10secsTime)\n      });\n      const build3 = this.owner.lookup('service:store').createRecord('build', {\n        jobId: 3,\n        createTime: new Date(elapsed20secsTime),\n        status: 'RUNNING'\n      });\n      const testStartTime = new Date().getTime();\n      const model = Ember.run(() => this.owner.lookup('service:store').createRecord('event'));\n      Ember.run(() => model.set('builds', [build2, build1, build3]));\n      await (0, _testHelpers.settled)();\n      const duration = Ember.get(model, 'duration');\n      const testFinishedTime = new Date().getTime();\n      assert.ok(duration >= testStartTime - eventStartTime, \"duration \".concat(duration, \" should be equal or longer than test start \").concat(testStartTime));\n      assert.ok(duration <= testFinishedTime - eventStartTime, \"duration \".concat(duration, \" should be equal or shorter than test finished \").concat(testFinishedTime));\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/helpers/ansi-colorize-test\", [\"screwdriver-ui/helpers/ansi-colorize\", \"qunit\"], function (_ansiColorize, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Helper | ansi colorize', function () {\n    // Replace this with your real tests.\n    (0, _qunit.test)('it escapes html', function (assert) {\n      let result = (0, _ansiColorize.ansiColorize)(['<main>']);\n      assert.equal(result.toString(), '&lt;main&gt;');\n    });\n    (0, _qunit.test)('colorizes ansi codes', function (assert) {\n      let result = (0, _ansiColorize.ansiColorize)(['\\u001b[32m<main>\\u001b[0m']);\n      assert.equal(result.toString(), '<span class=\"ansi-green-fg\">&lt;main&gt;</span>');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/helpers/get-last-build-test\", [\"screwdriver-ui/helpers/get-last-build\", \"qunit\"], function (_getLastBuild, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Helper | get last build', function () {\n    (0, _qunit.test)('it returns the last build', function (assert) {\n      // eslint-disable-next-line new-cap\n      let result = (0, _getLastBuild.getLastBuild)([Ember.A(['obj1', 'obj2'])]);\n      assert.deepEqual(result, 'obj1');\n    });\n    (0, _qunit.test)('it returns empty string when builds array is empty', function (assert) {\n      // eslint-disable-next-line new-cap\n      let result = (0, _getLastBuild.getLastBuild)([[]]);\n      assert.notOk(result);\n      assert.deepEqual(result, '');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/helpers/index-of-test\", [\"screwdriver-ui/helpers/index-of\", \"qunit\"], function (_indexOf, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Helper | index of', function () {\n    // Replace this with your real tests.\n    (0, _qunit.test)('it works', function (assert) {\n      assert.equal((0, _indexOf.indexOf)([['a', 'b', 'c'], 0]), 'a');\n      assert.equal((0, _indexOf.indexOf)([['a', 'b', 'c'], 1]), 'b');\n      assert.equal((0, _indexOf.indexOf)([['a', 'b', 'c'], 2]), 'c');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/home/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | home', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:home');\n      assert.ok(route);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/instance-initializers/supplementary-config-test\", [\"screwdriver-ui/instance-initializers/supplementary-config\", \"qunit\", \"screwdriver-ui/config/environment\"], function (_supplementaryConfig, _qunit, _environment) {\n  \"use strict\";\n\n  const NAMESPACE = _environment.default.APP.SDAPI_NAMESPACE;\n  const HOSTNAME = _environment.default.APP.SDAPI_HOSTNAME;\n  const {\n    SDDOC_URL,\n    SLACK_URL\n  } = _environment.default.APP;\n  (0, _qunit.module)('Unit | Instance Initializer | supplementary config', function (hooks) {\n    hooks.beforeEach(function () {\n      Ember.run(() => {\n        this.application = Ember.Application.create();\n        this.appInstance = this.application.buildInstance();\n        delete window.SUPPLEMENTARY_CONFIG;\n      });\n    });\n    hooks.afterEach(function () {\n      Ember.run(this.appInstance, 'destroy');\n      Ember.run(this.application, 'destroy');\n      delete window.SUPPLEMENTARY_CONFIG;\n      _environment.default.APP.SDAPI_NAMESPACE = NAMESPACE;\n      _environment.default.APP.SDAPI_HOSTNAME = HOSTNAME;\n      _environment.default.APP.SDDOC_URL = SDDOC_URL;\n      _environment.default.APP.SLACK_URL = SLACK_URL;\n    });\n    (0, _qunit.test)('it uses the pre-configured settings', function (assert) {\n      (0, _supplementaryConfig.initialize)(this.appInstance);\n      assert.equal(_environment.default.APP.SDAPI_NAMESPACE, NAMESPACE);\n      assert.equal(_environment.default.APP.SDAPI_HOSTNAME, HOSTNAME);\n      assert.equal(_environment.default.APP.SDDOC_URL, SDDOC_URL);\n      assert.equal(_environment.default.APP.SLACK_URL, SLACK_URL);\n    });\n    (0, _qunit.test)('it uses the supplementary-config settings', function (assert) {\n      window.SUPPLEMENTARY_CONFIG = {\n        SDAPI_NAMESPACE: 'v5',\n        SDAPI_HOSTNAME: 'http://example.com',\n        SDDOC_URL: 'http://custom.doc',\n        SLACK_URL: 'http://custom.slack'\n      };\n      (0, _supplementaryConfig.initialize)(this.appInstance);\n      assert.equal(_environment.default.APP.SDAPI_NAMESPACE, 'v5');\n      assert.equal(_environment.default.APP.SDAPI_HOSTNAME, 'http://example.com');\n      assert.equal(_environment.default.APP.SDDOC_URL, 'http://custom.doc');\n      assert.equal(_environment.default.APP.SLACK_URL, 'http://custom.slack');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/job/model-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | job', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('job')); // let store = this.store();\n\n      assert.ok(!!model);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/job/serializer-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"pretender\"], function (_qunit, _emberQunit, _testHelpers, _pretender) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Unit | Serializer | job', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let record = Ember.run(() => this.owner.lookup('service:store').createRecord('job'));\n      let serializedRecord = record.serialize();\n      assert.ok(serializedRecord);\n    });\n    (0, _qunit.test)('it serializes only dirty fields', function (assert) {\n      assert.expect(1);\n      server.put('http://localhost:8080/v4/jobs/abcd', function () {\n        return [200, {}, JSON.stringify({\n          id: 'abcd'\n        })];\n      });\n      Ember.run(() => {\n        this.owner.lookup('service:store').push({\n          data: {\n            id: 'abcd',\n            type: 'job',\n            attributes: {\n              pipelineId: 'aabb',\n              name: 'main',\n              state: 'ENABLED'\n            }\n          }\n        });\n        const job = this.owner.lookup('service:store').peekRecord('job', 'abcd');\n        job.set('state', 'DISABLED');\n        job.save();\n      });\n      return (0, _testHelpers.settled)().then(() => {\n        const [request] = server.handledRequests;\n        const payload = JSON.parse(request.requestBody);\n        assert.deepEqual(payload, {\n          state: 'DISABLED'\n        });\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/login/controller-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  let authType = null;\n  const sessionServiceMock = Ember.Service.extend({\n    authenticate(authenticatorType) {\n      authType = authenticatorType;\n    }\n\n  });\n  (0, _qunit.module)('Unit | Controller | login', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n\n    hooks.beforeEach(function () {\n      this.owner.register('service:session', sessionServiceMock);\n      this.session = this.owner.lookup('service:session');\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:login');\n      assert.ok(controller);\n    });\n    (0, _qunit.test)('it calls session.authenticate', function (assert) {\n      let controller = this.owner.lookup('controller:login');\n      controller.send('authenticate');\n      assert.equal(authType, 'authenticator:screwdriver-api');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/login/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | login', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:login');\n      assert.ok(route);\n      assert.equal(route.titleToken, 'Login');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/metric/model-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | metric', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('metric'));\n      assert.ok(!!model);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/mixins/model-reloader-test\", [\"screwdriver-ui/mixins/model-reloader\", \"qunit\", \"ember-qunit\", \"ember-data\"], function (_modelReloader, _qunit, _emberQunit, _emberData) {\n  \"use strict\";\n\n  let subject;\n  (0, _qunit.module)('Unit | Mixin | model reloader mixin', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      const ModelReloaderObject = _emberData.default.Model.extend(_modelReloader.default);\n\n      this.owner.register('model:reload-mixin', ModelReloaderObject);\n      subject = this.owner.lookup('service:store').createRecord('reload-mixin', {\n        isPaused: false\n      });\n    });\n    (0, _qunit.test)('it mixes in to an ember object', function (assert) {\n      assert.ok(typeof subject.startReloading === 'function');\n    });\n    (0, _qunit.test)('it try to start a reloading model', function (assert) {\n      subject.set('scheduleReload', () => {\n        subject.set('runLater', 'foo');\n      });\n      subject.startReloading();\n      assert.equal(subject.get('runLater'), 'foo');\n    });\n    (0, _qunit.test)('it not try to start a reloading model', function (assert) {\n      subject.set('runLater', 1);\n      subject.set('scheduleReload', () => {\n        subject.set('runLater', 'foo');\n      });\n      subject.startReloading();\n      assert.equal(subject.get('runLater'), 1);\n    });\n    (0, _qunit.test)('it will stop a reloading model', function (assert) {\n      subject.set('runLater', 1);\n      subject.stopReloading();\n      assert.notOk(subject.get('runLater'));\n    });\n    (0, _qunit.test)('it calls reload on a model', function (assert) {\n      assert.expect(1);\n      subject.set('testModel', {\n        reload() {\n          assert.ok(true);\n          return Ember.RSVP.resolve({});\n        }\n\n      });\n      subject.set('runLater', 'foo');\n      subject.set('modelToReload', 'testModel');\n      subject.reloadModel();\n    });\n    (0, _qunit.test)('it should not reload a model if shouldReload returns false', function (assert) {\n      assert.expect(1);\n      const testModel = {\n        reload() {\n          assert.ok(true);\n          return Promise.resolve({});\n        }\n\n      };\n      subject.set('testModel', testModel);\n      subject.set('shouldReload', m => {\n        assert.equal(m, testModel);\n        return false;\n      });\n      subject.set('modelToReload', 'testModel');\n      subject.reloadModel();\n    });\n    (0, _qunit.test)('it force reloads a model', async function (assert) {\n      assert.expect(2);\n      subject.set('testModel', {\n        reload() {\n          assert.ok(true);\n          return Ember.RSVP.resolve({});\n        }\n\n      });\n      subject.set('modelToReload', 'testModel');\n      subject.forceReload();\n      Ember.run(() => {\n        assert.ok(true);\n      });\n    });\n    (0, _qunit.test)('it calls reload function if modelToReload is absent', function (assert) {\n      assert.expect(1);\n      subject.set('reload', function () {\n        assert.ok(true);\n        return Ember.RSVP.resolve({});\n      });\n      subject.set('runLater', 'foo');\n      subject.reloadModel();\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline-startall/service-test\", [\"qunit\", \"ember-qunit\", \"pretender\"], function (_qunit, _emberQunit, _pretender) {\n  \"use strict\";\n\n  let server;\n\n  const startAll = () => {\n    server.post('http://localhost:8080/v4/pipelines/1/startall', () => [204]);\n  };\n\n  const startAllFailed = () => {\n    server.post('http://localhost:8080/v4/pipelines/1/startall', () => [500, {\n      'Content-Type': 'application/json'\n    }, JSON.stringify({\n      statusCode: 500,\n      message: 'internal server error'\n    })]);\n  };\n\n  (0, _qunit.module)('Unit | Service | pipeline start all', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      const service = this.owner.lookup('service:pipeline-startall');\n      assert.ok(service);\n    });\n    (0, _qunit.test)('it makes a call start all child pipelines', function (assert) {\n      assert.expect(1);\n      startAll();\n      const service = this.owner.lookup('service:pipeline-startall');\n      const p = service.startAll(1, undefined);\n      p.then(() => {\n        const [request] = server.handledRequests;\n        assert.equal(request.url, 'http://localhost:8080/v4/pipelines/1/startall');\n      });\n    });\n    (0, _qunit.test)('it fails to start all child piplines with error message ', function (assert) {\n      assert.expect(2);\n      startAllFailed();\n      const service = this.owner.lookup('service:pipeline-startall');\n      const p = service.startAll(1, undefined);\n      p.catch(error => {\n        assert.equal(error, 'internal server error');\n        const [request] = server.handledRequests;\n        assert.equal(request.url, 'http://localhost:8080/v4/pipelines/1/startall');\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline-triggers/service-test\", [\"qunit\", \"ember-qunit\", \"pretender\"], function (_qunit, _emberQunit, _pretender) {\n  \"use strict\";\n\n  let server;\n\n  const getTriggers = () => {\n    server.get('http://localhost:8080/v4/pipelines/1/triggers', () => [200, {\n      'Content-Type': 'application/json'\n    }, JSON.stringify([{\n      jobName: 'main',\n      triggers: ['~sd@2:main', '~sd@3:deploy']\n    }, {\n      jobName: 'prod',\n      triggers: ['~sd@4:main']\n    }])]);\n  };\n\n  const getTriggersFailed = () => {\n    server.get('http://localhost:8080/v4/pipelines/1/triggers', () => [500, {\n      'Content-Type': 'application/json'\n    }, JSON.stringify({\n      statusCode: 500,\n      message: 'internal server error'\n    })]);\n  };\n\n  (0, _qunit.module)('Unit | Service | pipeline triggers', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      const service = this.owner.lookup('service:pipeline-triggers');\n      assert.ok(service);\n    });\n    (0, _qunit.test)('it makes a call to get all pipeline triggers', function (assert) {\n      assert.expect(1);\n      getTriggers();\n      const service = this.owner.lookup('service:pipeline-triggers');\n      const p = service.getDownstreamTriggers(1);\n      p.then(() => {\n        const [request] = server.handledRequests;\n        assert.equal(request.url, 'http://localhost:8080/v4/pipelines/1/triggers');\n      });\n    });\n    (0, _qunit.test)('it fails to get pipeline triggers with error message ', function (assert) {\n      assert.expect(2);\n      getTriggersFailed();\n      const service = this.owner.lookup('service:pipeline-triggers');\n      const p = service.getDownstreamTriggers(1);\n      p.catch(error => {\n        assert.equal(error, '500 internal server error');\n        const [request] = server.handledRequests;\n        assert.equal(request.url, 'http://localhost:8080/v4/pipelines/1/triggers');\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline/build/controller-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"pretender\", \"sinon\", \"ember-sinon-qunit/test-support/test\"], function (_qunit, _emberQunit, _testHelpers, _pretender, _sinon, _test) {\n  \"use strict\";\n\n  const invalidateStub = _sinon.default.stub();\n\n  const prEventsService = Ember.Service.extend({\n    getPrEvents() {\n      return Ember.RSVP.resolve();\n    }\n\n  });\n  const sessionServiceMock = Ember.Service.extend({\n    isAuthenticated: true,\n    invalidate: invalidateStub,\n    data: {\n      authenticated: {\n        // fake token for test, it has { username: apple } inside\n        // eslint-disable-next-line max-len\n        token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFwcGxlIiwianRpIjoiNTA1NTQzYTUtNDhjZi00OTAyLWE3YTktZGY0NTI1ODFjYWM0IiwiaWF0IjoxNTIxNTcyMDE5LCJleHAiOjE1MjE1NzU2MTl9.ImS1ajOnksl1X74uL85jOjzdUXmBW3HfMdPfP1vjrmc'\n      }\n    }\n  });\n  let server;\n  (0, _qunit.module)('Unit | Controller | pipeline/build', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n      this.owner.register('service:session', sessionServiceMock);\n      this.owner.register('service:pr-events', prEventsService);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n      invalidateStub.reset();\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      assert.ok(this.owner.lookup('controller:pipeline/build'));\n    });\n    (0, _qunit.test)('it restarts a build', async function (assert) {\n      assert.expect(5);\n      server.post('http://localhost:8080/v4/events', () => [201, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        id: '5678'\n      })]);\n      server.get('http://localhost:8080/v4/events/5678/builds', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([{\n        id: '9999'\n      }])]);\n      const controller = this.owner.lookup('controller:pipeline/build');\n      Ember.run(() => {\n        controller.set('model', {\n          build: Ember.Object.create({\n            id: '123'\n          }),\n          job: Ember.Object.create({\n            name: 'PR-1:main'\n          }),\n          event: Ember.Object.create({\n            id: '1',\n            sha: 'sha'\n          })\n        });\n        assert.notOk(controller.get('isShowingModal'));\n\n        controller.transitionToRoute = (path, id) => {\n          assert.equal(path, 'pipeline.build');\n          assert.equal(id, 9999);\n        };\n\n        controller.send('startBuild');\n        assert.ok(controller.get('isShowingModal'));\n      });\n      await (0, _testHelpers.settled)();\n      const [request] = server.handledRequests;\n      const payload = JSON.parse(request.requestBody);\n      assert.deepEqual(payload, {\n        buildId: 123,\n        causeMessage: 'Manually started by apple'\n      });\n    });\n    (0, _qunit.test)('it fails to restart a build', async function (assert) {\n      assert.expect(6);\n      server.post('http://localhost:8080/v4/events', () => [401, {}, JSON.stringify({\n        statusCode: 401,\n        error: 'unauthorized',\n        message: 'User does not have permission'\n      })]);\n      server.get('http://localhost:8080/v4/events/5678/builds', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([{\n        id: '9999'\n      }])]);\n      const controller = this.owner.lookup('controller:pipeline/build');\n      Ember.run(() => {\n        controller.set('model', {\n          build: Ember.Object.create({\n            id: '123'\n          }),\n          job: Ember.Object.create({\n            name: 'PR-1:main'\n          }),\n          event: Ember.Object.create({\n            id: '1',\n            sha: 'sha'\n          })\n        });\n        assert.notOk(controller.get('isShowingModal'));\n        controller.send('startBuild');\n        assert.ok(controller.get('isShowingModal'));\n      });\n      await (0, _testHelpers.settled)();\n      const [request] = server.handledRequests;\n      const payload = JSON.parse(request.requestBody);\n      assert.deepEqual(payload, {\n        buildId: 123,\n        causeMessage: 'Manually started by apple'\n      });\n      assert.notOk(controller.get('isShowingModal'));\n      assert.ok(invalidateStub.called);\n      assert.deepEqual(controller.get('errorMessage'), 'User does not have permission');\n    });\n    (0, _qunit.test)('it stops a build', async function (assert) {\n      assert.expect(2);\n      server.put('http://localhost:8080/v4/builds/5678', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        id: '5678',\n        status: 'ABORTED'\n      })]);\n      const controller = this.owner.lookup('controller:pipeline/build');\n      Ember.run(() => {\n        controller.store.push({\n          data: {\n            id: '5678',\n            type: 'build',\n            attributes: {\n              jobId: '123'\n            }\n          }\n        });\n        const build = controller.store.peekRecord('build', 5678);\n        controller.set('model', {\n          build\n        });\n        controller.send('stopBuild');\n      });\n      await (0, _testHelpers.settled)();\n      const [request] = server.handledRequests;\n      const payload = JSON.parse(request.requestBody);\n      assert.deepEqual(payload, {\n        status: 'ABORTED'\n      });\n      assert.deepEqual(controller.get('errorMessage'), '');\n    });\n    (0, _qunit.test)('it fails to stop a build', async function (assert) {\n      assert.expect(3);\n      server.put('http://localhost:8080/v4/builds/5678', () => [401, {}, JSON.stringify({\n        statusCode: 401,\n        error: 'unauthorized',\n        message: 'User does not have permission'\n      })]);\n      const controller = this.owner.lookup('controller:pipeline/build');\n      Ember.run(() => {\n        controller.store.push({\n          data: {\n            id: '5678',\n            type: 'build',\n            attributes: {\n              jobId: '123'\n            }\n          }\n        });\n        const build = controller.store.peekRecord('build', 5678);\n        controller.set('model', {\n          build\n        });\n        controller.send('stopBuild');\n      });\n      await (0, _testHelpers.settled)();\n      const [request] = server.handledRequests;\n      const payload = JSON.parse(request.requestBody);\n      assert.deepEqual(payload, {\n        status: 'ABORTED'\n      });\n      assert.ok(invalidateStub.called);\n      assert.deepEqual(controller.get('errorMessage'), 'User does not have permission');\n    });\n    (0, _qunit.test)('it reloads a build', async function (assert) {\n      assert.expect(4);\n      const controller = this.owner.lookup('controller:pipeline/build');\n      const build = Ember.Object.create({\n        id: '5678',\n        jobId: 'abcd',\n        status: 'QUEUED',\n\n        reload() {\n          assert.ok(true);\n          this.set('status', 'SUCCESS');\n          return Ember.RSVP.resolve({\n            id: '5678',\n            jobId: 'abcd',\n            status: 'SUCCESS'\n          });\n        }\n\n      });\n      const event = Ember.Object.create({\n        hasMany: key => {\n          assert.equal(key, 'builds');\n          return {\n            reload: () => assert.ok(true)\n          };\n        }\n      });\n      Ember.run(() => {\n        controller.set('model', {\n          build,\n          event\n        });\n        controller.reloadBuild();\n      });\n      await (0, _testHelpers.settled)();\n      assert.ok(true);\n    });\n    (0, _test.default)('it changes build step', function (assert) {\n      assert.expect(3);\n      const controller = this.owner.lookup('controller:pipeline/build');\n      const stub = this.stub(controller, 'transitionToRoute');\n      const build = Ember.Object.create({\n        id: 5678,\n        jobId: 'abcd',\n        status: 'RUNNING',\n        steps: [{\n          startTime: 's',\n          name: 'active'\n        }]\n      });\n      const pipeline = Ember.Object.create({\n        id: 1\n      });\n      controller.set('model', {\n        build,\n        pipeline\n      });\n      controller.changeBuildStep();\n      assert.ok(true);\n      assert.ok(stub.calledOnce, 'transition was called once');\n      assert.ok(stub.calledWithExactly('pipeline.build.step', 1, 5678, 'active'), 'transition to build step page');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline/build/route-test\", [\"qunit\", \"ember-qunit\", \"ember-sinon-qunit/test-support/test\"], function (_qunit, _emberQunit, _test) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | pipeline/build', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      const route = this.owner.lookup('route:pipeline/build');\n      assert.ok(route);\n      assert.equal(route.titleToken({\n        job: Ember.Object.create({\n          name: 'main'\n        }),\n        build: Ember.Object.create({\n          sha: 'abcd1234567890',\n          truncatedSha: 'abcd123'\n        })\n      }), 'main > #abcd123');\n    });\n    (0, _test.default)('it redirects if build not found', function (assert) {\n      const route = this.owner.lookup('route:pipeline/build');\n      const stub = this.stub(route, 'transitionTo');\n      const jobId = 345;\n      const pipelineId = 123;\n      const model = {\n        pipeline: {\n          get: type => type === 'id' ? pipelineId : null\n        },\n        job: {\n          get: type => type === 'id' ? jobId : null\n        }\n      };\n      route.afterModel(model);\n      assert.ok(stub.calledOnce, 'transitionTo was called once');\n      assert.ok(stub.calledWithExactly('pipeline', pipelineId), 'transition to pipeline');\n    });\n    (0, _test.default)('it redirects if not step route', function (assert) {\n      const route = this.owner.lookup('route:pipeline/build');\n      const stub = this.stub(route, 'transitionTo');\n      const buildId = 345;\n      const pipelineId = 123;\n      const transition = {\n        targetName: 'pipeline.build.index'\n      };\n      const model = {\n        pipeline: {\n          get: type => type === 'id' ? pipelineId : null\n        },\n        build: {\n          get: type => type === 'id' ? buildId : null,\n          steps: []\n        }\n      };\n      route.redirect(model, transition);\n      model.build.steps = [{\n        startTime: 's',\n        endTime: 'e',\n        name: 'error',\n        code: 1\n      }];\n      route.redirect(model, transition);\n      assert.ok(stub.calledOnce, 'transitionTo was called once');\n      assert.ok(stub.calledWithExactly('pipeline.build.step', pipelineId, buildId, 'error'), 'transition to build step page');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline/build/step/route-test\", [\"qunit\", \"ember-qunit\", \"ember-sinon-qunit/test-support/test\"], function (_qunit, _emberQunit, _test) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | pipeline/build/step', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      assert.ok(this.owner.lookup('route:pipeline/build/step'));\n    });\n    (0, _test.default)('it redirects if step is not found in build', function (assert) {\n      const route = this.owner.lookup('route:pipeline/build/step');\n      const stub = this.stub(route, 'transitionTo');\n      const model = {\n        event: Ember.Object.create(),\n        pipeline: Ember.Object.create({\n          id: 1\n        }),\n        job: Ember.Object.create({\n          pipelineId: 1\n        }),\n        build: Ember.Object.create({\n          id: 2,\n          steps: [{\n            name: 'test'\n          }]\n        })\n      };\n      route.afterModel(model);\n      assert.ok(stub.calledOnce, 'transitionTo was called once');\n      assert.ok(stub.calledWithExactly('pipeline.build', 1, 2), 'transition to pipeline');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline/events/controller-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"pretender\", \"sinon\"], function (_qunit, _emberQunit, _testHelpers, _pretender, _sinon) {\n  \"use strict\";\n\n  const sessionServiceMock = Ember.Service.extend({\n    isAuthenticated: true,\n    data: {\n      authenticated: {\n        // fake token for test, it has { username: apple } inside\n        // eslint-disable-next-line max-len\n        token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFwcGxlIiwianRpIjoiNTA1NTQzYTUtNDhjZi00OTAyLWE3YTktZGY0NTI1ODFjYWM0IiwiaWF0IjoxNTIxNTcyMDE5LCJleHAiOjE1MjE1NzU2MTl9.ImS1ajOnksl1X74uL85jOjzdUXmBW3HfMdPfP1vjrmc'\n      }\n    }\n  });\n  let server;\n  (0, _qunit.module)('Unit | Controller | pipeline/events', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n      this.owner.register('service:session', sessionServiceMock);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      assert.ok(this.owner.lookup('controller:pipeline/events'));\n    });\n    (0, _qunit.test)('it starts a build', async function (assert) {\n      assert.expect(7);\n      server.post('http://localhost:8080/v4/events', () => [201, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        id: '5678',\n        pipelineId: '1234'\n      })]);\n      const controller = this.owner.lookup('controller:pipeline/events');\n      Ember.run(() => {\n        controller.set('pipeline', Ember.Object.create({\n          id: '1234'\n        }));\n        controller.set('reload', () => {\n          assert.ok(true);\n          return Promise.resolve({});\n        });\n        controller.set('model', {\n          events: Ember.Object.create({})\n        });\n\n        controller.transitionToRoute = (path, id) => {\n          assert.equal(path, 'pipeline');\n          assert.equal(id, 1234);\n        };\n\n        assert.notOk(controller.get('isShowingModal'));\n        controller.send('startMainBuild');\n        assert.ok(controller.get('isShowingModal'));\n      });\n      await (0, _testHelpers.settled)();\n      const [request] = server.handledRequests;\n      const payload = JSON.parse(request.requestBody);\n      assert.notOk(controller.get('isShowingModal'));\n      assert.deepEqual(payload, {\n        pipelineId: '1234',\n        startFrom: '~commit',\n        causeMessage: 'Manually started by apple'\n      });\n    });\n    (0, _qunit.test)('it restarts a build', async function (assert) {\n      assert.expect(6);\n      server.post('http://localhost:8080/v4/events', () => [201, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        id: '2'\n      })]);\n      const controller = this.owner.lookup('controller:pipeline/events');\n      Ember.run(() => {\n        controller.store.push({\n          data: {\n            id: '123',\n            type: 'build',\n            attributes: {\n              parentBuildId: '345'\n            }\n          }\n        });\n        controller.set('selectedEventObj', {\n          id: '1',\n          sha: 'sha'\n        });\n        controller.set('pipeline', Ember.Object.create({\n          id: '1234'\n        }));\n        controller.set('reload', () => {\n          assert.ok(true);\n          return Promise.resolve({});\n        });\n        controller.set('model', {\n          events: Ember.Object.create({})\n        });\n\n        controller.transitionToRoute = path => {\n          assert.equal(path, 'pipeline/1234/events');\n        };\n\n        assert.notOk(controller.get('isShowingModal'));\n        controller.send('startDetachedBuild', {\n          buildId: '123',\n          name: 'deploy'\n        });\n        assert.ok(controller.get('isShowingModal'));\n      });\n      await (0, _testHelpers.settled)();\n      const [request] = server.handledRequests;\n      const payload = JSON.parse(request.requestBody);\n      assert.notOk(controller.get('isShowingModal'));\n      assert.deepEqual(payload, {\n        pipelineId: '1234',\n        startFrom: 'deploy',\n        buildId: 123,\n        parentBuildId: 345,\n        parentEventId: 1,\n        causeMessage: 'Manually started by apple'\n      });\n    });\n    (0, _qunit.test)('it restarts a PR build', async function (assert) {\n      assert.expect(6);\n      server.post('http://localhost:8080/v4/events', () => [201, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        id: '2'\n      })]);\n      const controller = this.owner.lookup('controller:pipeline/events');\n      Ember.run(() => {\n        controller.store.push({\n          data: {\n            id: '123',\n            type: 'build',\n            attributes: {\n              parentBuildId: '345'\n            }\n          }\n        });\n        controller.set('selectedEventObj', {\n          id: '1',\n          sha: 'sha',\n          prNum: '3'\n        });\n        controller.set('pipeline', Ember.Object.create({\n          id: '1234'\n        }));\n        controller.set('activeTab', 'pulls');\n        controller.set('reload', () => {\n          assert.ok(true);\n          return Promise.resolve({});\n        });\n        controller.set('model', {\n          events: Ember.Object.create({})\n        });\n\n        controller.transitionToRoute = path => {\n          assert.equal(path, 'pipeline/1234/pulls');\n        };\n\n        assert.notOk(controller.get('isShowingModal'));\n        controller.send('startDetachedBuild', {\n          buildId: '123',\n          name: 'deploy'\n        });\n        assert.ok(controller.get('isShowingModal'));\n      });\n      await (0, _testHelpers.settled)();\n      const [request] = server.handledRequests;\n      const payload = JSON.parse(request.requestBody);\n      assert.notOk(controller.get('isShowingModal'));\n      assert.deepEqual(payload, {\n        pipelineId: '1234',\n        startFrom: 'PR-3:deploy',\n        buildId: 123,\n        parentBuildId: 345,\n        parentEventId: 1,\n        causeMessage: 'Manually started by apple'\n      });\n    });\n    (0, _qunit.test)('it stops a build', async function (assert) {\n      assert.expect(3);\n      server.put('http://localhost:8080/v4/builds/123', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        id: '123'\n      })]);\n      const controller = this.owner.lookup('controller:pipeline/events');\n      const job = {\n        hasMany: () => ({\n          reload: () => assert.ok(true)\n        }),\n        buildId: '123',\n        name: 'deploy'\n      };\n      Ember.run(() => {\n        controller.store.push({\n          data: {\n            id: '123',\n            type: 'build',\n            attributes: {\n              status: 'RUNNING'\n            }\n          }\n        });\n        controller.set('model', {\n          events: Ember.Object.create({})\n        });\n        const build = controller.store.peekRecord('build', '123');\n        build.set('status', 'ABORTED');\n        build.save();\n        controller.send('stopBuild', job);\n      });\n      await (0, _testHelpers.settled)();\n      const [request] = server.handledRequests;\n      const payload = JSON.parse(request.requestBody);\n      assert.notOk(controller.get('isShowingModal'));\n      assert.deepEqual(payload, {\n        status: 'ABORTED'\n      });\n    });\n    (0, _qunit.test)('it starts PR build(s)', async function (assert) {\n      const prNum = 999;\n      assert.expect(5);\n      server.post('http://localhost:8080/v4/events', () => [201, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        id: '5679',\n        pipelineId: '1234'\n      })]);\n      const controller = this.owner.lookup('controller:pipeline/events');\n      const jobs = [{\n        hasMany: () => ({\n          reload: () => assert.ok(true)\n        })\n      }];\n      Ember.run(() => {\n        controller.set('pipeline', Ember.Object.create({\n          id: '1234'\n        }));\n        controller.set('model', {\n          events: Ember.Object.create({})\n        });\n        assert.notOk(controller.get('isShowingModal'));\n        controller.send('startPRBuild', prNum, jobs);\n        assert.ok(controller.get('isShowingModal'));\n      });\n      await (0, _testHelpers.settled)();\n      const [request] = server.handledRequests;\n      const payload = JSON.parse(request.requestBody);\n      assert.notOk(controller.get('isShowingModal'));\n      assert.deepEqual(payload, {\n        causeMessage: 'Manually started by apple',\n        pipelineId: '1234',\n        startFrom: '~pr',\n        prNum\n      });\n    });\n    (0, _qunit.test)('New event comes top of PR list when it starts a PR build with prChain', async function (assert) {\n      const prNum = 3;\n      const jobs = [{\n        hasMany: () => ({\n          reload: () => assert.ok(true)\n        })\n      }];\n      assert.expect(5);\n      server.post('http://localhost:8080/v4/events', () => [201, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify({\n        id: '2'\n      })]);\n\n      const createRecordStub = _sinon.default.stub();\n\n      const controller = this.owner.factoryFor('controller:pipeline/events').create({\n        store: {\n          createRecord: createRecordStub\n        }\n      });\n      const newEvent = Ember.Object.create({\n        id: 3,\n        prNum: '3',\n        sha: 'sha1',\n        save: () => Promise.resolve(),\n        get: () => Promise.resolve()\n      });\n      createRecordStub.returns(newEvent);\n      Ember.run(() => {\n        const event1 = Ember.Object.create({\n          id: '1',\n          prNum: '2',\n          sha: 'sha1'\n        });\n        const event2 = Ember.Object.create({\n          id: '2',\n          prNum: '3',\n          sha: 'sha2'\n        });\n        controller.set('prEvents', Ember.A([event1, event2]));\n        controller.set('pipeline', Ember.Object.create({\n          id: '1234',\n          prChain: true\n        }));\n        controller.set('model', {\n          events: Ember.Object.create({})\n        });\n        assert.notOk(controller.get('isShowingModal'));\n        controller.send('startPRBuild', prNum, jobs);\n        assert.ok(controller.get('isShowingModal'));\n      });\n      await (0, _testHelpers.settled)();\n      assert.equal(controller.get('prEvents')[0].id, 3);\n      assert.equal(controller.get('prEvents')[0].prNum, '3');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline/events/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | pipeline/events', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:pipeline/index');\n      assert.ok(route);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline/index/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | pipeline/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:pipeline/index');\n      assert.ok(route);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline/metrics/controller-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"sinon\", \"screwdriver-ui/tests/mock/metrics\"], function (_qunit, _emberQunit, _testHelpers, _sinon, _metrics) {\n  \"use strict\";\n\n  let chartMock;\n  let metricsMock;\n  (0, _qunit.module)('Unit | Controller | pipeline/metrics', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      metricsMock = (0, _metrics.model)();\n      chartMock = {\n        internal: {\n          x: {\n            orgDomain: _sinon.default.stub().returns([0, 100])\n          },\n          subX: {\n            orgDomain: _sinon.default.stub().returns([0, 1000])\n          },\n          hideTooltip: _sinon.default.stub(),\n          tooltip: {\n            classed: _sinon.default.stub()\n          }\n        },\n        tooltip: {},\n        hide: _sinon.default.stub(),\n        show: _sinon.default.stub(),\n        zoom: _sinon.default.stub()\n      };\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:pipeline/metrics');\n      assert.ok(controller);\n    });\n    (0, _qunit.test)('it creates chart configurations for events, builds and steps charts', function (assert) {\n      let controller = this.owner.lookup('controller:pipeline/metrics');\n      Ember.run(() => {\n        controller.set('model', metricsMock);\n      });\n      return (0, _testHelpers.settled)().then(() => {\n        assert.ok(controller.get('metrics'));\n        assert.deepEqual(controller.get('eventMetrics.columns'), [['total', ...metricsMock.metrics.events.total], ['duration', ...metricsMock.metrics.events.duration], ['imagePullTime', ...metricsMock.metrics.events.imagePullTime], ['queuedTime', ...metricsMock.metrics.events.queuedTime]]);\n        assert.equal(controller.get('eventMetrics.hide'), 'total');\n        assert.deepEqual(JSON.parse(JSON.stringify(controller.get('eventLegend'))), [{\n          key: 'duration',\n          name: 'Duration',\n          style: {\n            string: 'border-color:#16c045 #ea0000 #ea0000 #16c045'\n          }\n        }, {\n          key: 'queuedTime',\n          name: 'Queued',\n          style: {\n            string: 'border-color:#c5c5c5'\n          }\n        }, {\n          key: 'imagePullTime',\n          name: 'Image Pull',\n          style: {\n            string: 'border-color:#dfdfdf'\n          }\n        }]);\n        assert.deepEqual(controller.get('buildMetrics.json'), metricsMock.metrics.builds);\n        assert.deepEqual(controller.get('buildMetrics.keys.value'), ['main', 'publish', 'beta', 'prod']);\n        assert.deepEqual(JSON.parse(JSON.stringify(controller.get('buildLegend'))), [{\n          key: 'main',\n          name: 'main',\n          style: {\n            string: 'border-color:#87d812'\n          }\n        }, {\n          key: 'publish',\n          name: 'publish',\n          style: {\n            string: 'border-color:#fed800'\n          }\n        }, {\n          key: 'beta',\n          name: 'beta',\n          style: {\n            string: 'border-color:#1ac6f4'\n          }\n        }, {\n          key: 'prod',\n          name: 'prod',\n          style: {\n            string: 'border-color:#6e2ebf'\n          }\n        }]);\n        assert.deepEqual(controller.get('stepMetrics.json'), metricsMock.metrics.steps.data);\n        assert.deepEqual(controller.get('stepMetrics.keys.value'), ['install', 'install-browsers', 'sd-setup-init', 'sd-setup-launcher', 'sd-setup-scm', 'sd-setup-screwdriver-cache-bookend', 'sd-teardown-screwdriver-artifact-bookend', 'sd-teardown-screwdriver-cache-bookend', 'sd-teardown-screwdriver-coverage-bookend', 'test']);\n        assert.deepEqual(JSON.parse(JSON.stringify(controller.get('stepLegend'))), [{\n          key: 'install',\n          name: 'install',\n          style: {\n            string: 'border-color:#87d812'\n          }\n        }, {\n          key: 'install-browsers',\n          name: 'install-browsers',\n          style: {\n            string: 'border-color:#fed800'\n          }\n        }, {\n          key: 'sd-setup-init',\n          name: 'sd-setup-init',\n          style: {\n            string: 'border-color:#1ac6f4'\n          }\n        }, {\n          key: 'sd-setup-launcher',\n          name: 'sd-setup-launcher',\n          style: {\n            string: 'border-color:#6e2ebf'\n          }\n        }, {\n          key: 'sd-setup-scm',\n          name: 'sd-setup-scm',\n          style: {\n            string: 'border-color:#1f77b4'\n          }\n        }, {\n          key: 'sd-setup-screwdriver-cache-bookend',\n          name: 'sd-setup-screwdriver-cache-bookend',\n          style: {\n            string: 'border-color:#aec7e8'\n          }\n        }, {\n          key: 'sd-teardown-screwdriver-artifact-bookend',\n          name: 'sd-teardown-screwdriver-artifact-bookend',\n          style: {\n            string: 'border-color:#ff7f0e'\n          }\n        }, {\n          key: 'sd-teardown-screwdriver-cache-bookend',\n          name: 'sd-teardown-screwdriver-cache-bookend',\n          style: {\n            string: 'border-color:#2ca02c'\n          }\n        }, {\n          key: 'sd-teardown-screwdriver-coverage-bookend',\n          name: 'sd-teardown-screwdriver-coverage-bookend',\n          style: {\n            string: 'border-color:#ffbb78'\n          }\n        }, {\n          key: 'test',\n          name: 'test',\n          style: {\n            string: 'border-color:#98df8a'\n          }\n        }], 'stepLegend');\n        assert.ok(controller.get('axis.x'));\n        assert.ok(controller.get('axis.y'));\n        assert.ok(controller.get('tooltip.contents'));\n        assert.ok(controller.get('color.pattern'));\n        assert.ok(controller.get('size'));\n        assert.ok(controller.get('transition'));\n        assert.ok(controller.get('grid'));\n        assert.ok(controller.get('bar'));\n        assert.notOk(controller.get('legend.show'));\n        assert.ok(controller.get('point'));\n        assert.ok(controller.get('subchart'));\n        assert.ok(controller.get('zoom'));\n        assert.ok(controller.get('onInitFns'));\n        assert.ok(controller.get('setDates'));\n      });\n    });\n    (0, _qunit.test)('it toggles trendline chart', function (assert) {\n      let controller = this.owner.lookup('controller:pipeline/metrics');\n      Ember.run(() => {\n        controller.set('model', metricsMock);\n        controller.set('eventsChart', chartMock);\n      });\n      return (0, _testHelpers.settled)().then(() => {\n        controller.send('toggleTrendlineView', true);\n        assert.equal(controller.get('inTrendlineView'), true);\n        assert.deepEqual(JSON.parse(JSON.stringify(controller.get('eventLegend'))), [{\n          key: 'total',\n          name: 'Event Duration',\n          style: {\n            string: 'border-color:#0066df'\n          }\n        }], 'eventLegend');\n        assert.ok(chartMock.internal.x.orgDomain.called);\n        assert.ok(chartMock.show.calledWith('total'));\n        assert.ok(chartMock.hide.calledWith(['queuedTime', 'imagePullTime', 'duration']));\n        assert.ok(chartMock.zoom.calledWith([0, 100]));\n      });\n    });\n    (0, _qunit.test)('it sets dates, range and job id', function (assert) {\n      let controller = this.owner.lookup('controller:pipeline/metrics');\n      controller.transitionToRoute = _sinon.default.stub();\n      Ember.run(() => {\n        controller.set('model', metricsMock);\n        controller.set('setDates', _sinon.default.stub());\n        controller.set('actions.setJobId', _sinon.default.stub());\n        assert.equal(controller.get('selectedRange'), '1wk');\n        assert.equal(controller.get('startTime'), metricsMock.startTime);\n        assert.equal(controller.get('endTime'), metricsMock.endTime);\n        assert.equal(controller.get('selectedJobName'), 'main');\n      });\n      return (0, _testHelpers.settled)().then(() => {\n        const start = new Date();\n        const startISO = start.toISOString();\n        const end = new Date(start);\n        end.setHours(23, 59, 59);\n        const endISO = end.toISOString();\n        controller.send('setTimeRange', '1mo');\n        assert.equal(controller.get('selectedRange'), '1mo');\n        controller.send('setCustomRange', [start, end]);\n        assert.ok(controller.get('setDates').calledWith(startISO, endISO));\n        controller.send('selectJob', 'publish');\n        assert.ok(controller.get('actions.setJobId').calledWith('157'));\n        assert.ok(controller.transitionToRoute.called);\n        controller.send('selectJob', 'do not exist');\n        assert.equal(controller.get('errorMessage'), 'Unknown Job: do not exist');\n      });\n    });\n    (0, _qunit.test)('it resets chart zoom level', function (assert) {\n      let controller = this.owner.lookup('controller:pipeline/metrics');\n      Ember.run(() => {\n        controller.set('model', metricsMock);\n        controller.set('eventsChart', chartMock);\n        controller.set('buildsChart', chartMock);\n      });\n      return (0, _testHelpers.settled)().then(() => {\n        controller.send('resetZoom', 'eventsChart', 'buildsChart', {});\n        assert.ok(chartMock.internal.x.orgDomain.calledTwice);\n        assert.ok(chartMock.internal.subX.orgDomain.calledTwice);\n        assert.ok(chartMock.internal.hideTooltip.calledTwice);\n        assert.ok(chartMock.internal.tooltip.classed.calledTwice);\n        assert.ok(chartMock.internal.tooltip.classed.calledWith('locked', false));\n        assert.ok(chartMock.zoom.calledTwice);\n        assert.ok(chartMock.zoom.calledWith([0, 1000]));\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline/metrics/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | pipeline/metrics', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:pipeline/metrics');\n      assert.ok(route);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline/model-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | pipeline', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('pipeline'));\n      assert.ok(!!model);\n    });\n    (0, _qunit.test)('it gets correct appId', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('pipeline'));\n      Ember.run(() => {\n        const scmRepoMock = {\n          name: 'foo/bar',\n          branch: 'master',\n          url: 'https://github.com/foo/bar'\n        };\n        model.set('scmRepo', scmRepoMock);\n        assert.equal(model.get('appId'), 'foo/bar');\n      });\n    });\n    (0, _qunit.test)('it gets correct hub url', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('pipeline'));\n      Ember.run(() => {\n        const scmRepoMock = {\n          name: 'foo/bar',\n          branch: 'master',\n          url: 'https://github.com/foo/bar'\n        };\n        model.set('scmRepo', scmRepoMock);\n        assert.equal(model.get('hubUrl'), 'https://github.com/foo/bar');\n      });\n    });\n    (0, _qunit.test)('it gets correct branch', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('pipeline'));\n      Ember.run(() => {\n        const scmRepoMock = {\n          name: 'foo/bar',\n          branch: 'master',\n          url: 'https://github.com/foo/bar'\n        };\n        model.set('scmRepo', scmRepoMock);\n        assert.equal(model.get('branch'), 'master');\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline/options/controller-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"pretender\"], function (_qunit, _emberQunit, _testHelpers, _pretender) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Unit | Controller | pipeline/options', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it handles updating job state', function (assert) {\n      server.put('http://localhost:8080/v4/jobs/1234', () => [200, {}, JSON.stringify({\n        id: 1234\n      })]);\n      let controller = this.owner.lookup('controller:pipeline/options');\n      Ember.run(() => {\n        controller.store.push({\n          data: {\n            id: '1234',\n            type: 'job',\n            attributes: {\n              status: 'DISABLED'\n            }\n          }\n        });\n        controller.send('setJobStatus', '1234', 'ENABLED', 'tkyi', 'testing');\n      });\n      return (0, _testHelpers.settled)().then(() => {\n        const [request] = server.handledRequests;\n        const payload = JSON.parse(request.requestBody);\n        assert.equal(payload.state, 'ENABLED');\n        assert.equal(payload.stateChanger, 'tkyi');\n        assert.equal(payload.stateChangeMessage, 'testing');\n      });\n    });\n    (0, _qunit.test)('it handles deleting pipelines', function (assert) {\n      assert.expect(2);\n      server.delete('http://localhost:8080/v4/pipelines/abc1234', () => [200, {}, '{\"id\": \"abc1234\"}']);\n      let controller = this.owner.lookup('controller:pipeline/options');\n      Ember.run(() => {\n        controller.store.push({\n          data: {\n            id: 'abc1234',\n            type: 'pipeline',\n            attributes: {\n              state: 'ENABLED'\n            }\n          }\n        });\n        controller.set('model', {\n          pipeline: controller.store.peekRecord('pipeline', 'abc1234')\n        });\n\n        controller.transitionToRoute = route => {\n          assert.equal(route, 'home');\n        };\n\n        controller.send('removePipeline');\n      });\n      return (0, _testHelpers.settled)().then(() => {\n        assert.ok(true);\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline/options/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | pipeline/options', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:pipeline/options');\n      assert.ok(route);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline/pulls/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | pipeline/pulls', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:pipeline/pulls');\n      assert.ok(route);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | pipeline', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      Ember.run(() => {\n        // Need this to mock store\n        // https://github.com/emberjs/ember-qunit/issues/325\n        this.owner.unregister('service:store');\n      });\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:pipeline');\n      assert.ok(route);\n      assert.equal(route.titleToken(Ember.Object.create({\n        pipeline: Ember.Object.create({\n          name: 'foo:bar'\n        })\n      })), 'foo:bar');\n    });\n    (0, _qunit.test)('it returns model', function (assert) {\n      assert.expect(4);\n      const storeStub = Ember.Service.extend({\n        findRecord(record, id) {\n          assert.ok(id === 1);\n          return new Ember.RSVP.Promise(resolve => resolve('pipeline'));\n        },\n\n        findAll(record) {\n          assert.ok(record === 'collection');\n          return new Ember.RSVP.Promise(resolve => resolve('collections'));\n        }\n\n      });\n      this.owner.register('service:store', storeStub);\n      const route = this.owner.lookup('route:pipeline');\n      return route.model({\n        pipeline_id: 1\n      }).then(results => {\n        assert.equal(results.pipeline, 'pipeline');\n        assert.equal(results.collections, 'collections');\n      });\n    });\n    (0, _qunit.test)('it returns model on collections fetch error', function (assert) {\n      assert.expect(4);\n      const storeStub = Ember.Service.extend({\n        findRecord(record, id) {\n          assert.ok(id === 1);\n          return new Ember.RSVP.Promise(resolve => resolve('pipeline'));\n        },\n\n        findAll(record) {\n          assert.ok(record === 'collection');\n          return new Ember.RSVP.Promise((resolve, reject) => reject());\n        }\n\n      });\n      this.owner.register('service:store', storeStub);\n      const route = this.owner.lookup('route:pipeline');\n      return route.model({\n        pipeline_id: 1\n      }).then(results => {\n        assert.equal(results.pipeline, 'pipeline');\n        assert.deepEqual(results.collections, []);\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline/secrets/controller-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"pretender\"], function (_qunit, _emberQunit, _testHelpers, _pretender) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Unit | Controller | pipeline/secrets', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it can create secrets', function (assert) {\n      server.post('http://localhost:8080/v4/secrets', () => [200, {}, JSON.stringify({\n        id: 1234\n      })]);\n      let controller = this.owner.lookup('controller:pipeline/secrets');\n      assert.ok(controller);\n      Ember.run(() => {\n        controller.set('model', {\n          secrets: {\n            reload() {\n              assert.ok(true);\n            }\n\n          }\n        });\n        controller.send('createSecret', 'batman', 'robin', 'abcd', false);\n      });\n      return (0, _testHelpers.settled)().then(() => {\n        const [request] = server.handledRequests;\n        const payload = JSON.parse(request.requestBody);\n        assert.deepEqual(payload, {\n          pipelineId: 'abcd',\n          name: 'batman',\n          value: 'robin',\n          allowInPR: false\n        });\n      });\n    });\n    (0, _qunit.test)('it can create pipelinetokens', function (assert) {\n      server.post('http://localhost:8080/v4/pipelines/1/tokens', () => [200, {}, JSON.stringify({\n        id: 123\n      })]);\n      let controller = this.owner.lookup('controller:pipeline/secrets');\n      assert.ok(controller);\n      Ember.run(() => {\n        controller.set('model', {\n          tokens: {\n            reload() {\n              assert.ok(true);\n            }\n\n          },\n          pipeline: {\n            id: '1'\n          }\n        });\n        controller.send('createPipelineToken', 'foo', 'bar');\n      });\n      return (0, _testHelpers.settled)().then(() => {\n        const [request] = server.handledRequests;\n        const payload = JSON.parse(request.requestBody);\n        assert.deepEqual(payload, {\n          name: 'foo',\n          description: 'bar'\n        });\n      });\n    });\n    (0, _qunit.test)('it shows errors from server', function (assert) {\n      server.post('http://localhost:8080/v4/secrets', () => [400, {}, JSON.stringify({\n        statusCode: 400,\n        error: 'unfortunate',\n        message: 'a series of unfortunate events'\n      })]);\n      let controller = this.owner.lookup('controller:pipeline/secrets');\n      assert.ok(controller);\n      Ember.run(() => {\n        assert.equal(controller.get('errorMessage'), '');\n        controller.send('createSecret', 'batman', 'robin', 'abcd', false);\n      });\n      return (0, _testHelpers.settled)().then(() => {\n        assert.equal(controller.get('errorMessage'), 'a series of unfortunate events');\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline/secrets/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | pipeline/secrets', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:pipeline/secrets');\n      assert.ok(route);\n      assert.equal(route.titleToken, 'Secrets');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pipeline/serializer-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"pretender\"], function (_qunit, _emberQunit, _testHelpers, _pretender) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Unit | Serializer | pipeline', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let record = Ember.run(() => this.owner.lookup('service:store').createRecord('pipeline'));\n      let serializedRecord = record.serialize();\n      assert.ok(serializedRecord);\n    });\n    (0, _qunit.test)('it does not post with model name as key', function (assert) {\n      assert.expect(2);\n      server.post('http://localhost:8080/v4/pipelines', function () {\n        return [200, {}, JSON.stringify({\n          id: 'abcd'\n        })];\n      });\n      Ember.run(() => {\n        const pipeline = this.owner.lookup('service:store').createRecord('pipeline', {\n          checkoutUrl: 'git@example.com:foo/bar.git'\n        });\n        pipeline.save().then(() => {\n          assert.equal(pipeline.get('id'), 'abcd');\n        });\n      });\n      return (0, _testHelpers.settled)().then(() => {\n        const [request] = server.handledRequests;\n        const payload = JSON.parse(request.requestBody);\n        assert.deepEqual(payload, {\n          checkoutUrl: 'git@example.com:foo/bar.git',\n          rootDir: ''\n        });\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/pr-events/service-test\", [\"pretender\", \"qunit\", \"ember-qunit\"], function (_pretender, _qunit, _emberQunit) {\n  \"use strict\";\n\n  let server;\n\n  const initServer = () => {\n    server.get('http://localhost:8080/v4/pipelines/12345/events', () => [200, {\n      'Content-Type': 'application/json'\n    }, JSON.stringify([{\n      id: 'abcd',\n      causeMessage: 'Merged by batman',\n      commit: {\n        message: 'Merge pull request #2 from batcave/batmobile',\n        author: {\n          username: 'batman',\n          name: 'Bruce W',\n          avatar: 'http://example.com/u/batman/avatar',\n          url: 'http://example.com/u/batman'\n        },\n        url: 'http://example.com/batcave/batmobile/commit/abcdef1029384'\n      },\n      truncatedMessage: 'Merge it',\n      createTime: '2016-11-04T20:09:41.238Z',\n      creator: {\n        username: 'batman',\n        name: 'Bruce W',\n        avatar: 'http://example.com/u/batman/avatar',\n        url: 'http://example.com/u/batman'\n      },\n      pr: {\n        url: 'https://github.com/screwdriver-cd/ui/pull/292'\n      },\n      pipelineId: '12345',\n      sha: 'abcdef1029384',\n      truncatedSha: 'abcdef',\n      type: 'pr',\n      workflow: ['main', 'publish'],\n      builds: ['build1', 'build2']\n    }])]);\n    server.get('http://localhost:8080/v4/jobs/2/builds', () => [200, {\n      'Content-Type': 'application/json'\n    }, JSON.stringify([{\n      eventId: 'abcd',\n      id: '2'\n    }])]);\n  };\n\n  const sessionServiceMock = Ember.Service.extend({\n    isAuthenticated: true,\n    data: {\n      authenticated: {\n        token: 'banana'\n      }\n    }\n  });\n  (0, _qunit.module)('Unit | Service | pr events', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n      this.owner.register('service:session', sessionServiceMock);\n      this.session = this.owner.lookup('service:session');\n      this.session.set('isAuthenticated', true);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      const service = this.owner.lookup('service:pr-events');\n      assert.ok(service);\n    });\n    (0, _qunit.test)('it fetches events with type pr', function (assert) {\n      initServer();\n      assert.expect(3);\n      const service = this.owner.lookup('service:pr-events');\n      const b = service.getPRevents(12345, 'https://github.com/screwdriver-cd/ui/pull/292', 2);\n      b.then(pair => {\n        assert.equal(pair[0].event.id, 'abcd');\n        assert.equal(pair[0].build.eventId, 'abcd');\n        assert.equal(pair[0].build.id, 2);\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/search/controller-test\", [\"qunit\", \"ember-qunit\", \"screwdriver-ui/tests/helpers/inject-session\"], function (_qunit, _emberQunit, _injectSession) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | search', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      (0, _injectSession.default)(this);\n      const controller = this.owner.lookup('controller:search');\n      assert.ok(controller);\n    });\n    (0, _qunit.test)('it calls updatePipelines', function (assert) {\n      (0, _injectSession.default)(this);\n      const controller = this.owner.lookup('controller:search');\n      const pipelineModelMockArray = [Ember.Object.create({\n        id: 2,\n        appId: 'batman/tumbler',\n        branch: 'waynecorp',\n        scmContext: 'bitbucket:bitbucket.org'\n      }), Ember.Object.create({\n        id: 1,\n        appId: 'foo/bar',\n        branch: 'master',\n        scmContext: 'github:github.com'\n      })];\n      controller.set('store', {\n        query(modelName, params) {\n          assert.strictEqual(modelName, 'pipeline');\n          assert.deepEqual(params, {\n            page: 2,\n            count: 3,\n            sortBy: 'name',\n            sort: 'ascending'\n          });\n          return Ember.RSVP.resolve(pipelineModelMockArray);\n        }\n\n      });\n      controller.send('updatePipelines', {\n        page: 2\n      });\n    });\n    (0, _qunit.test)('it calls updatePipelines with search param', function (assert) {\n      (0, _injectSession.default)(this);\n      const controller = this.owner.lookup('controller:search');\n      const pipelineModelMockArray = [Ember.Object.create({\n        id: 2,\n        appId: 'batman/tumbler',\n        branch: 'waynecorp',\n        scmContext: 'bitbucket:bitbucket.org'\n      }), Ember.Object.create({\n        id: 1,\n        appId: 'foo/bar',\n        branch: 'master',\n        scmContext: 'github:github.com'\n      })];\n      controller.set('store', {\n        query(modelName, params) {\n          assert.strictEqual(modelName, 'pipeline');\n          assert.deepEqual(params, {\n            page: 2,\n            count: 3,\n            sortBy: 'name',\n            sort: 'ascending',\n            search: 'ba'\n          });\n          return Ember.RSVP.resolve(pipelineModelMockArray);\n        }\n\n      });\n      controller.send('updatePipelines', {\n        page: 2,\n        search: 'ba'\n      });\n    });\n    (0, _qunit.test)('it calls addToCollection', function (assert) {\n      (0, _injectSession.default)(this);\n      const controller = this.owner.lookup('controller:search');\n      let pipelineIds = [1, 2];\n      const collectionModelMock = {\n        id: 1,\n        name: 'collection1',\n        description: 'description1',\n        pipelineIds,\n\n        get(field) {\n          assert.strictEqual(field, 'pipelineIds'); // The collection currently has pipelineIds 1 and 2\n\n          return pipelineIds;\n        },\n\n        set(field, value) {\n          assert.strictEqual(field, 'pipelineIds');\n          assert.deepEqual(value, [1, 2, 3]);\n          pipelineIds = value;\n        },\n\n        save() {\n          assert.deepEqual(pipelineIds, [1, 2, 3]);\n          return Ember.RSVP.resolve({\n            id: 1,\n            name: 'collection1',\n            description: 'description1',\n            pipelineIds: [1, 2, 3]\n          });\n        }\n\n      };\n      controller.set('store', {\n        findRecord(modelName, collectionId) {\n          assert.strictEqual(modelName, 'collection');\n          assert.strictEqual(collectionId, 1);\n          return Ember.RSVP.resolve(collectionModelMock);\n        }\n\n      }); // Add pipeline with id 3 to collection with id 1\n\n      controller.send('addToCollection', 3, 1);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/search/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | search', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      Ember.run(() => {\n        // Need this to mock store\n        // https://github.com/emberjs/ember-qunit/issues/325\n        this.owner.unregister('service:store');\n      });\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:search');\n      assert.ok(route);\n      assert.equal(route.titleToken, 'Search');\n    });\n    (0, _qunit.test)('it returns model even on collections fetch error', function (assert) {\n      assert.expect(5);\n      const storeStub = Ember.Service.extend({\n        query(record, conf) {\n          assert.ok(conf.page === 1);\n          assert.ok(conf.search === 'search');\n          return new Ember.RSVP.Promise(resolve => resolve('results'));\n        },\n\n        findAll(record) {\n          assert.ok(record === 'collection');\n          return new Ember.RSVP.Promise((resolve, reject) => reject());\n        }\n\n      });\n      this.owner.register('service:store', storeStub);\n      const route = this.owner.lookup('route:search');\n      return route.model({\n        query: 'search'\n      }).then(results => {\n        assert.equal(results.pipelines, 'results');\n        assert.deepEqual(results.collections, []);\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/secret/model-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | secret', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('secret')); // let store = this.store();\n\n      assert.ok(!!model);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/secret/serializer-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"pretender\"], function (_qunit, _emberQunit, _testHelpers, _pretender) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Unit | Serializer | secret', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    }); // Replace this with your real tests.\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let record = Ember.run(() => this.owner.lookup('service:store').createRecord('secret'));\n      let serializedRecord = record.serialize();\n      assert.ok(serializedRecord);\n    });\n    (0, _qunit.test)('it does not post with model name as key', function (assert) {\n      assert.expect(2);\n      server.post('http://localhost:8080/v4/secrets', function () {\n        return [200, {}, JSON.stringify({\n          id: 'abcd'\n        })];\n      });\n      Ember.run(() => {\n        const secret = this.owner.lookup('service:store').createRecord('secret', {\n          pipelineId: 'aabb',\n          name: 'foo',\n          value: 'bar'\n        });\n        secret.save().then(() => {\n          assert.equal(secret.get('id'), 'abcd');\n        });\n      });\n      return (0, _testHelpers.settled)().then(() => {\n        const [request] = server.handledRequests;\n        const payload = JSON.parse(request.requestBody);\n        assert.deepEqual(payload, {\n          pipelineId: 'aabb',\n          name: 'foo',\n          value: 'bar',\n          allowInPR: false\n        });\n      });\n    });\n    (0, _qunit.test)('it serializes only dirty fields', function (assert) {\n      assert.expect(1);\n      server.put('http://localhost:8080/v4/secrets/abcd', function () {\n        return [200, {}, JSON.stringify({\n          id: 'abcd'\n        })];\n      });\n      Ember.run(() => {\n        this.owner.lookup('service:store').push({\n          data: {\n            id: 'abcd',\n            type: 'secret',\n            attributes: {\n              pipelineId: 'aabb',\n              name: 'foo',\n              value: 'bar',\n              allowInPR: false\n            }\n          }\n        });\n        const secret = this.owner.lookup('service:store').peekRecord('secret', 'abcd');\n        secret.set('value', 'newValue');\n        secret.save();\n      });\n      return (0, _testHelpers.settled)().then(() => {\n        const [request] = server.handledRequests;\n        const payload = JSON.parse(request.requestBody);\n        assert.deepEqual(payload, {\n          value: 'newValue'\n        });\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/store/service-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Service | store', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:store');\n      assert.ok(service);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/sync/service-test\", [\"qunit\", \"ember-qunit\", \"pretender\"], function (_qunit, _emberQunit, _pretender) {\n  \"use strict\";\n\n  let server;\n\n  const sync = () => {\n    server.post('http://localhost:8080/v4/pipelines/1/sync/', () => [204]);\n  };\n\n  const syncWithPath = () => {\n    server.post('http://localhost:8080/v4/pipelines/1/sync/webhooks', () => [204]);\n  };\n\n  const syncFailed = () => {\n    server.post('http://localhost:8080/v4/pipelines/1/sync/', () => [409, {\n      'Content-Type': 'application/json'\n    }, JSON.stringify({\n      statusCode: 409,\n      error: 'Conflict',\n      message: 'something conflicting'\n    })]);\n  };\n\n  (0, _qunit.module)('Unit | Service | sync', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      const service = this.owner.lookup('service:sync');\n      assert.ok(service);\n    });\n    (0, _qunit.test)('it makes a call to sync successfully without passing syncPath', function (assert) {\n      assert.expect(1);\n      sync();\n      const service = this.owner.lookup('service:sync');\n      const p = service.syncRequests(1, undefined);\n      p.then(() => {\n        const [request] = server.handledRequests;\n        assert.equal(request.url, 'http://localhost:8080/v4/pipelines/1/sync/');\n      });\n    });\n    (0, _qunit.test)('it makes a call to sync successfully with syncPath', function (assert) {\n      assert.expect(1);\n      syncWithPath();\n      const service = this.owner.lookup('service:sync');\n      const p = service.syncRequests(1, 'webhooks');\n      p.then(() => {\n        const [request] = server.handledRequests;\n        assert.equal(request.url, 'http://localhost:8080/v4/pipelines/1/sync/webhooks');\n      });\n    });\n    (0, _qunit.test)('it fails to sync and rejects with error message ', function (assert) {\n      assert.expect(2);\n      syncFailed();\n      const service = this.owner.lookup('service:sync');\n      const p = service.syncRequests(1, undefined);\n      p.catch(error => {\n        assert.equal(error, 'something conflicting');\n        const [request] = server.handledRequests;\n        assert.equal(request.url, 'http://localhost:8080/v4/pipelines/1/sync/');\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/template/service-test\", [\"qunit\", \"ember-qunit\", \"pretender\"], function (_qunit, _emberQunit, _pretender) {\n  \"use strict\";\n\n  const sessionStub = Ember.Service.extend({\n    data: {\n      authenticated: {\n        token: 'faketoken'\n      }\n    }\n  });\n  const createTime = '2016-09-23T16:53:00.274Z';\n  const created = new Date(createTime).getTime();\n  const lastUpdated = \"\".concat(humanizeDuration(Date.now() - created, {\n    round: true,\n    largest: 1\n  }), \" ago\");\n  let server;\n  (0, _qunit.module)('Unit | Service | template', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n      this.owner.register('service:session', sessionStub);\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it fetches one set of template versions', function (assert) {\n      assert.expect(2);\n      server.get('http://localhost:8080/v4/templates/foo%2Fbar', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([{\n        id: 2,\n        namespace: 'foo',\n        name: 'bar',\n        version: '2.0.0',\n        createTime\n      }, {\n        id: 1,\n        namespace: 'foo',\n        name: 'bar',\n        version: '1.0.0',\n        createTime\n      }])]);\n      let service = this.owner.lookup('service:template');\n      assert.ok(service);\n      const t = service.getOneTemplate('foo/bar');\n      t.then(templates => {\n        /* eslint-disable max-len */\n        assert.deepEqual(templates, [{\n          id: 2,\n          fullName: 'foo/bar',\n          namespace: 'foo',\n          name: 'bar',\n          version: '2.0.0',\n          createTime,\n          lastUpdated\n        }, {\n          id: 1,\n          fullName: 'foo/bar',\n          namespace: 'foo',\n          name: 'bar',\n          version: '1.0.0',\n          createTime,\n          lastUpdated\n        }]);\n        /* eslint-enable max-len */\n      });\n    });\n    (0, _qunit.test)('it fetches all templates', function (assert) {\n      assert.expect(2);\n      server.get('http://localhost:8080/v4/templates', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify([{\n        id: 3,\n        namespace: 'boo',\n        name: 'baz',\n        version: '2.0.0',\n        createTime\n      }, {\n        id: 2,\n        namespace: 'foo',\n        name: 'baz',\n        version: '2.0.0',\n        createTime\n      }, {\n        id: 1,\n        namespace: 'foo',\n        name: 'bar',\n        version: '1.0.0',\n        createTime\n      }])]);\n      let service = this.owner.lookup('service:template');\n      assert.ok(service);\n      const t = service.getAllTemplates();\n      t.then(templates => {\n        assert.deepEqual(templates, [\n        /* eslint-disable max-len */\n        {\n          id: 3,\n          fullName: 'boo/baz',\n          namespace: 'boo',\n          name: 'baz',\n          version: '2.0.0',\n          createTime,\n          lastUpdated\n        }, {\n          id: 2,\n          fullName: 'foo/baz',\n          namespace: 'foo',\n          name: 'baz',\n          version: '2.0.0',\n          createTime,\n          lastUpdated\n        }, {\n          id: 1,\n          fullName: 'foo/bar',\n          namespace: 'foo',\n          name: 'bar',\n          version: '1.0.0',\n          createTime,\n          lastUpdated\n        }]);\n        /* eslint-enable max-len */\n      });\n    });\n    (0, _qunit.test)('it deletes all versions of a template', function (assert) {\n      assert.expect(4);\n      server.delete('http://localhost:8080/v4/templates/foo%2Fbar', () => [204]);\n      let service = this.owner.lookup('service:template');\n      assert.ok(service);\n      const t = service.deleteTemplates('foo/bar');\n      t.then(() => {\n        const [request] = server.handledRequests;\n        assert.equal(request.status, '204');\n        assert.equal(request.method, 'DELETE');\n        assert.equal(request.url, 'http://localhost:8080/v4/templates/foo%2Fbar');\n      });\n    });\n    (0, _qunit.test)('it returns 401 on unauthorized deletion', function (assert) {\n      assert.expect(2);\n      server.delete('http://localhost:8080/v4/templates/foo%2Fbar', () => [401, {\n        'Content-Type': 'application/json'\n      }, 'Unauthorized']);\n      let service = this.owner.lookup('service:template');\n      assert.ok(service);\n      const t = service.deleteTemplates('foo/bar');\n      t.then(() => {}, err => {\n        assert.equal(err, 'You do not have the permissions to remove this template.');\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/templates/detail/controller-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  const templateServiceStub = Ember.Service.extend({\n    deleteTemplates() {\n      return Ember.RSVP.resolve([204]);\n    }\n\n  });\n  (0, _qunit.module)('Unit | Controller | templates/detail', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n\n    hooks.beforeEach(function beforeEach() {\n      this.owner.register('service:template', templateServiceStub);\n    });\n    (0, _qunit.test)('it parses model properly', function (assert) {\n      let controller = this.owner.lookup('controller:templates/detail');\n      controller.set('model', [{\n        id: 3,\n        version: '3.0.0'\n      }, {\n        id: 2,\n        version: '2.0.0'\n      }, {\n        id: 1,\n        version: '1.0.0'\n      }]);\n      assert.ok(controller);\n      assert.equal(controller.get('selectedVersion'), null);\n      assert.equal(controller.get('latest.id'), 3);\n      assert.equal(controller.get('versionTemplate.id'), 3);\n    });\n    (0, _qunit.test)('it handles version changes', function (assert) {\n      let controller = this.owner.lookup('controller:templates/detail');\n      controller.set('model', [{\n        id: 3,\n        version: '3.0.0'\n      }, {\n        id: 2,\n        version: '2.0.0'\n      }, {\n        id: 1,\n        version: '1.0.0'\n      }]);\n      assert.ok(controller);\n      assert.equal(controller.get('selectedVersion'), null);\n      assert.equal(controller.get('latest.id'), 3);\n      assert.equal(controller.get('versionTemplate.id'), 3);\n      controller.send('changeVersion', '1.0.0');\n      assert.equal(controller.get('selectedVersion'), '1.0.0');\n      assert.equal(controller.get('versionTemplate.id'), 1);\n      assert.equal(controller.get('latest.id'), 3);\n    });\n    (0, _qunit.test)('it handles model changes', function (assert) {\n      let controller = this.owner.lookup('controller:templates/detail'); // eslint-disable-next-line new-cap\n\n      const arr = Ember.A([{\n        id: 3,\n        version: '3.0.0'\n      }, {\n        id: 2,\n        version: '2.0.0'\n      }, {\n        id: 1,\n        version: '1.0.0'\n      }]);\n      controller.set('model', arr);\n      assert.ok(controller);\n      assert.equal(controller.get('selectedVersion'), null);\n      assert.equal(controller.get('versionTemplate.id'), 3);\n      assert.equal(controller.get('latest.id'), 3);\n      controller.send('changeVersion', '1.0.0');\n      assert.equal(controller.get('selectedVersion'), '1.0.0');\n      assert.equal(controller.get('versionTemplate.id'), 1);\n      arr.unshiftObject({\n        id: 4,\n        version: '4.0.0'\n      });\n      assert.equal(controller.get('selectedVersion'), null);\n      assert.equal(controller.get('versionTemplate.id'), 4);\n      assert.equal(controller.get('latest.id'), 4);\n    });\n    (0, _qunit.test)('it handles template deletion', function (assert) {\n      let controller = this.owner.lookup('controller:templates/detail'); // eslint-disable-next-line new-cap\n\n      const arr = Ember.A([{\n        id: 3,\n        name: 'sample',\n        version: '3.0.0'\n      }, {\n        id: 2,\n        name: 'sample',\n        version: '2.0.0'\n      }, {\n        id: 1,\n        name: 'sample',\n        version: '1.0.0'\n      }]);\n      controller.set('model', arr);\n      assert.ok(controller);\n\n      controller.transitionToRoute = route => {\n        assert.equal(route, 'templates');\n      };\n\n      controller.send('removeTemplate', 'sample');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/templates/detail/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  const templateServiceStub = Ember.Service.extend({\n    getOneTemplate() {\n      return Ember.RSVP.resolve([{\n        id: 3,\n        name: 'baz',\n        version: '3.0.0',\n        namespace: 'foo'\n      }, {\n        id: 2,\n        name: 'baz',\n        version: '2.0.0',\n        namespace: 'foo'\n      }, {\n        id: 1,\n        name: 'baz',\n        version: '1.0.0',\n        namespace: 'foo'\n      }, {\n        id: 6,\n        name: 'baz',\n        version: '3.0.0',\n        namespace: 'bar'\n      }, {\n        id: 5,\n        name: 'baz',\n        version: '2.0.0',\n        namespace: 'bar'\n      }, {\n        id: 4,\n        name: 'baz',\n        version: '1.0.0',\n        namespace: 'bar'\n      }]);\n    },\n\n    getTemplateTags(namespace, name) {\n      return Ember.RSVP.resolve([{\n        id: 5,\n        name,\n        version: '3.0.0',\n        tag: 'latest'\n      }, {\n        id: 6,\n        name,\n        version: '3.0.0',\n        tag: 'stable'\n      }, {\n        id: 7,\n        name,\n        version: '2.0.0',\n        tag: 'meeseeks'\n      }]);\n    }\n\n  });\n  (0, _qunit.module)('Unit | Route | templates/detail', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n\n    hooks.beforeEach(function beforeEach() {\n      this.owner.register('service:template', templateServiceStub);\n    });\n    (0, _qunit.test)('it asks for the list of templates for a given name', function (assert) {\n      let route = this.owner.lookup('route:templates/detail');\n      assert.ok(route);\n      return route.model({\n        namespace: 'foo',\n        name: 'baz'\n      }).then(templates => {\n        assert.equal(templates.length, 3);\n        assert.equal(templates[0].namespace, 'foo');\n        assert.equal(templates[0].name, 'baz');\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/templates/index/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  const templateServiceStub = Ember.Service.extend({\n    getAllTemplates() {\n      return Ember.RSVP.resolve([{\n        id: 3,\n        name: 'foo/bar',\n        version: '3.0.0'\n      }, {\n        id: 2,\n        name: 'foo/baz',\n        version: '2.0.0'\n      }, {\n        id: 1,\n        name: 'bar/baz',\n        version: '1.0.0'\n      }]);\n    }\n\n  });\n  (0, _qunit.module)('Unit | Route | templates/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n\n    hooks.beforeEach(function beforeEach() {\n      this.owner.register('service:template', templateServiceStub);\n    });\n    (0, _qunit.test)('it dedupes the templates by name', function (assert) {\n      let route = this.owner.lookup('route:templates/index');\n      assert.ok(route);\n      return route.model().then(templates => {\n        assert.equal(templates.length, 3);\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/templates/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | templates', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:templates');\n      assert.ok(route);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/token/model-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | token', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('token')); // let store = this.store();\n\n      assert.ok(!!model);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/token/serializer-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"pretender\"], function (_qunit, _emberQunit, _testHelpers, _pretender) {\n  \"use strict\";\n\n  let server;\n  (0, _qunit.module)('Unit | Serializer | token', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      server = new _pretender.default();\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    }); // Replace this with your real tests.\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let record = Ember.run(() => this.owner.lookup('service:store').createRecord('token'));\n      let serializedRecord = record.serialize();\n      assert.ok(serializedRecord);\n    });\n    (0, _qunit.test)('it does not post with model name as key', function (assert) {\n      assert.expect(2);\n      server.post('http://localhost:8080/v4/tokens', function () {\n        return [200, {}, JSON.stringify({\n          id: 1234\n        })];\n      });\n      Ember.run(() => {\n        const token = this.owner.lookup('service:store').createRecord('token', {\n          name: 'foo',\n          description: 'bar'\n        });\n        token.save().then(() => {\n          assert.equal(token.get('id'), 1234);\n        });\n      });\n      return (0, _testHelpers.settled)().then(() => {\n        const [request] = server.handledRequests;\n        const payload = JSON.parse(request.requestBody);\n        assert.deepEqual(payload, {\n          name: 'foo',\n          description: 'bar'\n        });\n      });\n    });\n    (0, _qunit.test)('it serializes only dirty fields', function (assert) {\n      assert.expect(1);\n      server.put('http://localhost:8080/v4/tokens/1234', function () {\n        return [200, {}, JSON.stringify({\n          id: 1234\n        })];\n      });\n      Ember.run(() => {\n        this.owner.lookup('service:store').push({\n          data: {\n            id: 1234,\n            type: 'token',\n            attributes: {\n              name: 'foo',\n              description: 'bar'\n            }\n          }\n        });\n        const token = this.owner.lookup('service:store').peekRecord('token', 1234);\n        token.set('description', 'newDescription');\n        token.save();\n      });\n      return (0, _testHelpers.settled)().then(() => {\n        const [request] = server.handledRequests;\n        const payload = JSON.parse(request.requestBody);\n        assert.deepEqual(payload, {\n          description: 'newDescription'\n        });\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/utils/build-test\", [\"screwdriver-ui/utils/build\", \"qunit\"], function (_build, _qunit) {\n  \"use strict\";\n\n  const {\n    isActiveBuild,\n    isPRJob,\n    statusIcon\n  } = _build.default;\n  (0, _qunit.module)('Unit | Utility | build', function () {\n    (0, _qunit.test)('it checks if the current build is active', assert => {\n      let result = isActiveBuild('QUEUED', '2017-01-05T00:55:46.775Z');\n      assert.ok(result);\n      result = isActiveBuild('RUNNING', '2017-01-05T00:55:46.775Z');\n      assert.ok(result);\n      result = isActiveBuild('BLOCKED', '2017-01-05T00:55:46.775Z');\n      assert.ok(result);\n      result = isActiveBuild('UNSTABLE');\n      assert.ok(result);\n      result = isActiveBuild('UNSTABLE', '2017-01-05T00:55:46.775Z');\n      assert.notOk(result);\n      result = isActiveBuild('CREATED');\n      assert.notOk(result);\n    });\n    (0, _qunit.test)('it checks if the current job is a PR job', assert => {\n      let result = isPRJob('main');\n      assert.notOk(result);\n      result = isPRJob('PR-1:main');\n      assert.ok(result);\n    });\n    (0, _qunit.test)('it gets the right fs class name for given status', assert => {\n      assert.equal(statusIcon('SUCCESS', true), 'check-circle-o');\n      assert.equal(statusIcon('SUCCESS'), 'check-circle');\n      assert.equal(statusIcon('CREATED', true), 'check-circle-o');\n      assert.equal(statusIcon('CREATED'), 'check-circle');\n      assert.equal(statusIcon('RUNNING'), 'spinner fa-spin');\n      assert.equal(statusIcon('QUEUED'), 'spinner fa-spin');\n      assert.equal(statusIcon('UNSTABLE'), 'exclamation-circle');\n      assert.equal(statusIcon('FAILURE', true), 'times-circle-o');\n      assert.equal(statusIcon('FAILURE'), 'times-circle');\n      assert.equal(statusIcon(), 'circle-o');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/utils/git-test\", [\"screwdriver-ui/utils/git\", \"qunit\"], function (_git, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Utility | git', function () {\n    (0, _qunit.test)('it parses the checkout URL correctly', assert => {\n      let result = _git.default.parse('bananas');\n\n      assert.notOk(result.valid);\n      result = _git.default.parse('git@github.com:bananas/peel.git');\n      assert.deepEqual(result, {\n        server: 'github.com',\n        owner: 'bananas',\n        repo: 'peel',\n        branch: 'master',\n        valid: true\n      });\n      result = _git.default.parse('git@github.com:bananas/peel.git#tree');\n      assert.deepEqual(result, {\n        server: 'github.com',\n        owner: 'bananas',\n        repo: 'peel',\n        branch: 'tree',\n        valid: true\n      });\n    });\n    (0, _qunit.test)('it generates the checkout URL correctly', assert => {\n      let result = _git.default.getCheckoutUrl({\n        appId: 'bananas/peel',\n        scmUri: 'github.com:12345:master'\n      });\n\n      assert.strictEqual(result, 'git@github.com:bananas/peel.git#master');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/utils/graph-tools-test\", [\"screwdriver-ui/utils/graph-tools\", \"qunit\"], function (_graphTools, _qunit) {\n  \"use strict\";\n\n  const SIMPLE_GRAPH = {\n    nodes: [{\n      name: '~pr'\n    }, {\n      name: '~commit'\n    }, {\n      name: 'main'\n    }],\n    edges: [{\n      src: '~pr',\n      dest: 'main'\n    }, {\n      src: '~commit',\n      dest: 'main'\n    }]\n  };\n  const COMPLEX_GRAPH = {\n    nodes: [{\n      name: '~pr'\n    }, {\n      name: '~commit'\n    }, {\n      name: 'main',\n      id: 1\n    }, {\n      name: 'A',\n      id: 2\n    }, {\n      name: 'B',\n      id: 3\n    }, {\n      name: 'C',\n      id: 4\n    }, {\n      name: 'D',\n      id: 5\n    }],\n    edges: [{\n      src: '~pr',\n      dest: 'main'\n    }, {\n      src: '~commit',\n      dest: 'main'\n    }, {\n      src: 'main',\n      dest: 'A'\n    }, {\n      src: 'main',\n      dest: 'B'\n    }, {\n      src: 'A',\n      dest: 'C'\n    }, {\n      src: 'B',\n      dest: 'D'\n    }, {\n      src: 'C',\n      dest: 'D'\n    }]\n  };\n  const MORE_COMPLEX_GRAPH = {\n    nodes: [{\n      name: '~pr'\n    }, {\n      name: '~commit'\n    }, {\n      name: 'no_main'\n    }, {\n      name: '~sd@241:main'\n    }, {\n      name: 'publish'\n    }, {\n      name: 'other_publish'\n    }, {\n      name: 'wow_new_main'\n    }, {\n      name: 'detached_main'\n    }, {\n      name: 'after_detached_main'\n    }, {\n      name: 'detached_solo'\n    }],\n    edges: [{\n      src: '~commit',\n      dest: 'no_main'\n    }, {\n      src: '~pr',\n      dest: 'no_main'\n    }, {\n      src: '~sd@241:main',\n      dest: 'no_main'\n    }, {\n      src: 'no_main',\n      dest: 'publish'\n    }, {\n      src: 'wow_new_main',\n      dest: 'other_publish'\n    }, {\n      src: '~commit',\n      dest: 'wow_new_main'\n    }, {\n      src: '~pr',\n      dest: 'wow_new_main'\n    }, {\n      src: '~sd@241:main',\n      dest: 'wow_new_main'\n    }, {\n      src: 'detached_main',\n      dest: 'after_detached_main'\n    }]\n  };\n  (0, _qunit.module)('Unit | Utility | graph tools', function () {\n    (0, _qunit.test)('it gets the right icons', function (assert) {\n      assert.equal((0, _graphTools.icon)('SUCCESS'), '\\ue903');\n      assert.equal((0, _graphTools.icon)('banana'), '\\ue901');\n    });\n    (0, _qunit.test)('it gets an element from a list', function (assert) {\n      const list = [{\n        name: 'foo'\n      }, {\n        name: 'bar'\n      }];\n      const result = (0, _graphTools.node)(list, 'bar');\n      assert.deepEqual(result, {\n        name: 'bar'\n      });\n    });\n    (0, _qunit.test)('it processes a simple graph without builds', function (assert) {\n      const expectedOutput = {\n        nodes: [{\n          name: '~pr',\n          pos: {\n            x: 0,\n            y: 0\n          }\n        }, {\n          name: '~commit',\n          pos: {\n            x: 0,\n            y: 1\n          }\n        }, {\n          name: 'main',\n          pos: {\n            x: 1,\n            y: 0\n          }\n        }],\n        edges: [{\n          src: '~pr',\n          dest: 'main',\n          from: {\n            x: 0,\n            y: 0\n          },\n          to: {\n            x: 1,\n            y: 0\n          }\n        }, {\n          src: '~commit',\n          dest: 'main',\n          from: {\n            x: 0,\n            y: 1\n          },\n          to: {\n            x: 1,\n            y: 0\n          }\n        }],\n        meta: {\n          height: 2,\n          width: 2\n        }\n      };\n      const result = (0, _graphTools.decorateGraph)({\n        inputGraph: SIMPLE_GRAPH\n      });\n      assert.deepEqual(result, expectedOutput);\n    });\n    (0, _qunit.test)('it processes a more complex graph without builds', function (assert) {\n      const expectedOutput = {\n        nodes: [{\n          name: '~pr',\n          pos: {\n            x: 0,\n            y: 0\n          }\n        }, {\n          name: '~commit',\n          pos: {\n            x: 0,\n            y: 1\n          }\n        }, {\n          name: 'main',\n          id: 1,\n          pos: {\n            x: 1,\n            y: 0\n          }\n        }, {\n          name: 'A',\n          id: 2,\n          pos: {\n            x: 2,\n            y: 0\n          }\n        }, {\n          name: 'B',\n          id: 3,\n          pos: {\n            x: 2,\n            y: 1\n          }\n        }, {\n          name: 'C',\n          id: 4,\n          pos: {\n            x: 3,\n            y: 0\n          }\n        }, {\n          name: 'D',\n          id: 5,\n          pos: {\n            x: 4,\n            y: 0\n          }\n        }],\n        edges: [{\n          src: '~pr',\n          dest: 'main',\n          from: {\n            x: 0,\n            y: 0\n          },\n          to: {\n            x: 1,\n            y: 0\n          }\n        }, {\n          src: '~commit',\n          dest: 'main',\n          from: {\n            x: 0,\n            y: 1\n          },\n          to: {\n            x: 1,\n            y: 0\n          }\n        }, {\n          src: 'main',\n          dest: 'A',\n          from: {\n            x: 1,\n            y: 0\n          },\n          to: {\n            x: 2,\n            y: 0\n          }\n        }, {\n          src: 'main',\n          dest: 'B',\n          from: {\n            x: 1,\n            y: 0\n          },\n          to: {\n            x: 2,\n            y: 1\n          }\n        }, {\n          src: 'A',\n          dest: 'C',\n          from: {\n            x: 2,\n            y: 0\n          },\n          to: {\n            x: 3,\n            y: 0\n          }\n        }, {\n          src: 'B',\n          dest: 'D',\n          from: {\n            x: 2,\n            y: 1\n          },\n          to: {\n            x: 4,\n            y: 0\n          }\n        }, {\n          src: 'C',\n          dest: 'D',\n          from: {\n            x: 3,\n            y: 0\n          },\n          to: {\n            x: 4,\n            y: 0\n          }\n        }],\n        meta: {\n          height: 2,\n          width: 5\n        }\n      };\n      const result = (0, _graphTools.decorateGraph)({\n        inputGraph: COMPLEX_GRAPH\n      });\n      assert.deepEqual(result, expectedOutput);\n    });\n    (0, _qunit.test)('it processes a complex graph with builds', function (assert) {\n      const builds = [{\n        jobId: 1,\n        status: 'SUCCESS',\n        id: 6\n      }, {\n        jobId: 2,\n        status: 'SUCCESS',\n        id: 7\n      }, {\n        jobId: 3,\n        status: 'SUCCESS',\n        id: 8\n      }, {\n        jobId: 4,\n        status: 'SUCCESS',\n        id: 9\n      }, {\n        jobId: 5,\n        status: 'FAILURE',\n        id: 10\n      }];\n      const expectedOutput = {\n        nodes: [{\n          name: '~pr',\n          pos: {\n            x: 0,\n            y: 0\n          }\n        }, {\n          name: '~commit',\n          status: 'STARTED_FROM',\n          pos: {\n            x: 0,\n            y: 1\n          }\n        }, {\n          name: 'main',\n          id: 1,\n          buildId: 6,\n          status: 'SUCCESS',\n          pos: {\n            x: 1,\n            y: 0\n          }\n        }, {\n          name: 'A',\n          id: 2,\n          buildId: 7,\n          status: 'SUCCESS',\n          pos: {\n            x: 2,\n            y: 0\n          }\n        }, {\n          name: 'B',\n          id: 3,\n          buildId: 8,\n          status: 'SUCCESS',\n          pos: {\n            x: 2,\n            y: 1\n          }\n        }, {\n          name: 'C',\n          id: 4,\n          buildId: 9,\n          status: 'SUCCESS',\n          pos: {\n            x: 3,\n            y: 0\n          }\n        }, {\n          name: 'D',\n          id: 5,\n          buildId: 10,\n          status: 'FAILURE',\n          pos: {\n            x: 4,\n            y: 0\n          }\n        }],\n        edges: [{\n          src: '~pr',\n          dest: 'main',\n          from: {\n            x: 0,\n            y: 0\n          },\n          to: {\n            x: 1,\n            y: 0\n          }\n        }, {\n          src: '~commit',\n          dest: 'main',\n          from: {\n            x: 0,\n            y: 1\n          },\n          to: {\n            x: 1,\n            y: 0\n          },\n          status: 'STARTED_FROM'\n        }, {\n          src: 'main',\n          dest: 'A',\n          from: {\n            x: 1,\n            y: 0\n          },\n          to: {\n            x: 2,\n            y: 0\n          },\n          status: 'SUCCESS'\n        }, {\n          src: 'main',\n          dest: 'B',\n          from: {\n            x: 1,\n            y: 0\n          },\n          to: {\n            x: 2,\n            y: 1\n          },\n          status: 'SUCCESS'\n        }, {\n          src: 'A',\n          dest: 'C',\n          from: {\n            x: 2,\n            y: 0\n          },\n          to: {\n            x: 3,\n            y: 0\n          },\n          status: 'SUCCESS'\n        }, {\n          src: 'B',\n          dest: 'D',\n          from: {\n            x: 2,\n            y: 1\n          },\n          to: {\n            x: 4,\n            y: 0\n          },\n          status: 'SUCCESS'\n        }, {\n          src: 'C',\n          dest: 'D',\n          from: {\n            x: 3,\n            y: 0\n          },\n          to: {\n            x: 4,\n            y: 0\n          },\n          status: 'SUCCESS'\n        }],\n        meta: {\n          height: 2,\n          width: 5\n        }\n      };\n      const result = (0, _graphTools.decorateGraph)({\n        inputGraph: COMPLEX_GRAPH,\n        builds,\n        start: '~commit'\n      });\n      assert.deepEqual(result, expectedOutput);\n    });\n    (0, _qunit.test)('it handles detached jobs', function (assert) {\n      const inputGraph = {\n        nodes: [{\n          name: '~pr'\n        }, {\n          name: '~commit'\n        }, {\n          name: 'main'\n        }, {\n          name: 'foo'\n        }, {\n          name: 'bar'\n        }],\n        edges: [{\n          src: '~pr',\n          dest: 'main'\n        }, {\n          src: '~commit',\n          dest: 'main'\n        }]\n      };\n      const expectedOutput = {\n        nodes: [{\n          name: '~pr',\n          pos: {\n            x: 0,\n            y: 0\n          }\n        }, {\n          name: '~commit',\n          pos: {\n            x: 0,\n            y: 1\n          }\n        }, {\n          name: 'main',\n          pos: {\n            x: 1,\n            y: 0\n          }\n        }, {\n          name: 'foo',\n          pos: {\n            x: 0,\n            y: 2\n          }\n        }, {\n          name: 'bar',\n          pos: {\n            x: 0,\n            y: 3\n          }\n        }],\n        edges: [{\n          src: '~pr',\n          dest: 'main',\n          from: {\n            x: 0,\n            y: 0\n          },\n          to: {\n            x: 1,\n            y: 0\n          }\n        }, {\n          src: '~commit',\n          dest: 'main',\n          from: {\n            x: 0,\n            y: 1\n          },\n          to: {\n            x: 1,\n            y: 0\n          }\n        }],\n        meta: {\n          height: 4,\n          width: 2\n        }\n      };\n      const result = (0, _graphTools.decorateGraph)({\n        inputGraph\n      });\n      assert.deepEqual(result, expectedOutput);\n    });\n    (0, _qunit.test)('it handles complex misordered pipeline with multiple commit/pr/remote triggers', function (assert) {\n      const expectedOutput = {\n        nodes: [{\n          name: '~pr',\n          pos: {\n            x: 0,\n            y: 0\n          }\n        }, {\n          name: '~commit',\n          pos: {\n            x: 0,\n            y: 1\n          }\n        }, {\n          name: 'no_main',\n          pos: {\n            x: 1,\n            y: 0\n          }\n        }, {\n          name: '~sd@241:main',\n          pos: {\n            x: 0,\n            y: 2\n          }\n        }, {\n          name: 'publish',\n          pos: {\n            x: 2,\n            y: 0\n          }\n        }, {\n          name: 'other_publish',\n          pos: {\n            x: 2,\n            y: 1\n          }\n        }, {\n          name: 'wow_new_main',\n          pos: {\n            x: 1,\n            y: 1\n          }\n        }, {\n          name: 'detached_main',\n          pos: {\n            x: 0,\n            y: 3\n          }\n        }, {\n          name: 'after_detached_main',\n          pos: {\n            x: 1,\n            y: 3\n          }\n        }, {\n          name: 'detached_solo',\n          pos: {\n            x: 0,\n            y: 4\n          }\n        }],\n        edges: [{\n          src: '~commit',\n          dest: 'no_main',\n          from: {\n            x: 0,\n            y: 1\n          },\n          to: {\n            x: 1,\n            y: 0\n          }\n        }, {\n          src: '~pr',\n          dest: 'no_main',\n          from: {\n            x: 0,\n            y: 0\n          },\n          to: {\n            x: 1,\n            y: 0\n          }\n        }, {\n          src: '~sd@241:main',\n          dest: 'no_main',\n          from: {\n            x: 0,\n            y: 2\n          },\n          to: {\n            x: 1,\n            y: 0\n          }\n        }, {\n          src: 'no_main',\n          dest: 'publish',\n          from: {\n            x: 1,\n            y: 0\n          },\n          to: {\n            x: 2,\n            y: 0\n          }\n        }, {\n          src: 'wow_new_main',\n          dest: 'other_publish',\n          from: {\n            x: 1,\n            y: 1\n          },\n          to: {\n            x: 2,\n            y: 1\n          }\n        }, {\n          src: '~commit',\n          dest: 'wow_new_main',\n          from: {\n            x: 0,\n            y: 1\n          },\n          to: {\n            x: 1,\n            y: 1\n          }\n        }, {\n          src: '~pr',\n          dest: 'wow_new_main',\n          from: {\n            x: 0,\n            y: 0\n          },\n          to: {\n            x: 1,\n            y: 1\n          }\n        }, {\n          src: '~sd@241:main',\n          dest: 'wow_new_main',\n          from: {\n            x: 0,\n            y: 2\n          },\n          to: {\n            x: 1,\n            y: 1\n          }\n        }, {\n          src: 'detached_main',\n          dest: 'after_detached_main',\n          from: {\n            x: 0,\n            y: 3\n          },\n          to: {\n            x: 1,\n            y: 3\n          }\n        }],\n        meta: {\n          width: 3,\n          height: 5\n        }\n      };\n      const result = (0, _graphTools.decorateGraph)({\n        inputGraph: MORE_COMPLEX_GRAPH\n      });\n      assert.deepEqual(result, expectedOutput);\n    });\n    (0, _qunit.test)('it determines the depth of a graph from various starting points', function (assert) {\n      // edges not array\n      assert.equal((0, _graphTools.graphDepth)('meow', '~commit'), Number.MAX_VALUE, 'not array'); // simple graph, commit\n\n      assert.equal((0, _graphTools.graphDepth)(SIMPLE_GRAPH.edges, '~commit'), 1, 'simple commit'); // simple graph, pr\n\n      assert.equal((0, _graphTools.graphDepth)(SIMPLE_GRAPH.edges, '~pr'), 1, 'simple pr'); // complex graph, commit\n\n      assert.equal((0, _graphTools.graphDepth)(COMPLEX_GRAPH.edges, '~commit'), 5, 'complex commit'); // more complex graph, commit\n\n      assert.equal((0, _graphTools.graphDepth)(MORE_COMPLEX_GRAPH.edges, '~commit'), 4, 'very complex commit'); // more complex graph, reverse trigger\n\n      assert.equal((0, _graphTools.graphDepth)(MORE_COMPLEX_GRAPH.edges, '~sd@241:main'), 4, 'very complex trigger'); // more complex graph, detached workflow\n\n      assert.equal((0, _graphTools.graphDepth)(MORE_COMPLEX_GRAPH.edges, 'detached_main'), 2, 'very complex detached'); // more complex graph, detached job\n\n      assert.equal((0, _graphTools.graphDepth)(MORE_COMPLEX_GRAPH.edges, 'detached_solo'), 1, 'very complex detached 2'); // more complex graph, partial pipeline\n\n      assert.equal((0, _graphTools.graphDepth)(MORE_COMPLEX_GRAPH.edges, 'publish'), 1, 'very complex partial');\n    });\n    (0, _qunit.test)('it determines if a job name is a root node', function (assert) {\n      assert.ok((0, _graphTools.isRoot)(MORE_COMPLEX_GRAPH.edges, 'detached_main'));\n      assert.ok((0, _graphTools.isRoot)(MORE_COMPLEX_GRAPH.edges, '~commit'));\n      assert.notOk((0, _graphTools.isRoot)(MORE_COMPLEX_GRAPH.edges, 'no_main'));\n    });\n    (0, _qunit.test)('it determines if a node name is a trigger node', function (assert) {\n      assert.ok((0, _graphTools.isTrigger)('~commit', '~commit'));\n      assert.ok((0, _graphTools.isTrigger)('~commit:/^detached_main$/', '~commit:detached_main'));\n      assert.ok((0, _graphTools.isTrigger)('~commit:/^detached_main.*$/', '~commit:detached_main1'));\n      assert.notOk((0, _graphTools.isTrigger)('~pr:/^detached_main$/', '~commit:detached_main'));\n      assert.notOk((0, _graphTools.isTrigger)('~commit:/^detached_main$/', '~commit:detached_main1'));\n      assert.notOk((0, _graphTools.isTrigger)('~commit:detached_main', 'no_main'));\n    });\n    (0, _qunit.test)('it reduce to subgraph given a starting point', function (assert) {\n      assert.deepEqual((0, _graphTools.subgraphFilter)(SIMPLE_GRAPH, 'main'), {\n        nodes: [{\n          name: 'main'\n        }],\n        edges: []\n      });\n      assert.deepEqual((0, _graphTools.subgraphFilter)(SIMPLE_GRAPH), SIMPLE_GRAPH);\n      assert.deepEqual((0, _graphTools.subgraphFilter)(COMPLEX_GRAPH, 'A'), {\n        nodes: [{\n          name: 'A',\n          id: 2\n        }, {\n          name: 'C',\n          id: 4\n        }, {\n          name: 'D',\n          id: 5\n        }],\n        edges: [{\n          src: 'A',\n          dest: 'C'\n        }, {\n          src: 'C',\n          dest: 'D'\n        }]\n      });\n      assert.deepEqual((0, _graphTools.subgraphFilter)(MORE_COMPLEX_GRAPH, 'wow_new_main'), {\n        nodes: [{\n          name: 'other_publish'\n        }, {\n          name: 'wow_new_main'\n        }],\n        edges: [{\n          src: 'wow_new_main',\n          dest: 'other_publish'\n        }]\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/utils/template-test\", [\"screwdriver-ui/utils/template\", \"qunit\"], function (_template, _qunit) {\n  \"use strict\";\n\n  const {\n    getFullName,\n    getLastUpdatedTime\n  } = _template.default;\n  (0, _qunit.module)('Unit | Utility | template', function () {\n    (0, _qunit.test)('it gets the name as full name when no namespace is passed in', function (assert) {\n      const expectedOutput = 'myTemplateName';\n      const result = getFullName({\n        name: 'myTemplateName',\n        namespace: null\n      });\n      assert.deepEqual(result, expectedOutput);\n    });\n    (0, _qunit.test)('it gets the namespace/name as full name when namespace is passed in', function (assert) {\n      const expectedOutput = 'myNamespace/myName';\n      const result = getFullName({\n        name: 'myName',\n        namespace: 'myNamespace'\n      });\n      assert.deepEqual(result, expectedOutput);\n    });\n    (0, _qunit.test)('it gets the name as full name when namespace is default', function (assert) {\n      const expectedOutput = 'myName';\n      const result = getFullName({\n        name: 'myName',\n        namespace: 'default'\n      });\n      assert.deepEqual(result, expectedOutput);\n    });\n    (0, _qunit.test)('it gets the last updated time', function (assert) {\n      const createTime = '2016-09-23T16:53:00.274Z';\n      const timeDiff = Date.now() - new Date(createTime).getTime();\n      const expectedOutput = \"\".concat(humanizeDuration(timeDiff, {\n        round: true,\n        largest: 1\n      }), \" ago\");\n      const result = getLastUpdatedTime({\n        createTime\n      });\n      assert.deepEqual(result, expectedOutput);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/utils/time-range-test\", [\"screwdriver-ui/utils/time-range\", \"qunit\"], function (_timeRange, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Utility | time range', function () {\n    (0, _qunit.test)('it returns a range of date times given duration', function (assert) {\n      const d = new Date('2019-03-26T21:03:05.183Z');\n      let {\n        startTime,\n        endTime\n      } = (0, _timeRange.default)(d, '1hr');\n      assert.equal(startTime, '2019-03-26T20:03');\n      assert.equal(endTime, '2019-03-26T21:03');\n      ({\n        startTime,\n        endTime\n      } = (0, _timeRange.default)(d, '12hr'));\n      assert.equal(startTime, '2019-03-26T09:03');\n      assert.equal(endTime, '2019-03-26T21:03');\n      ({\n        startTime,\n        endTime\n      } = (0, _timeRange.default)(d, '1d'));\n      assert.equal(startTime, '2019-03-25T21:03');\n      assert.equal(endTime, '2019-03-26T21:03');\n      ({\n        startTime,\n        endTime\n      } = (0, _timeRange.default)(d, '1wk'));\n      assert.equal(startTime, '2019-03-19T21:03');\n      assert.equal(endTime, '2019-03-26T21:03');\n      ({\n        startTime,\n        endTime\n      } = (0, _timeRange.default)(d, '1mo'));\n      assert.equal(startTime, '2019-02-26T21:03');\n      assert.equal(endTime, '2019-03-26T21:03');\n    });\n    (0, _qunit.test)('it returns a 16-character ISO 8601 up to minute', function (assert) {\n      assert.equal((0, _timeRange.iso8601UpToMinute)(new Date('2019-03-26T21:03:05.183Z')), '2019-03-26T21:03');\n    });\n    (0, _qunit.test)('it returns a locale date time string', function (assert) {\n      assert.equal((0, _timeRange.toCustomLocaleString)(new Date('2019-03-26T21:03:05.183Z'), {\n        timeZone: 'UTC',\n        options: {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit'\n        }\n      }), '03/26/2019, 9:03 PM');\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/validator/controller-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"sinon\"], function (_qunit, _emberQunit, _testHelpers, _sinon) {\n  \"use strict\";\n\n  const serviceMock = {\n    isTemplate: _sinon.default.stub(),\n    getValidationResults: _sinon.default.stub()\n  };\n  const validatorStub = Ember.Service.extend(serviceMock);\n  const EXAMPLE_TEMPLATE = \"\\nname: batman/batmobile\\nversion: 2.0.1\\ndescription: Big noisy car\\nmaintainer: batman@batcave.com\\nconfig:\\n  image: batman:4\\n  steps:\\n    - forgreatjustice: ba.sh\";\n  const EXAMPLE_CONFIG = \"\\njobs:\\n  main:\\n    image: batman:4\\n    steps:\\n      - forgreatjustice: ba.sh\\n\";\n  (0, _qunit.module)('Unit | Controller | validator', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Specify the other units that are required for this test.\n    // needs: ['service:validator'],\n\n    hooks.beforeEach(function () {\n      this.owner.register('service:validator', validatorStub);\n      this.validator = this.owner.lookup('service:validator');\n      serviceMock.isTemplate.reset();\n      serviceMock.getValidationResults.reset();\n    });\n    (0, _qunit.test)('it handles template yaml', function (assert) {\n      const controller = this.owner.lookup('controller:validator');\n      const expectedResult = {\n        foo: 'bar'\n      };\n      serviceMock.isTemplate.withArgs(EXAMPLE_TEMPLATE).returns(true);\n      serviceMock.getValidationResults.withArgs(EXAMPLE_TEMPLATE).returns(Ember.RSVP.resolve(expectedResult)); // wrap the test in the run loop because we are dealing with async functions\n\n      return Ember.run(() => {\n        controller.set('yaml', EXAMPLE_TEMPLATE);\n        return (0, _testHelpers.settled)().then(() => {\n          assert.equal(controller.get('isTemplate'), true);\n          assert.deepEqual(controller.get('results'), expectedResult);\n        });\n      });\n    });\n    (0, _qunit.test)('it handles screwdriver yaml', function (assert) {\n      const controller = this.owner.lookup('controller:validator');\n      const expectedResult = {\n        foo: 'bar'\n      };\n      serviceMock.isTemplate.withArgs(EXAMPLE_CONFIG).returns(false);\n      serviceMock.getValidationResults.withArgs(EXAMPLE_CONFIG).returns(Ember.RSVP.resolve(expectedResult)); // wrap the test in the run loop because we are dealing with async functions\n\n      return Ember.run(() => {\n        controller.set('yaml', EXAMPLE_CONFIG);\n        return (0, _testHelpers.settled)().then(() => {\n          assert.equal(controller.get('isTemplate'), false);\n          assert.deepEqual(controller.get('results'), expectedResult);\n        });\n      });\n    });\n    (0, _qunit.test)('it handles clearing yaml', function (assert) {\n      const controller = this.owner.lookup('controller:validator');\n      const expectedResult = {\n        foo: 'bar'\n      };\n      serviceMock.isTemplate.withArgs(EXAMPLE_CONFIG).returns(false);\n      serviceMock.getValidationResults.withArgs(EXAMPLE_CONFIG).returns(Ember.RSVP.resolve(expectedResult)); // wrap the test in the run loop because we are dealing with async functions\n\n      return Ember.run(() => {\n        controller.set('yaml', EXAMPLE_CONFIG);\n        return (0, _testHelpers.settled)().then(() => {\n          assert.equal(controller.get('isTemplate'), false);\n          assert.deepEqual(controller.get('results'), expectedResult);\n          controller.set('yaml', '');\n          assert.equal(controller.get('results'), '');\n        });\n      });\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/validator/route-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | validator', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      const route = this.owner.lookup('route:validator');\n      assert.ok(route);\n    });\n  });\n});","define(\"screwdriver-ui/tests/unit/validator/service-test\", [\"qunit\", \"ember-qunit\", \"pretender\"], function (_qunit, _emberQunit, _pretender) {\n  \"use strict\";\n\n  const sessionStub = Ember.Service.extend({\n    data: {\n      authenticated: {\n        token: 'faketoken'\n      }\n    }\n  });\n  let server;\n  const EXAMPLE_CONFIG_PAYLOAD = {\n    errors: [],\n    jobs: {},\n    workflow: ['main']\n  };\n  const EXAMPLE_TEMPLATE_PAYLOAD = {\n    errors: [],\n    template: {}\n  };\n  (0, _qunit.module)('Unit | Service | validator', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n\n    hooks.beforeEach(function () {\n      this.owner.register('service:session', sessionStub);\n      server = new _pretender.default();\n      server.post('http://localhost:8080/v4/validator', () => [200, {\n        'Content-Type': 'application/json'\n      }, JSON.stringify(EXAMPLE_CONFIG_PAYLOAD)]);\n      server.post('http://localhost:8080/v4/validator/template', request => {\n        if (request.requestBody === '{\"yaml\":\"name: joker\"}') {\n          return [400, {\n            'Content-Type': 'application/json'\n          }, JSON.stringify({\n            error: 'villains'\n          })];\n        }\n\n        return [200, {\n          'Content-Type': 'application/json'\n        }, JSON.stringify(EXAMPLE_TEMPLATE_PAYLOAD)];\n      });\n    });\n    hooks.afterEach(function () {\n      server.shutdown();\n    });\n    (0, _qunit.test)('it determines if something looks like a template', function (assert) {\n      const service = this.owner.lookup('service:validator');\n      assert.ok(service.isTemplate('name: bananas'));\n      assert.notOk(service.isTemplate('workflow: bananas'));\n    });\n    (0, _qunit.test)('it uploads a template to the validator', function (assert) {\n      const service = this.owner.lookup('service:validator');\n\n      server.handledRequest = function (verb, path, request) {\n        assert.equal(verb, 'POST');\n        assert.equal(request.withCredentials, true);\n        assert.ok(request.requestHeaders.Authorization);\n      };\n\n      return service.getValidationResults('name: batman').then(response => {\n        assert.deepEqual(response, EXAMPLE_TEMPLATE_PAYLOAD);\n      });\n    });\n    (0, _qunit.test)('it uploads a config to the validator', function (assert) {\n      const service = this.owner.lookup('service:validator');\n\n      server.handledRequest = function (verb, path, request) {\n        assert.equal(verb, 'POST');\n        assert.equal(request.withCredentials, true);\n        assert.ok(request.requestHeaders.Authorization);\n      };\n\n      return service.getValidationResults('workflow: [batman]').then(response => {\n        assert.deepEqual(response, EXAMPLE_CONFIG_PAYLOAD);\n      });\n    });\n    (0, _qunit.test)('it handles validator failure', function (assert) {\n      const service = this.owner.lookup('service:validator');\n      return service.getValidationResults('name: joker').catch(response => {\n        assert.equal(response, '400 villains');\n      });\n    });\n  });\n});","define('screwdriver-ui/config/environment', [], function() {\n  var prefix = 'screwdriver-ui';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('screwdriver-ui/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsxzlzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnljrjzzNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtvpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpelCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbrQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClrpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvvlvlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtznTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvnhEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnlMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzlxnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}